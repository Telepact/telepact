[
  {
    "///": " Ping the server. ",
    "fn._ping": {},
    "->": {
      "Ok": {}
    },
    "errors": "^error\\._Validated$"
  },

  {
    "///": " Get the uAPI `schema` of this server. ",
    "fn._api": {},
    "->": {
      "Ok": {
        "api": ["array", ["object", ["any"]]]
      }
    },
    "errors": "^error\\._Validated$"
  },

  {
    "///": [" A placeholder function when the requested function is unknown. "],
    "fn._unknown": {},
    "->": {
      "Ok": {}
    },
    "errors": "^error\\._Validated$"
  },

  {
    "struct._Auth": {},
    "ignoreIfDuplicate": true
  },

  {
    "_ext._Select": {}
  },

  {
    "///": [
      " uAPI standard headers.                                                                   ",
      "                                                                                          ",
      " A `_id` request header will be reflected as-is in the `_id` response header.             ",
      "                                                                                          ",
      " The `_sel` header is used to select fields from structs. It is an object of string       ",
      " arrays keyed by struct reference name pointing to field names of that struct that should ",
      " be selected. Field names not included in the array are omitted in the response wherever  ",
      " that field would have appeared.                                                          ",
      "                                                                                          ",
      " If the `_unsafe` request header is set to `true`, response validation by the server will ",
      " be disabled.                                                                             ",
      "                                                                                          ",
      " The `_tim` request header represents the timeout in milliseconds set by the client       ",
      " when the request was submitted.                                                          ",
      "                                                                                          ",
      " A `_bin` request header indicates the binary checksums known by the client, which will   ",
      " prompt the inclusion of the `_bin` response header with the binary checksum currently in ",
      " use by the server. If server binary checksum does not match one of the client-indicated  ",
      " binary checksums in the `_bin` request header, then the server will also include the     ",
      " `_enc` response header containing the binary encoding, an object of possible keys mapped ",
      " onto a field id.                                                                         "
    ],
    "headers._Standard": {
      "_id": ["any"],
      "_unsafe": ["boolean"],
      "_sel": ["_ext._Select"],
      "_auth": ["struct._Auth"],
      "_tim": ["integer"],
      "_bin": ["array", ["integer"]]
    },
    "->": {
      "_id": ["any"],
      "_bin": ["array", ["integer"]],
      "_enc": ["object", ["integer"]]
    }
  },

  {
    "///": " A type. ",
    "union._Type": {
      "Null": {},
      "Boolean": {},
      "Integer": {},
      "Number": {},
      "String": {},
      "Array": {},
      "Object": {},
      "Any": {},
      "Unknown": {}
    }
  },

  {
    "///": " A reason for the validation failure in the body. ",
    "union._ValidationFailureReason": {
      "TypeUnexpected": {
        "expected": ["union._Type"],
        "actual": ["union._Type"]
      },
      "NullDisallowed": {},
      "ObjectKeyDisallowed": {},
      "NumberOutOfRange": {},
      "ObjectSizeUnexpected": {
        "expected": ["integer"],
        "actual": ["integer"]
      },
      "ExtensionValidationFailed": {
        "reason": ["string"],
        "data!": ["object", ["any"]]
      },
      "ObjectKeyRegexMatchCountUnexpected": {
        "regex": ["string"],
        "expected": ["integer"],
        "actual": ["integer"]
      },
      "RequiredObjectKeyMissing": {},
      "FunctionUnknown": {}
    }
  },

  {
    "///": " A parse failure. ",
    "union._ParseFailure": {
      "IncompatibleBinaryEncoding": {},
      "BinaryDecodeFailure": {},
      "JsonInvalid": {},
      "ExpectedJsonArrayOfAnObjectAndAnObjectOfOneObject": {},
      "ExpectedJsonArrayOfTwoObjects": {}
    }
  },

  {
    "///": " A validation failure located at a `path` explained by a `reason`. ",
    "struct._ValidationFailure": {
      "path": ["array", ["any"]],
      "reason": ["union._ValidationFailureReason"]
    }
  },

  {
    "///": [
      " All functions may return a validation error:                                                             ",
      " - `_ErrorInvalidRequestHeaders`: The Headers on the Request is invalid as outlined by a list of `cases`. ",
      " - `_ErrorInvalidRequestBody`: The Body on the Request is invalid as outlined by a list of `cases`.       ",
      " - `_ErrorInvalidResponseBody`: The Body that the Server attempted to put on the Response is invalid as   ",
      "     outlined by a list of `cases.                                                                        ",
      " - `_ErrorParseFailure`: The Request could not be parsed as a uAPI Message.                               "
    ],
    "error._Validated": {
      "->": {
        "_ErrorUnknown": {},
        "_ErrorInvalidRequestHeaders": {
          "cases": ["array", ["struct._ValidationFailure"]]
        },
        "_ErrorInvalidRequestBody": {
          "cases": ["array", ["struct._ValidationFailure"]]
        },
        "_ErrorInvalidResponseBody": {
          "cases": ["array", ["struct._ValidationFailure"]]
        },
        "_ErrorParseFailure": {
          "reasons": ["array", ["union._ParseFailure"]]
        }
      }
    }
  },

  {
    "///": [
      " When the `struct._Auth` struct is defined, all functions may return one of the following errors:         ",
      " 1. `_ErrorUnauthenticated` indicating that the credentials in the `_auth` header were missing or invalid ",
      " 2. `_ErrorUnauthorized` indicating that the credentials in the `_auth` header were insufficient to run the function    "
    ],
    "error._Authenticated": {
      "->": {
        "_ErrorUnauthenticated": {
          "message!": ["string"]
        },
        "_ErrorUnauthorized": {
          "message!": ["string"]
        }
      }
    }
  }
]
