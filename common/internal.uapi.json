[
    {
        "///": " Ping the server. ",
        "fn.ping_": {},
        "->": {
            "Ok": {}
        },
        "_errors": "^errors\\.Validated_$"
    },
    {
        "///": " Get the uAPI `schema` of this server. ",
        "fn.api_": {},
        "->": {
            "Ok": {
                "api": [
                    "array",
                    [
                        "object",
                        [
                            "any"
                        ]
                    ]
                ]
            }
        },
        "_errors": "^errors\\.Validated_$"
    },
    {
        "struct.Auth_": {},
        "_ignoreIfDuplicate": true
    },
    {
        "_ext.Select_": {}
    },
    {
        "///": [
            " The `tim_` request header represents the timeout in milliseconds set by the     ",
            " client when the request was submitted.                                          ",
            "                                                                                 ",
            " The `auth_` header is the conventional location for sending credentials to the  ",
            " server for the purpose of authentication and authorization.                     ",
            "                                                                                 ",
            " If the `unsafe_` request header is set to `true`, response validation by the    ",
            " server will be disabled.                                                        ",
            "                                                                                 ",
            " The `select_` header is used to select fields from structs. It is an object of  ",
            " string arrays keyed by struct reference name pointing to field names of that    ",
            " struct that should be selected. Field names not included in the array are       ",
            " omitted in the response wherever that field would have appeared.                ",
            "                                                                                 ",
            " A `bin_` request header indicates the binary checksums known by the client,     ",
            " which will prompt the inclusion of the `bin_` response header with the binary   ",
            " checksum currently in use by the server. If server binary checksum does not     ",
            " match one of the client-indicated binary checksums in the `bin_` request        ",
            " header, then the server will also include the `enc_` response header            ",
            " containing the binary encoding, an object of possible keys mapped onto a field  ",
            " id.                                                                             ",
            "                                                                                 ",
            " A `id_` request header will be reflected as-is in the `id_` response header.    "
        ],
        "headers": {
            "tim_": [
                "integer"
            ],
            "auth_": [
                "struct.Auth_"
            ],
            "unsafe_": [
                "boolean"
            ],
            "select_": [
                "_ext.Select_"
            ],
            "bin_": [
                "array",
                [
                    "integer"
                ]
            ],
            "id_": [
                "any"
            ]
        },
        "->": {
            "bin_": [
                "array",
                [
                    "integer"
                ]
            ],
            "enc_": [
                "object",
                [
                    "integer"
                ]
            ],
            "id_": [
                "any"
            ]
        }
    },
    {
        "///": " A type. ",
        "union.Type_": {
            "Null": {},
            "Boolean": {},
            "Integer": {},
            "Number": {},
            "String": {},
            "Array": {},
            "Object": {},
            "Any": {},
            "Unknown": {}
        }
    },
    {
        "///": " A reason for the validation failure in the body. ",
        "union.ValidationFailureReason_": {
            "TypeUnexpected": {
                "expected": [
                    "union.Type_"
                ],
                "actual": [
                    "union.Type_"
                ]
            },
            "NullDisallowed": {},
            "ObjectKeyDisallowed": {},
            "NumberOutOfRange": {},
            "ObjectSizeUnexpected": {
                "expected": [
                    "integer"
                ],
                "actual": [
                    "integer"
                ]
            },
            "ExtensionValidationFailed": {
                "reason": [
                    "string"
                ],
                "data!": [
                    "object",
                    [
                        "any"
                    ]
                ]
            },
            "ObjectKeyRegexMatchCountUnexpected": {
                "regex": [
                    "string"
                ],
                "expected": [
                    "integer"
                ],
                "actual": [
                    "integer"
                ],
                "keys": [
                    "array",
                    [
                        "string"
                    ]
                ]
            },
            "RequiredObjectKeyMissing": {},
            "FunctionUnknown": {}
        }
    },
    {
        "///": " A parse failure. ",
        "union.ParseFailure_": {
            "IncompatibleBinaryEncoding": {},
            "BinaryDecodeFailure": {},
            "JsonInvalid": {},
            "ExpectedJsonArrayOfAnObjectAndAnObjectOfOneObject": {},
            "ExpectedJsonArrayOfTwoObjects": {}
        }
    },
    {
        "///": " A validation failure located at a `path` explained by a `reason`. ",
        "struct.ValidationFailure_": {
            "path": [
                "array",
                [
                    "any"
                ]
            ],
            "reason": [
                "union.ValidationFailureReason_"
            ]
        }
    },
    {
        "///": [
            " All functions may return a validation error:                                    ",
            "                                                                                 ",
            " - `ErrorInvalidRequestHeaders_`: The Headers on the Request is invalid as       ",
            "   outlined by a list of `cases`.                                                ",
            " - `ErrorInvalidRequestBody_`: The Body on the Request is invalid as outlined    ",
            "   by a list of `cases`.                                                         ",
            " - `ErrorInvalidResponseBody_`: The Body that the Server attempted to put on     ",
            "   the Response is invalid as outlined by a list of `cases.                      ",
            " - `ErrorParseFailure_`: The Request could not be parsed as a uAPI Message.      "
        ],
        "errors.Validated_": {
            "ErrorUnknown_": {},
            "ErrorInvalidRequestHeaders_": {
                "cases": [
                    "array",
                    [
                        "struct.ValidationFailure_"
                    ]
                ]
            },
            "ErrorInvalidRequestBody_": {
                "cases": [
                    "array",
                    [
                        "struct.ValidationFailure_"
                    ]
                ]
            },
            "ErrorInvalidResponseHeaders_": {
                "cases": [
                    "array",
                    [
                        "struct.ValidationFailure_"
                    ]
                ]
            },
            "ErrorInvalidResponseBody_": {
                "cases": [
                    "array",
                    [
                        "struct.ValidationFailure_"
                    ]
                ]
            },
            "ErrorParseFailure_": {
                "reasons": [
                    "array",
                    [
                        "union.ParseFailure_"
                    ]
                ]
            }
        }
    },
    {
        "///": [
            " When the `struct._Auth` struct is defined, all functions may return one of the  ",
            " following errors:                                                               ",
            "                                                                                 ",
            " 1. `ErrorUnauthenticated_` indicating that the credentials in the `_auth`       ",
            "    header were missing or invalid                                               ",
            " 2. `ErrorUnauthorized_` indicating that the credentials in the `_auth` header   ",
            "    were insufficient to run the function                                        "
        ],
        "errors.Authenticated_": {
            "ErrorUnauthenticated_": {
                "message!": [
                    "string"
                ]
            },
            "ErrorUnauthorized_": {
                "message!": [
                    "string"
                ]
            }
        }
    }
]
