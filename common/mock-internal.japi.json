[
  {
    "///": " A stubbed result for matching input. ",
    "ext._Stub": {}
  },
  {
    "///": " A call of a function. ",
    "ext._Call": {}
  },
  {
    "///": " The number of times a function is allowed to be called. ",
    "union._CallCountCriteria": {
      "Exact": {
        "times": ["integer"]
      },
      "AtMost": {
        "times": ["integer"]
      },
      "AtLeast": {
        "times": ["integer"]
      }
    }
  },
  {
    "///": " An unioneration of possible causes for a mock verification to fail. ",
    "union._VerificationFailure": {
      "TooFewMatchingCalls": {
        "wanted": ["union._CallCountCriteria"],
        "found": ["integer"],
        "allCalls": ["array", ["ext._Call"]]
      },
      "TooManyMatchingCalls": {
        "wanted": ["union._CallCountCriteria"],
        "found": ["integer"],
        "allCalls": ["array", ["ext._Call"]]
      }
    }
  },
  {
    "///": [
      " Create a function stub that will cause the server to return the `stub` result when the `stub` argument   ",
      " matches the function argument on a request.                                                              ",
      "                                                                                                          ",
      " If `ignoreMissingArgFields` is `true`, then the server will skip field omission validation on the `stub` ",
      " argument, and the stub will match calls where the given `stub` argument is Exactly a json sub-structure  ",
      " of the request function argument.                                                                        ",
      "                                                                                                          ",
      " If `generateMissingResultFields` is `true`, then the server will skip field omission validation on the   ",
      " `stub` result, and the server will generate the necessary data required to make the `result` pass on     ",
      " response validation.                                                                                     "
    ],
    "fn._createStub": {
      "stub": ["ext._Stub"],
      "strictMatch!": ["boolean"]
    },
    "->": {
      "Ok": {}
    }
  },
  {
    "///": [
      " Verify a call was made with this mock that matches the given `call` and `multiplicity` criteria. If    ",
      " `allowPartialArgMatch` is supplied as `true`, then the server will skip field omission validation, and ",
      " match calls where the given `call` argument is Exactly a json sub-structure of the actual argument.    "
    ],
    "fn._verify": {
      "call": ["ext._Call"],
      "strictMatch!": ["boolean"],
      "count!": ["union._CallCountCriteria"]
    },
    "->": {
      "Ok": {},
      "ErrorVerificationFailure": {
        "reason": ["union._VerificationFailure"]
      }
    }
  },
  {
    "///": [
      " Verify that no interactions have occurred with this mock or that all ",
      " interactions have been verified.                                     "
    ],
    "fn._verifyNoMoreInteractions": {},
    "->": {
      "Ok": {},
      "ErrorVerificationFailure": {
        "additionalUnverifiedCalls": ["array", ["ext._Call"]]
      }
    }
  },
  {
    "///": " Clear all stub conditions. ",
    "fn._clearStubs": {},
    "->": {
      "Ok": {}
    }
  },
  {
    "///": " Clear all call data. ",
    "fn._clearCalls": {},
    "->": {
      "Ok": {}
    }
  },
  {
    "///": [
      " If random generation is disabled, functions may return a `_ErrorNoMatchingStub`  ",
      " error, indicating that the mock could not return a result for that function call ",
      " due to no matching stub being available.                                         "
    ],
    "trait._Mockable": {
      "fn.*": {},
      "->": {
        "_ErrorNoMatchingStub": {}
      }
    }
  }
]
