#|
#|  Copyright The Telepact Authors
#|
#|  Licensed under the Apache License, Version 2.0 (the "License");
#|  you may not use this file except in compliance with the License.
#|  You may obtain a copy of the License at
#|
#|  https://www.apache.org/licenses/LICENSE-2.0
#|
#|  Unless required by applicable law or agreed to in writing, software
#|  distributed under the License is distributed on an "AS IS" BASIS,
#|  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#|  See the License for the specific language governing permissions and
#|  limitations under the License.
#|

name: CI

on:
  workflow_dispatch:
    inputs:
      release:
        required: false
        default: 'false'

  pull_request:
    types:
      - opened
      - synchronize
      - reopened
    branches:
      - main

permissions:
  actions: write

jobs:
  build-ts:
    runs-on: ubuntu-latest
    timeout-minutes: 1
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build ts
        env:
          NPM_INSTALL: ci
        run: make ts

      - name: Upload ts build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-ts
          path: lib/ts/dist
          retention-days: 1

      - name: Upload ts-tgz build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-ts-tgz
          path: lib/ts/dist-tgz
          retention-days: 1

  build-java:
    runs-on: ubuntu-latest
    timeout-minutes: 1
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "corretto"

      # - name: Cache Maven packages
      #   uses: actions/cache@v4
      #   with:
      #     path: lib/java/.m2
      #     key: ${{ runner.os }}-lib-maven-${{ hashFiles('lib/java/pom.xml') }}
      #     restore-keys: |
      #       ${{ runner.os }}-lib-maven-

      - name: Configure GPG
        run: echo "${{ secrets.MVN_GPG_PRIVATE_KEY }}" | gpg --batch --import --yes

      - name: Build java
        env:
          GPG_PASSPHRASE: ${{ secrets.MVN_GPG_PASSPHRASE }}
          MVN_BUILD: deploy -P credentialed
        run: make java

      - name: Upload java build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-java
          path: lib/java/target
          retention-days: 1

  build-py:
    runs-on: ubuntu-latest
    timeout-minutes: 1
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Poetry
        run: pipx install poetry

      - name: Install dependencies
        run: make py

      - name: Upload py build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-py
          path: lib/py/dist
          retention-days: 1

  build-cli:
    runs-on: ubuntu-latest
    timeout-minutes: 1
    needs: [build-py]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Poetry
        run: pipx install poetry

      - name: Download py build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-py
          path: lib/py/dist

      - name: Build cli
        run: make cli

      - name: Upload cli build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-cli
          path: sdk/cli/dist
          retention-days: 1

  build-dart:
    runs-on: ubuntu-latest
    timeout-minutes: 2
    needs: [build-ts]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Dart
        uses: dart-lang/setup-dart@v1
        with:
          sdk: 3.6

      - name: Install Chrome
        run: |
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable

      - name: Download ts build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-ts
          path: lib/ts/dist

      - name: Build dart
        run: make dart

      - name: Run tests
        run: make test-dart

      - name: Upload dart build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-dart
          path: bind/dart/dist
          retention-days: 1

  build-prettier:
    runs-on: ubuntu-latest
    timeout-minutes: 1
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: make prettier

      - name: Upload prettier build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-prettier
          path: sdk/prettier/dist
          retention-days: 1

      - name: Upload prettier-tgz build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-prettier-tgz
          path: sdk/prettier/dist-tgz
          retention-days: 1

  build-console:
    runs-on: ubuntu-latest
    timeout-minutes: 2
    needs: [build-ts, build-cli, build-prettier]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download ts build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-ts
          path: lib/ts/dist

      - name: Download prettier build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-prettier
          path: sdk/prettier/dist

      - name: Download cli build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-cli
          path: sdk/cli/dist

      - name: Download prettier build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-prettier
          path: sdk/prettier/dist
      
      - name: Install CLI
        run: make install-cli

      - name: Build console
        run: make console
      
      - name: Install Playwright Browsers
        run: npx playwright install --force
      
      - name: Run tests
        run: DEBUG=pw:api make test-console

      - name: Upload console build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-console
          path: sdk/console/dist
          retention-days: 1
  
  test-console-self-host:
    runs-on: ubuntu-latest
    timeout-minutes: 2
    needs: [build-console]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download console build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-console
          path: sdk/console/dist

      - name: Build test environment
        run: make console-self-hosted

      - name: Run test
        run: make test-console-self-hosted

  build-docker:
    runs-on: ubuntu-latest
    timeout-minutes: 1
    needs: [build-cli]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download py build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-py
          path: lib/py/dist

      - name: Download cli build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-cli
          path: sdk/cli/dist

      - name: Build Docker image
        run: make docker

      - name: Test Docker image
        run: make test-docker

      - name: Upload docker build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-docker
          path: sdk/docker/dist
          retention-days: 1

  check-license-header:
    runs-on: ubuntu-latest
    timeout-minutes: 1
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Project CLI
        run: make install-project-cli

      - name: Run license check
        run: make license-header

      - name: Check for changes
        run: |
          if git status --porcelain | grep .; then
            echo "ERROR: License headers missing or obsolete.\nTo fix, run 'make license-header' and git commit the changes."
            false
          else
            echo "License headers up-to-date."
          fi

  check-version:
    runs-on: ubuntu-latest
    timeout-minutes: 1
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Project CLI
        run: make install-project-cli

      - name: Run version check
        run: make version

      - name: Check for changes
        run: |
          if git status --porcelain | grep .; then
            echo "ERROR: Misaligned versions.\nTo fix, run 'make version' and git commit the changes."
            false
          else
            echo "Versions up-to-date."
          fi

  add-labels:
    runs-on: ubuntu-latest
    timeout-minutes: 1
    if: github.event_name == 'pull_request'
    permissions:
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Project CLI
        run: make install-project-cli

      - name: Determine and update tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          BASE_BRANCH: ${{ github.event.pull_request.base.ref }}
          HEAD_SHA: ${{ github.sha }}
        run: telepact-project github-labels

  run-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [build-ts, build-java, build-py, build-cli]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Poetry
        run: pipx install poetry

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "corretto"

      # - name: Cache Maven packages
      #   uses: actions/cache@v4
      #   with:
      #     path: test/lib/java/.m2
      #     key: ${{ runner.os }}-test-maven-${{ hashFiles('test/lib/java/pom.xml') }}
      #     restore-keys: |
      #       ${{ runner.os }}-test-maven-

      - name: Install nats-server
        run: |
          sudo apt-get update
          sudo apt-get install -y nats-server

      - name: Download ts build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-ts
          path: lib/ts/dist

      - name: Download java build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-java
          path: lib/java/target

      - name: Download py build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-py
          path: lib/py/dist

      - name: Download cli build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-cli
          path: sdk/cli/dist

      - name: Install CLI
        run: make install-cli

      - name: Run tests
        run: |
          make test

  finish:
    runs-on: ubuntu-latest
    timeout-minutes: 1
    needs:
      - build-ts
      - build-java
      - build-py
      - build-cli
      - build-dart
      - build-prettier
      - build-console
      - build-docker
      - check-license-header
      - check-version
      - run-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Trigger Release
        if: github.event.inputs.release == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh workflow run release.yml --ref main -f artifacts_run_id=${{ github.run_id }}