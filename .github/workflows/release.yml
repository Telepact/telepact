#|
#|  Copyright The Telepact Authors
#|
#|  Licensed under the Apache License, Version 2.0 (the "License");
#|  you may not use this file except in compliance with the License.
#|  You may obtain a copy of the License at
#|
#|  https://www.apache.org/licenses/LICENSE-2.0
#|
#|  Unless required by applicable law or agreed to in writing, software
#|  distributed under the License is distributed on an "AS IS" BASIS,
#|  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#|  See the License for the specific language governing permissions and
#|  limitations under the License.
#|

name: Release

on:
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  create-release-branch:
    name: Create release branch
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:
      - name: Generate GitHub App token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.TELEPACT_BOT_APP_ID }}
          private-key: ${{ secrets.TELEPACT_BOT_PRIVATE_KEY }}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          token: ${{ steps.generate-token.outputs.token }}

      # Required for bumping lock files
      - name: Set up Dart
        uses: dart-lang/setup-dart@v1
        with:
          sdk: 3.6

      # Required for bumping lock files
      - name: Install Poetry
        run: pipx install poetry

      - name: Install Project CLI
        run: make install-project-cli

      - name: Configure git identity
        run: |
          git config --global user.name "telepact-notary[bot]"
          git config --global user.email "telepact-notary[bot]@users.noreply.github.com"

      - name: git status
        run: git status

      - name: Bump version
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: telepact-project bump

      - name: git log
        run: git log -n 1

      - name: Push release branch
        run: git push origin HEAD:release-pull-request-${{ github.event.pull_request.number }}

  build-release-branch:
    name: Build release
    uses: ./.github/workflows/build.yml
    needs: [create-release-branch]
    with:
      branch: release-pull-request-${{ github.event.pull_request.number }}
    
  automerge-release-branch:
    name: Automerge release branch
    runs-on: ubuntu-latest
    needs: [build-release-branch]
    steps:
      - name: Generate GitHub App token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.TELEPACT_BOT_APP_ID }}
          private-key: ${{ secrets.TELEPACT_BOT_PRIVATE_KEY }}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          token: ${{ steps.generate-token.outputs.token }}

      - name: Configure git identity
        run: |
          git config --global user.name "telepact-notary[bot]"
          git config --global user.email "telepact-notary[bot]@users.noreply.github.com"

      - name: git status
        run: git status

      - name: Fetch branches
        run: git fetch origin release-pull-request-${{ github.event.pull_request.number }}
      
      - name: Merge release branch
        run: git merge --ff-only origin/release-pull-request-${{ github.event.pull_request.number }}

      - name: Push changes
        run: git push origin HEAD

      - name: Delete release branch
        run: git push origin --delete release-pull-request-${{ github.event.pull_request.number }}

  create-release:
    name: Create release
    runs-on: ubuntu-latest
    needs: [automerge-release-branch]
    timeout-minutes: 2
    steps:
      - name: Generate GitHub App token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.TELEPACT_BOT_APP_ID }}
          private-key: ${{ secrets.TELEPACT_BOT_PRIVATE_KEY }}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          token: ${{ steps.generate-token.outputs.token }}

      - name: Download ts artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-ts-tgz
          path: lib/ts/dist-tgz
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.inputs.artifacts_run_id }}

      - name: Download java artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-java
          path: lib/java/target
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.inputs.artifacts_run_id }}

      - name: Download py artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-py
          path: lib/py/dist
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.inputs.artifacts_run_id }}

      - name: Download dart artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-dart
          path: bind/dart/dist
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.inputs.artifacts_run_id }}

      - name: Download cli artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-cli
          path: sdk/cli/dist
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.inputs.artifacts_run_id }}

      - name: Download prettier artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-prettier-tgz
          path: sdk/prettier/dist-tgz
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.inputs.artifacts_run_id }}

      - name: Download console artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-console
          path: sdk/console/dist
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.inputs.artifacts_run_id }}

      - name: Install Project CLI
        run: make install-project-cli

      - name: Cut release
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: telepact-project release
        


    

  
          