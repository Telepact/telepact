
    package io.github.brenbar.japi;

    import org.junit.jupiter.api.Test;

    import java.io.*;

    public class GeneratedBinaryExactTests {

    
        @Test
        public void testBinary_binary_0() throws IOException {
            var argument = new byte[] {
            (byte) 0x92, (byte) 0x81, (byte) 0xa4, (byte) 0x5f, (byte) 0x62, (byte) 0x69, (byte) 0x6e, (byte) 0x91, (byte) 0xd2, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x81, (byte) 0x0, (byte) 0x80
            };
            var expectedResult = new byte[] {
            (byte) 0x5b, (byte) 0x7b, (byte) 0x7d, (byte) 0x2c, (byte) 0x7b, (byte) 0x22, (byte) 0x5f, (byte) 0x65, (byte) 0x72, (byte) 0x72, (byte) 0x6f, (byte) 0x72, (byte) 0x50, (byte) 0x61, (byte) 0x72, (byte) 0x73, (byte) 0x65, (byte) 0x46, (byte) 0x61, (byte) 0x69, (byte) 0x6c, (byte) 0x75, (byte) 0x72, (byte) 0x65, (byte) 0x22, (byte) 0x3a, (byte) 0x7b, (byte) 0x22, (byte) 0x72, (byte) 0x65, (byte) 0x61, (byte) 0x73, (byte) 0x6f, (byte) 0x6e, (byte) 0x73, (byte) 0x22, (byte) 0x3a, (byte) 0x5b, (byte) 0x22, (byte) 0x49, (byte) 0x6e, (byte) 0x63, (byte) 0x6f, (byte) 0x6d, (byte) 0x70, (byte) 0x61, (byte) 0x74, (byte) 0x69, (byte) 0x62, (byte) 0x6c, (byte) 0x65, (byte) 0x42, (byte) 0x69, (byte) 0x6e, (byte) 0x61, (byte) 0x72, (byte) 0x79, (byte) 0x45, (byte) 0x6e, (byte) 0x63, (byte) 0x6f, (byte) 0x64, (byte) 0x69, (byte) 0x6e, (byte) 0x67, (byte) 0x22, (byte) 0x5d, (byte) 0x7d, (byte) 0x7d, (byte) 0x5d
            };
            TestUtility.testBinaryExact(argument, expectedResult);
        }
        
        @Test
        public void testBinary_binary_1() throws IOException {
            var argument = new byte[] {
            (byte) 0x80
            };
            var expectedResult = new byte[] {
            (byte) 0x5b, (byte) 0x7b, (byte) 0x7d, (byte) 0x2c, (byte) 0x7b, (byte) 0x22, (byte) 0x5f, (byte) 0x65, (byte) 0x72, (byte) 0x72, (byte) 0x6f, (byte) 0x72, (byte) 0x50, (byte) 0x61, (byte) 0x72, (byte) 0x73, (byte) 0x65, (byte) 0x46, (byte) 0x61, (byte) 0x69, (byte) 0x6c, (byte) 0x75, (byte) 0x72, (byte) 0x65, (byte) 0x22, (byte) 0x3a, (byte) 0x7b, (byte) 0x22, (byte) 0x72, (byte) 0x65, (byte) 0x61, (byte) 0x73, (byte) 0x6f, (byte) 0x6e, (byte) 0x73, (byte) 0x22, (byte) 0x3a, (byte) 0x5b, (byte) 0x22, (byte) 0x49, (byte) 0x6e, (byte) 0x76, (byte) 0x61, (byte) 0x6c, (byte) 0x69, (byte) 0x64, (byte) 0x4a, (byte) 0x73, (byte) 0x6f, (byte) 0x6e, (byte) 0x22, (byte) 0x5d, (byte) 0x7d, (byte) 0x7d, (byte) 0x5d
            };
            TestUtility.testBinaryExact(argument, expectedResult);
        }
        
        @Test
        public void testBinary_binary_2() throws IOException {
            var argument = new byte[] {
            (byte) 0x92, (byte) 0x81, (byte) 0xa4, (byte) 0x5f, (byte) 0x62, (byte) 0x69, (byte) 0x6e, (byte) 0x91, (byte) 0xd2, (byte) 0xf0, (byte) 0xba, (byte) 0x79, (byte) 0xa7, (byte) 0x81, (byte) 0x0, (byte) 0x80
            };
            var expectedResult = new byte[] {
            (byte) 0x92, (byte) 0x81, (byte) 0xa4, (byte) 0x5f, (byte) 0x62, (byte) 0x69, (byte) 0x6e, (byte) 0x91, (byte) 0xd2, (byte) 0xf0, (byte) 0xba, (byte) 0x79, (byte) 0xa7, (byte) 0x81, (byte) 0xa2, (byte) 0x6f, (byte) 0x6b, (byte) 0x80
            };
            TestUtility.testBinaryExact(argument, expectedResult);
        }
        
    }
    