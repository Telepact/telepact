[
    {
        "info.SchemaExample": {}
    },
    {
        "///": " A type. ",
        "union.Type": [{
            "Null": {}
        }, {
            "Boolean": {}
        }, {
            "Integer": {}
        }, {
            "Number": {}
        }, {
            "String": {}
        }, {
            "Array": {}
        }, {
            "Object": {}
        }, {
            "StringOrArrayOrObject": {}
        }, {
            "Any": {}
        }, {
            "Unknown": {}
        }]
    },
    {
        "union.ValidationFailureReason": [{
            "TypeUnexpected": {
                "expected": "union.Type",
                "actual": "union.Type"
            }
        }, {
            "ErrorDefinitionCannotTargetInternalFunctions": {}
        }, {
            "EmptyArrayDisallowed": {}
        }, {
            "EmptyObjectDisallowed": {}
        }, {
            "StringRegexMatchFailed": {
                "regex": "string"
            }
        }, {
            "KeyRegexMatchFailed": {
                "regex": "string"
            }
        }, {
            "ObjectKeyRegexMatchCountUnexpected": {
                "regex": "string",
                "expected": "integer",
                "actual": "integer",
                "keys": ["string"]
            }
        }, {
            "ArrayLengthUnexpected": {
                "actual": "integer",
                "expected": "integer"
            }
        }, {
            "ObjectSizeUnexpected": {
                "actual": "integer",
                "expected": "integer"
            }
        }, {
            "TypeUnknown": {
                "name": "string"
            }
        }, {
            "TypeExtensionImplementationMissing": {
                "name": "string"
            }
        }, {
            "RequiredObjectKeyMissing": {
                "key": "string"
            }
        }, {
            "JsonInvalid": {}
        }, {
            "PathCollision": {
                "document": "string",
                "path": ["any"],
                "location": "struct.JsonLocation"
            }
        }, {
            "FileNamePatternInvalid": {
                "expected": "string"
            }
        }, {
            "ObjectKeyDisallowed": {}
        }]
    },
    {
        "struct.JsonLocation": {
            "row": "integer",
            "col": "integer"
        }
    },
    {
        "struct.ValidationFailure": {
            "document": "string",
            "path": ["any"],
            "location": "struct.JsonLocation",
            "reason": "union.ValidationFailureReason"
        }
    },
    {
        "union.SchemaInput": [{
            "PseudoJson": {
                "schema": "any?",
                "extend!": "any?"
            }
        }, {
            "Json": {
                "schema": "string"
            }
        }, {
            "Directory": {
                "schemaDirectory": "string"
            }
        }]
    },
    {
        "fn.validateSchema": {
            "input": "union.SchemaInput"
        },
        "->": [{
            "Ok_": {}
        }, {
            "ErrorValidationFailure": {
                "cases": ["struct.ValidationFailure"]
            }
        }]
    }
]