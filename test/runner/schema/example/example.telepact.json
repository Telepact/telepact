[
    {
        "///": [
            " This is the example schema. It is focussed on outlining type edge cases for     ",
            " use in tests.                                                                   ",
            "                                                                                 ",
            " As a reminder:                                                                  ",
            "                                                                                 ",
            " - ! means optional field                                                        ",
            " - ? means nullable type                                                         "
        ],
        "info.Example": {}
    },
    {
        "///": " A struct value demonstrating all common type permutations. ",
        "struct.Value": {
            "bool!": ["boolean"],
            "nullBool!": ["boolean?"],
            "arrBool!": ["array", ["boolean"]],
            "arrNullBool!": ["array", ["boolean?"]],
            "objBool!": ["object", ["boolean"]],
            "objNullBool!": ["object", ["boolean?"]],
            "int!": ["integer"],
            "nullInt!": ["integer?"],
            "arrInt!": ["array", ["integer"]],
            "arrNullInt!": ["array", ["integer?"]],
            "objInt!": ["object", ["integer"]],
            "objNullInt!": ["object", ["integer?"]],
            "num!": ["number"],
            "nullNum!": ["number?"],
            "arrNum!": ["array", ["number"]],
            "arrNullNum!": ["array", ["number?"]],
            "objNum!": ["object", ["number"]],
            "objNullNum!": ["object", ["number?"]],
            "str!": ["string"],
            "nullStr!": ["string?"],
            "arrStr!": ["array", ["string"]],
            "arrNullStr!": ["array", ["string?"]],
            "objStr!": ["object", ["string"]],
            "objNullStr!": ["object", ["string?"]],
            "any!": ["any"],
            "nullAny!": ["any?"],
            "arrAny!": ["array", ["any"]],
            "arrNullAny!": ["array", ["any?"]],
            "objAny!": ["object", ["any"]],
            "objNullAny!": ["object", ["any?"]],
            "bytes!": ["bytes"],
            "nullBytes!": ["bytes?"],
            "arrBytes!": ["array", ["bytes"]],
            "arrNullBytes!": ["array", ["bytes?"]],
            "objBytes!": ["object", ["bytes"]],
            "objNullBytes!": ["object", ["bytes?"]],
            "arr!": ["array", ["any"]],
            "nullArr!": ["array?", ["any"]],
            "arrArr!": ["array", ["array", ["any"]]],
            "arrNullArr!": ["array", ["array?", ["any"]]],
            "objArr!": ["object", ["array", ["any"]]],
            "objNullArr!": ["object", ["array?", ["any"]]],
            "obj!": ["object", ["any"]],
            "nullObj!": ["object?", ["any"]],
            "arrObj!": ["array", ["object", ["any"]]],
            "arrNullObj!": ["array", ["object?", ["any"]]],
            "objObj!": ["object", ["object", ["any"]]],
            "objNullObj!": ["object", ["object?", ["any"]]],
            "struct!": ["struct.ExStruct"],
            "nullStruct!": ["struct.ExStruct?"],
            "arrStruct!": ["array", ["struct.ExStruct"]],
            "arrNullStruct!": ["array", ["struct.ExStruct?"]],
            "objStruct!": ["object", ["struct.ExStruct"]],
            "objNullStruct!": ["object", ["struct.ExStruct?"]],
            "union!": ["union.ExUnion"],
            "nullUnion!": ["union.ExUnion?"],
            "arrUnion!": ["array", ["union.ExUnion"]],
            "arrNullUnion!": ["array", ["union.ExUnion?"]],
            "objUnion!": ["object", ["union.ExUnion"]],
            "objNullUnion!": ["object", ["union.ExUnion?"]],
            "fn!": ["fn.example"],
            "nullFn!": ["fn.example?"],
            "arrFn!": ["array", ["fn.example"]],
            "arrNullFn!": ["array", ["fn.example?"]],
            "objFn!": ["object", ["fn.example"]],
            "objNullFn!": ["object", ["fn.example?"]],
            "sel!": ["_ext.Select_"],
            "nullSel!": ["_ext.Select_?"],
            "arrSel!": ["array", ["_ext.Select_"]],
            "arrNullSel!": ["array", ["_ext.Select_?"]],
            "objSel!": ["object", ["_ext.Select_"]],
            "objNullSel!": ["object", ["_ext.Select_?"]]
        }
    },
    {
        "///": [
            " The main struct example.                                                        ",
            "                                                                                 ",
            " The [required] field must be supplied. The optional field does not need to be   ",
            " supplied.                                                                       "
        ],
        "struct.ExStruct": {
            "required": ["boolean"],
            "optional!": ["boolean"],
            "optional2!": ["integer"]
        }
    },
    {
        "union.ExUnion": [
            {
                "One": {}
            },
            {
                "Two": {
                    "required": ["boolean"],
                    "optional!": ["boolean"]
                }
            }
        ]
    },
    {
        "struct.Big": {
            "aF": ["boolean"],
            "cF": ["boolean"],
            "bF": ["boolean"],
            "dF": ["boolean"]
        }
    },
    {
        "///": " An example function. ",
        "fn.example": {
            "required": ["boolean"],
            "optional!": ["boolean"]
        },
        "->": [
            {
                "Ok_": {
                    "required": ["boolean"],
                    "optional!": ["boolean"]
                }
            }
        ]
    },
    {
        "fn.test": {
            "value!": ["struct.Value"]
        },
        "->": [
            {
                "Ok_": {
                    "value!": ["struct.Value"]
                }
            },
            {
                "ErrorExample": {
                    "property": ["string"]
                }
            }
        ]
    },
    {
        "fn.getBigList": {},
        "->": [
            {
                "Ok_": {
                    "items": ["array", ["struct.Big"]]
                }
            }
        ]
    },
    {
        "headers.ExampleHeaders": {
            "@in": ["boolean"]
        },
        "->": {
            "@out": ["boolean"]
        }
    }
]