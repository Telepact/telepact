[
    {
        "///": [
            " This is the example schema. It is focussed on outlining type edge cases for     ",
            " use in tests.                                                                   ",
            "                                                                                 ",
            " As a reminder:                                                                  ",
            "                                                                                 ",
            " - ! means optional field                                                        ",
            " - ? means nullable type                                                         "
        ],
        "info.Example": {}
    },
    {
        "///": " A struct value demonstrating all common type permutations. ",
        "struct.Value": {
            "bool!": "boolean",
            "nullBool!": "boolean?",
            "arrBool!": ["boolean"],
            "arrNullBool!": ["boolean?"],
            "objBool!": {"string": "boolean"},
            "objNullBool!": {"string": "boolean?"},
            "int!": "integer",
            "nullInt!": "integer?",
            "arrInt!": ["integer"],
            "arrNullInt!": ["integer?"],
            "objInt!": {"string": "integer"},
            "objNullInt!": {"string": "integer?"},
            "num!": "number",
            "nullNum!": "number?",
            "arrNum!": ["number"],
            "arrNullNum!": ["number?"],
            "objNum!": {"string": "number"},
            "objNullNum!": {"string": "number?"},
            "str!": "string",
            "nullStr!": "string?",
            "arrStr!": ["string"],
            "arrNullStr!": ["string?"],
            "objStr!": {"string": "string"},
            "objNullStr!": {"string": "string?"},
            "any!": "any",
            "nullAny!": "any?",
            "arrAny!": ["any"],
            "arrNullAny!": ["any?"],
            "objAny!": {"string": "any"},
            "objNullAny!": {"string": "any?"},
            "bytes!": "bytes",
            "nullBytes!": "bytes?",
            "arrBytes!": ["bytes"],
            "arrNullBytes!": ["bytes?"],
            "objBytes!": {"string": "bytes"},
            "objNullBytes!": {"string": "bytes?"},
            "arr!": ["any"],

            "arrArr!": [["any"]],

            "objArr!": {"string": ["any"]},

            "obj!": {"string": "any"},

            "arrObj!": [{"string": "any"}],

            "objObj!": {"string": {"string": "any"}},

            "struct!": "struct.ExStruct",
            "nullStruct!": "struct.ExStruct?",
            "arrStruct!": ["struct.ExStruct"],
            "arrNullStruct!": ["struct.ExStruct?"],
            "objStruct!": {"string": "struct.ExStruct"},
            "objNullStruct!": {"string": "struct.ExStruct?"},
            "union!": "union.ExUnion",
            "nullUnion!": "union.ExUnion?",
            "arrUnion!": ["union.ExUnion"],
            "arrNullUnion!": ["union.ExUnion?"],
            "objUnion!": {"string": "union.ExUnion"},
            "objNullUnion!": {"string": "union.ExUnion?"},
            "fn!": "fn.example",
            "nullFn!": "fn.example?",
            "arrFn!": ["fn.example"],
            "arrNullFn!": ["fn.example?"],
            "objFn!": {"string": "fn.example"},
            "objNullFn!": {"string": "fn.example?"},
            "sel!": "_ext.Select_",
            "nullSel!": "_ext.Select_?",
            "arrSel!": ["_ext.Select_"],
            "arrNullSel!": ["_ext.Select_?"],
            "objSel!": {"string": "_ext.Select_"},
            "objNullSel!": {"string": "_ext.Select_?"}
        }
    },
    {
        "///": [
            " The main struct example.                                                        ",
            "                                                                                 ",
            " The [required] field must be supplied. The optional field does not need to be   ",
            " supplied.                                                                       "
        ],
        "struct.ExStruct": {
            "required": "boolean",
            "optional!": "boolean",
            "optional2!": "integer"
        }
    },
    {
        "union.ExUnion": [
            {
                "One": {}
            },
            {
                "Two": {
                    "required": "boolean",
                    "optional!": "boolean"
                }
            }
        ]
    },
    {
        "struct.Big": {
            "aF": "boolean",
            "cF": "boolean",
            "bF": "boolean",
            "dF": "boolean"
        }
    },
    {
        "///": " An example function. ",
        "fn.example": {
            "required": "boolean",
            "optional!": "boolean"
        },
        "->": [
            {
                "Ok_": {
                    "required": "boolean",
                    "optional!": "boolean"
                }
            }
        ]
    },
    {
        "fn.test": {
            "value!": "struct.Value"
        },
        "->": [
            {
                "Ok_": {
                    "value!": "struct.Value"
                }
            },
            {
                "ErrorExample": {
                    "property": "string"
                }
            }
        ]
    },
    {
        "fn.getBigList": {},
        "->": [
            {
                "Ok_": {
                    "items": ["struct.Big"]
                }
            }
        ]
    },
    {
        "fn.selfLink": {
            "required": "boolean",
            "optional!": "boolean"
        },
        "->": [
            {
                "Ok_": {
                    "followSelf": "fn.selfLink"
                }
            }
        ]
    },
    {
        "fn.circularLink1": {
            "field1": "boolean"
        },
        "->": [
            {
                "Ok_": {
                    "follow": "fn.circularLink2"
                }
            }
        ]
    },
    {
        "fn.circularLink2": {
            "field2": "boolean"
        },
        "->": [
            {
                "Ok_": {
                    "follow": "fn.circularLink1"
                }
            }
        ]
    },
    {
        "headers.ExampleHeaders": {
            "@in": "boolean"
        },
        "->": {
            "@out": "boolean"
        }
    },
    {
        "errors.ExampleErrors": [
            {
                "ErrorExample2": {
                    "field1": "string"
                }
            }
        ]
    }
]