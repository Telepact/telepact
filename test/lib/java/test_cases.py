
from generate_test import verify_case, backdoor_handler, client_backdoor_handler
import os
from lib.java import server
from lib.java import mock_server
from lib.java import schema_server
from lib.java import client_server
import json
import unittest
import multiprocessing
from multiprocessing.shared_memory import ShareableList

                            
path = 'lib/java'



class TestCases(unittest.TestCase):
                              
    @classmethod
    def setUpClass(cls):
        initial_list = [0] * 10000
        cls.backdoor_results = ShareableList(initial_list)
        cls.process = multiprocessing.Process(target=backdoor_handler, args=(path, cls.backdoor_results,))
        cls.process.start()                                            
        
        cls.server = server.start('../../test/example.japi.json')
    
    @classmethod
    def tearDownClass(cls):
        cls.backdoor_results.shm.close()
        cls.backdoor_results.shm.unlink()
        cls.process.terminate()
        cls.process.join()
        cls.server.terminate()
        cls.server.wait()

    def setUp(self):
        self.__class__.backdoor_results[0] += 1
                        
    
    def test_boolean_0(self):
        request = [{'ok': {'value': {'bool': False}}}, {'fn.test': {'value': {'bool': False}}}]
        expected_response = [{}, {'ok': {'value': {'bool': False}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_1(self):
        request = [{'ok': {'value': {'bool': True}}}, {'fn.test': {'value': {'bool': True}}}]
        expected_response = [{}, {'ok': {'value': {'bool': True}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_2(self):
        request = [{}, {'fn.test': {'value': {'bool': None}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.bool', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_3(self):
        request = [{}, {'fn.test': {'value': {'bool': 0}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.bool', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_4(self):
        request = [{}, {'fn.test': {'value': {'bool': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.bool', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_5(self):
        request = [{}, {'fn.test': {'value': {'bool': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.bool', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_6(self):
        request = [{}, {'fn.test': {'value': {'bool': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.bool', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_7(self):
        request = [{}, {'fn.test': {'value': {'bool': {}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.bool', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_8(self):
        request = [{'ok': {'value': {'bool': None}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.bool', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_9(self):
        request = [{'ok': {'value': {'bool': 0}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.bool', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_10(self):
        request = [{'ok': {'value': {'bool': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.bool', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_11(self):
        request = [{'ok': {'value': {'bool': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.bool', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_12(self):
        request = [{'ok': {'value': {'bool': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.bool', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_13(self):
        request = [{'ok': {'value': {'bool': {}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.bool', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_14(self):
        request = [{'ok': {'value': {'nullBool': None}}}, {'fn.test': {'value': {'nullBool': None}}}]
        expected_response = [{}, {'ok': {'value': {'nullBool': None}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_15(self):
        request = [{'ok': {'value': {'nullBool': False}}}, {'fn.test': {'value': {'nullBool': False}}}]
        expected_response = [{}, {'ok': {'value': {'nullBool': False}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_16(self):
        request = [{'ok': {'value': {'nullBool': True}}}, {'fn.test': {'value': {'nullBool': True}}}]
        expected_response = [{}, {'ok': {'value': {'nullBool': True}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_17(self):
        request = [{}, {'fn.test': {'value': {'nullBool': 0}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullBool', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_18(self):
        request = [{}, {'fn.test': {'value': {'nullBool': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullBool', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_19(self):
        request = [{}, {'fn.test': {'value': {'nullBool': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullBool', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_20(self):
        request = [{}, {'fn.test': {'value': {'nullBool': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullBool', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_21(self):
        request = [{}, {'fn.test': {'value': {'nullBool': {}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullBool', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_22(self):
        request = [{'ok': {'value': {'nullBool': 0}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullBool', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_23(self):
        request = [{'ok': {'value': {'nullBool': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullBool', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_24(self):
        request = [{'ok': {'value': {'nullBool': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullBool', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_25(self):
        request = [{'ok': {'value': {'nullBool': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullBool', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_26(self):
        request = [{'ok': {'value': {'nullBool': {}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullBool', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_27(self):
        request = [{'ok': {'value': {'arrBool': []}}}, {'fn.test': {'value': {'arrBool': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrBool': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_28(self):
        request = [{'ok': {'value': {'arrBool': [False]}}}, {'fn.test': {'value': {'arrBool': [False]}}}]
        expected_response = [{}, {'ok': {'value': {'arrBool': [False]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_29(self):
        request = [{'ok': {'value': {'arrBool': [True]}}}, {'fn.test': {'value': {'arrBool': [True]}}}]
        expected_response = [{}, {'ok': {'value': {'arrBool': [True]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_30(self):
        request = [{'ok': {'value': {'arrBool': [False, True]}}}, {'fn.test': {'value': {'arrBool': [False, True]}}}]
        expected_response = [{}, {'ok': {'value': {'arrBool': [False, True]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_31(self):
        request = [{}, {'fn.test': {'value': {'arrBool': [False, None]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrBool[1]', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_32(self):
        request = [{}, {'fn.test': {'value': {'arrBool': [False, 0]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrBool[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_33(self):
        request = [{}, {'fn.test': {'value': {'arrBool': [False, 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrBool[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_34(self):
        request = [{}, {'fn.test': {'value': {'arrBool': [False, '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrBool[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_35(self):
        request = [{}, {'fn.test': {'value': {'arrBool': [False, []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrBool[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_36(self):
        request = [{}, {'fn.test': {'value': {'arrBool': [False, {}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrBool[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_37(self):
        request = [{'ok': {'value': {'arrBool': [False, None]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrBool[1]', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_38(self):
        request = [{'ok': {'value': {'arrBool': [False, 0]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrBool[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_39(self):
        request = [{'ok': {'value': {'arrBool': [False, 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrBool[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_40(self):
        request = [{'ok': {'value': {'arrBool': [False, '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrBool[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_41(self):
        request = [{'ok': {'value': {'arrBool': [False, []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrBool[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_42(self):
        request = [{'ok': {'value': {'arrBool': [False, {}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrBool[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_43(self):
        request = [{'ok': {'value': {'arrNullBool': []}}}, {'fn.test': {'value': {'arrNullBool': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullBool': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_44(self):
        request = [{'ok': {'value': {'arrNullBool': [None]}}}, {'fn.test': {'value': {'arrNullBool': [None]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullBool': [None]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_45(self):
        request = [{'ok': {'value': {'arrNullBool': [False]}}}, {'fn.test': {'value': {'arrNullBool': [False]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullBool': [False]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_46(self):
        request = [{'ok': {'value': {'arrNullBool': [True]}}}, {'fn.test': {'value': {'arrNullBool': [True]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullBool': [True]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_47(self):
        request = [{'ok': {'value': {'arrNullBool': [None, False, True]}}}, {'fn.test': {'value': {'arrNullBool': [None, False, True]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullBool': [None, False, True]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_48(self):
        request = [{}, {'fn.test': {'value': {'arrNullBool': [False, 0]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullBool[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_49(self):
        request = [{}, {'fn.test': {'value': {'arrNullBool': [False, 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullBool[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_50(self):
        request = [{}, {'fn.test': {'value': {'arrNullBool': [False, '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullBool[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_51(self):
        request = [{}, {'fn.test': {'value': {'arrNullBool': [False, []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullBool[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_52(self):
        request = [{}, {'fn.test': {'value': {'arrNullBool': [False, {}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullBool[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_53(self):
        request = [{'ok': {'value': {'arrNullBool': [False, 0]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullBool[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_54(self):
        request = [{'ok': {'value': {'arrNullBool': [False, 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullBool[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_55(self):
        request = [{'ok': {'value': {'arrNullBool': [False, '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullBool[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_56(self):
        request = [{'ok': {'value': {'arrNullBool': [False, []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullBool[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_57(self):
        request = [{'ok': {'value': {'arrNullBool': [False, {}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullBool[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_58(self):
        request = [{'ok': {'value': {'objBool': {}}}}, {'fn.test': {'value': {'objBool': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objBool': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_59(self):
        request = [{'ok': {'value': {'objBool': {'a': False}}}}, {'fn.test': {'value': {'objBool': {'a': False}}}}]
        expected_response = [{}, {'ok': {'value': {'objBool': {'a': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_60(self):
        request = [{'ok': {'value': {'objBool': {'a': True}}}}, {'fn.test': {'value': {'objBool': {'a': True}}}}]
        expected_response = [{}, {'ok': {'value': {'objBool': {'a': True}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_61(self):
        request = [{'ok': {'value': {'objBool': {'a': False, 'b': True}}}}, {'fn.test': {'value': {'objBool': {'a': False, 'b': True}}}}]
        expected_response = [{}, {'ok': {'value': {'objBool': {'a': False, 'b': True}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_62(self):
        request = [{}, {'fn.test': {'value': {'objBool': {'a': False, 'b': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objBool{b}', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_63(self):
        request = [{}, {'fn.test': {'value': {'objBool': {'a': False, 'b': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objBool{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_64(self):
        request = [{}, {'fn.test': {'value': {'objBool': {'a': False, 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objBool{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_65(self):
        request = [{}, {'fn.test': {'value': {'objBool': {'a': False, 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objBool{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_66(self):
        request = [{}, {'fn.test': {'value': {'objBool': {'a': False, 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objBool{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_67(self):
        request = [{}, {'fn.test': {'value': {'objBool': {'a': False, 'b': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objBool{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_68(self):
        request = [{'ok': {'value': {'objBool': {'a': False, 'b': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objBool{b}', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_69(self):
        request = [{'ok': {'value': {'objBool': {'a': False, 'b': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objBool{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_70(self):
        request = [{'ok': {'value': {'objBool': {'a': False, 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objBool{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_71(self):
        request = [{'ok': {'value': {'objBool': {'a': False, 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objBool{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_72(self):
        request = [{'ok': {'value': {'objBool': {'a': False, 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objBool{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_73(self):
        request = [{'ok': {'value': {'objBool': {'a': False, 'b': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objBool{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_74(self):
        request = [{'ok': {'value': {'objNullBool': {}}}}, {'fn.test': {'value': {'objNullBool': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullBool': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_75(self):
        request = [{'ok': {'value': {'objNullBool': {'a': None}}}}, {'fn.test': {'value': {'objNullBool': {'a': None}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullBool': {'a': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_76(self):
        request = [{'ok': {'value': {'objNullBool': {'a': False}}}}, {'fn.test': {'value': {'objNullBool': {'a': False}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullBool': {'a': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_77(self):
        request = [{'ok': {'value': {'objNullBool': {'a': True}}}}, {'fn.test': {'value': {'objNullBool': {'a': True}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullBool': {'a': True}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_78(self):
        request = [{'ok': {'value': {'objNullBool': {'a': None, 'b': False, 'c': True}}}}, {'fn.test': {'value': {'objNullBool': {'a': None, 'b': False, 'c': True}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullBool': {'a': None, 'b': False, 'c': True}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_79(self):
        request = [{}, {'fn.test': {'value': {'objNullBool': {'a': False, 'b': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullBool{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_80(self):
        request = [{}, {'fn.test': {'value': {'objNullBool': {'a': False, 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullBool{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_81(self):
        request = [{}, {'fn.test': {'value': {'objNullBool': {'a': False, 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullBool{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_82(self):
        request = [{}, {'fn.test': {'value': {'objNullBool': {'a': False, 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullBool{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_83(self):
        request = [{}, {'fn.test': {'value': {'objNullBool': {'a': False, 'b': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullBool{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_84(self):
        request = [{'ok': {'value': {'objNullBool': {'a': False, 'b': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullBool{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_85(self):
        request = [{'ok': {'value': {'objNullBool': {'a': False, 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullBool{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_86(self):
        request = [{'ok': {'value': {'objNullBool': {'a': False, 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullBool{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_87(self):
        request = [{'ok': {'value': {'objNullBool': {'a': False, 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullBool{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_88(self):
        request = [{'ok': {'value': {'objNullBool': {'a': False, 'b': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullBool{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_89(self):
        request = [{'ok': {'value': {'pStrBool': {'wrap': False}}}}, {'fn.test': {'value': {'pStrBool': {'wrap': False}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrBool': {'wrap': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_90(self):
        request = [{'ok': {'value': {'pStrBool': {'wrap': True}}}}, {'fn.test': {'value': {'pStrBool': {'wrap': True}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrBool': {'wrap': True}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_91(self):
        request = [{}, {'fn.test': {'value': {'pStrBool': {'wrap': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_92(self):
        request = [{}, {'fn.test': {'value': {'pStrBool': {'wrap': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_93(self):
        request = [{}, {'fn.test': {'value': {'pStrBool': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_94(self):
        request = [{}, {'fn.test': {'value': {'pStrBool': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_95(self):
        request = [{}, {'fn.test': {'value': {'pStrBool': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_96(self):
        request = [{}, {'fn.test': {'value': {'pStrBool': {'wrap': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_97(self):
        request = [{'ok': {'value': {'pStrBool': {'wrap': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_98(self):
        request = [{'ok': {'value': {'pStrBool': {'wrap': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_99(self):
        request = [{'ok': {'value': {'pStrBool': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_100(self):
        request = [{'ok': {'value': {'pStrBool': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_101(self):
        request = [{'ok': {'value': {'pStrBool': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_102(self):
        request = [{'ok': {'value': {'pStrBool': {'wrap': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_103(self):
        request = [{'ok': {'value': {'pStrNullBool': {'wrap': None}}}}, {'fn.test': {'value': {'pStrNullBool': {'wrap': None}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullBool': {'wrap': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_104(self):
        request = [{'ok': {'value': {'pStrNullBool': {'wrap': False}}}}, {'fn.test': {'value': {'pStrNullBool': {'wrap': False}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullBool': {'wrap': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_105(self):
        request = [{'ok': {'value': {'pStrNullBool': {'wrap': True}}}}, {'fn.test': {'value': {'pStrNullBool': {'wrap': True}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullBool': {'wrap': True}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_106(self):
        request = [{}, {'fn.test': {'value': {'pStrNullBool': {'wrap': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_107(self):
        request = [{}, {'fn.test': {'value': {'pStrNullBool': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_108(self):
        request = [{}, {'fn.test': {'value': {'pStrNullBool': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_109(self):
        request = [{}, {'fn.test': {'value': {'pStrNullBool': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_110(self):
        request = [{}, {'fn.test': {'value': {'pStrNullBool': {'wrap': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_111(self):
        request = [{'ok': {'value': {'pStrNullBool': {'wrap': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_112(self):
        request = [{'ok': {'value': {'pStrNullBool': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_113(self):
        request = [{'ok': {'value': {'pStrNullBool': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_114(self):
        request = [{'ok': {'value': {'pStrNullBool': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_115(self):
        request = [{'ok': {'value': {'pStrNullBool': {'wrap': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_116(self):
        request = [{'ok': {'value': {'pEnumBool': {'one': {}}}}}, {'fn.test': {'value': {'pEnumBool': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumBool': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_117(self):
        request = [{'ok': {'value': {'pEnumBool': {'two': {'ewrap': False}}}}}, {'fn.test': {'value': {'pEnumBool': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumBool': {'two': {'ewrap': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_118(self):
        request = [{'ok': {'value': {'pEnumBool': {'two': {'ewrap': True}}}}}, {'fn.test': {'value': {'pEnumBool': {'two': {'ewrap': True}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumBool': {'two': {'ewrap': True}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_119(self):
        request = [{}, {'fn.test': {'value': {'pEnumBool': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_120(self):
        request = [{}, {'fn.test': {'value': {'pEnumBool': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_121(self):
        request = [{}, {'fn.test': {'value': {'pEnumBool': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_122(self):
        request = [{}, {'fn.test': {'value': {'pEnumBool': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_123(self):
        request = [{}, {'fn.test': {'value': {'pEnumBool': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_124(self):
        request = [{}, {'fn.test': {'value': {'pEnumBool': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_125(self):
        request = [{'ok': {'value': {'pEnumBool': {'two': {'ewrap': None}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_126(self):
        request = [{'ok': {'value': {'pEnumBool': {'two': {'ewrap': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_127(self):
        request = [{'ok': {'value': {'pEnumBool': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_128(self):
        request = [{'ok': {'value': {'pEnumBool': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_129(self):
        request = [{'ok': {'value': {'pEnumBool': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_130(self):
        request = [{'ok': {'value': {'pEnumBool': {'two': {'ewrap': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_131(self):
        request = [{'ok': {'value': {'pEnumNullBool': {'one': {}}}}}, {'fn.test': {'value': {'pEnumNullBool': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullBool': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_132(self):
        request = [{'ok': {'value': {'pEnumNullBool': {'two': {'ewrap': None}}}}}, {'fn.test': {'value': {'pEnumNullBool': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullBool': {'two': {'ewrap': None}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_133(self):
        request = [{'ok': {'value': {'pEnumNullBool': {'two': {'ewrap': False}}}}}, {'fn.test': {'value': {'pEnumNullBool': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullBool': {'two': {'ewrap': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_134(self):
        request = [{'ok': {'value': {'pEnumNullBool': {'two': {'ewrap': True}}}}}, {'fn.test': {'value': {'pEnumNullBool': {'two': {'ewrap': True}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullBool': {'two': {'ewrap': True}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_135(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullBool': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_136(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullBool': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_137(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullBool': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_138(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullBool': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_139(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullBool': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_140(self):
        request = [{'ok': {'value': {'pEnumNullBool': {'two': {'ewrap': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_141(self):
        request = [{'ok': {'value': {'pEnumNullBool': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_142(self):
        request = [{'ok': {'value': {'pEnumNullBool': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_143(self):
        request = [{'ok': {'value': {'pEnumNullBool': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_boolean_144(self):
        request = [{'ok': {'value': {'pEnumNullBool': {'two': {'ewrap': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_0(self):
        request = [{'ok': {'value': {'int': 0}}}, {'fn.test': {'value': {'int': 0}}}]
        expected_response = [{}, {'ok': {'value': {'int': 0}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_1(self):
        request = [{'ok': {'value': {'int': -1}}}, {'fn.test': {'value': {'int': -1}}}]
        expected_response = [{}, {'ok': {'value': {'int': -1}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_2(self):
        request = [{'ok': {'value': {'int': 1}}}, {'fn.test': {'value': {'int': 1}}}]
        expected_response = [{}, {'ok': {'value': {'int': 1}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_3(self):
        request = [{'ok': {'value': {'int': 9223372036854775807}}}, {'fn.test': {'value': {'int': 9223372036854775807}}}]
        expected_response = [{}, {'ok': {'value': {'int': 9223372036854775807}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_4(self):
        request = [{'ok': {'value': {'int': -9223372036854775808}}}, {'fn.test': {'value': {'int': -9223372036854775808}}}]
        expected_response = [{}, {'ok': {'value': {'int': -9223372036854775808}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_5(self):
        request = [{}, {'fn.test': {'value': {'int': 9223372036854775808}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.int', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_6(self):
        request = [{}, {'fn.test': {'value': {'int': -9223372036854775809}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.int', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_7(self):
        request = [{}, {'fn.test': {'value': {'int': None}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.int', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_8(self):
        request = [{}, {'fn.test': {'value': {'int': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.int', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_9(self):
        request = [{}, {'fn.test': {'value': {'int': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.int', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_10(self):
        request = [{}, {'fn.test': {'value': {'int': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.int', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_11(self):
        request = [{}, {'fn.test': {'value': {'int': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.int', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_12(self):
        request = [{}, {'fn.test': {'value': {'int': {}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.int', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_13(self):
        request = [{'ok': {'value': {'int': 9223372036854775808}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.int', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_14(self):
        request = [{'ok': {'value': {'int': -9223372036854775809}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.int', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_15(self):
        request = [{'ok': {'value': {'int': None}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.int', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_16(self):
        request = [{'ok': {'value': {'int': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.int', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_17(self):
        request = [{'ok': {'value': {'int': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.int', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_18(self):
        request = [{'ok': {'value': {'int': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.int', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_19(self):
        request = [{'ok': {'value': {'int': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.int', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_20(self):
        request = [{'ok': {'value': {'int': {}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.int', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_21(self):
        request = [{'ok': {'value': {'nullInt': None}}}, {'fn.test': {'value': {'nullInt': None}}}]
        expected_response = [{}, {'ok': {'value': {'nullInt': None}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_22(self):
        request = [{'ok': {'value': {'nullInt': 0}}}, {'fn.test': {'value': {'nullInt': 0}}}]
        expected_response = [{}, {'ok': {'value': {'nullInt': 0}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_23(self):
        request = [{'ok': {'value': {'nullInt': -1}}}, {'fn.test': {'value': {'nullInt': -1}}}]
        expected_response = [{}, {'ok': {'value': {'nullInt': -1}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_24(self):
        request = [{'ok': {'value': {'nullInt': 1}}}, {'fn.test': {'value': {'nullInt': 1}}}]
        expected_response = [{}, {'ok': {'value': {'nullInt': 1}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_25(self):
        request = [{'ok': {'value': {'nullInt': 9223372036854775807}}}, {'fn.test': {'value': {'nullInt': 9223372036854775807}}}]
        expected_response = [{}, {'ok': {'value': {'nullInt': 9223372036854775807}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_26(self):
        request = [{'ok': {'value': {'nullInt': -9223372036854775808}}}, {'fn.test': {'value': {'nullInt': -9223372036854775808}}}]
        expected_response = [{}, {'ok': {'value': {'nullInt': -9223372036854775808}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_27(self):
        request = [{}, {'fn.test': {'value': {'nullInt': 9223372036854775808}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullInt', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_28(self):
        request = [{}, {'fn.test': {'value': {'nullInt': -9223372036854775809}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullInt', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_29(self):
        request = [{}, {'fn.test': {'value': {'nullInt': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullInt', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_30(self):
        request = [{}, {'fn.test': {'value': {'nullInt': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullInt', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_31(self):
        request = [{}, {'fn.test': {'value': {'nullInt': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullInt', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_32(self):
        request = [{}, {'fn.test': {'value': {'nullInt': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullInt', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_33(self):
        request = [{}, {'fn.test': {'value': {'nullInt': {}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullInt', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_34(self):
        request = [{'ok': {'value': {'nullInt': 9223372036854775808}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullInt', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_35(self):
        request = [{'ok': {'value': {'nullInt': -9223372036854775809}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullInt', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_36(self):
        request = [{'ok': {'value': {'nullInt': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullInt', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_37(self):
        request = [{'ok': {'value': {'nullInt': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullInt', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_38(self):
        request = [{'ok': {'value': {'nullInt': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullInt', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_39(self):
        request = [{'ok': {'value': {'nullInt': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullInt', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_40(self):
        request = [{'ok': {'value': {'nullInt': {}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullInt', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_41(self):
        request = [{'ok': {'value': {'arrInt': []}}}, {'fn.test': {'value': {'arrInt': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrInt': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_42(self):
        request = [{'ok': {'value': {'arrInt': [0]}}}, {'fn.test': {'value': {'arrInt': [0]}}}]
        expected_response = [{}, {'ok': {'value': {'arrInt': [0]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_43(self):
        request = [{'ok': {'value': {'arrInt': [-1]}}}, {'fn.test': {'value': {'arrInt': [-1]}}}]
        expected_response = [{}, {'ok': {'value': {'arrInt': [-1]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_44(self):
        request = [{'ok': {'value': {'arrInt': [1]}}}, {'fn.test': {'value': {'arrInt': [1]}}}]
        expected_response = [{}, {'ok': {'value': {'arrInt': [1]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_45(self):
        request = [{'ok': {'value': {'arrInt': [9223372036854775807]}}}, {'fn.test': {'value': {'arrInt': [9223372036854775807]}}}]
        expected_response = [{}, {'ok': {'value': {'arrInt': [9223372036854775807]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_46(self):
        request = [{'ok': {'value': {'arrInt': [-9223372036854775808]}}}, {'fn.test': {'value': {'arrInt': [-9223372036854775808]}}}]
        expected_response = [{}, {'ok': {'value': {'arrInt': [-9223372036854775808]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_47(self):
        request = [{'ok': {'value': {'arrInt': [0, -1, 1, 9223372036854775807, -9223372036854775808]}}}, {'fn.test': {'value': {'arrInt': [0, -1, 1, 9223372036854775807, -9223372036854775808]}}}]
        expected_response = [{}, {'ok': {'value': {'arrInt': [0, -1, 1, 9223372036854775807, -9223372036854775808]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_48(self):
        request = [{}, {'fn.test': {'value': {'arrInt': [0, 9223372036854775808]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrInt[1]', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_49(self):
        request = [{}, {'fn.test': {'value': {'arrInt': [0, -9223372036854775809]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrInt[1]', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_50(self):
        request = [{}, {'fn.test': {'value': {'arrInt': [0, None]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrInt[1]', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_51(self):
        request = [{}, {'fn.test': {'value': {'arrInt': [0, False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrInt[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_52(self):
        request = [{}, {'fn.test': {'value': {'arrInt': [0, 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrInt[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_53(self):
        request = [{}, {'fn.test': {'value': {'arrInt': [0, '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrInt[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_54(self):
        request = [{}, {'fn.test': {'value': {'arrInt': [0, []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrInt[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_55(self):
        request = [{}, {'fn.test': {'value': {'arrInt': [0, {}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrInt[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_56(self):
        request = [{'ok': {'value': {'arrInt': [0, 9223372036854775808]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrInt[1]', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_57(self):
        request = [{'ok': {'value': {'arrInt': [0, -9223372036854775809]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrInt[1]', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_58(self):
        request = [{'ok': {'value': {'arrInt': [0, None]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrInt[1]', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_59(self):
        request = [{'ok': {'value': {'arrInt': [0, False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrInt[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_60(self):
        request = [{'ok': {'value': {'arrInt': [0, 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrInt[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_61(self):
        request = [{'ok': {'value': {'arrInt': [0, '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrInt[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_62(self):
        request = [{'ok': {'value': {'arrInt': [0, []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrInt[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_63(self):
        request = [{'ok': {'value': {'arrInt': [0, {}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrInt[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_64(self):
        request = [{'ok': {'value': {'arrNullInt': []}}}, {'fn.test': {'value': {'arrNullInt': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullInt': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_65(self):
        request = [{'ok': {'value': {'arrNullInt': [None]}}}, {'fn.test': {'value': {'arrNullInt': [None]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullInt': [None]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_66(self):
        request = [{'ok': {'value': {'arrNullInt': [0]}}}, {'fn.test': {'value': {'arrNullInt': [0]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullInt': [0]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_67(self):
        request = [{'ok': {'value': {'arrNullInt': [-1]}}}, {'fn.test': {'value': {'arrNullInt': [-1]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullInt': [-1]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_68(self):
        request = [{'ok': {'value': {'arrNullInt': [1]}}}, {'fn.test': {'value': {'arrNullInt': [1]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullInt': [1]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_69(self):
        request = [{'ok': {'value': {'arrNullInt': [9223372036854775807]}}}, {'fn.test': {'value': {'arrNullInt': [9223372036854775807]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullInt': [9223372036854775807]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_70(self):
        request = [{'ok': {'value': {'arrNullInt': [-9223372036854775808]}}}, {'fn.test': {'value': {'arrNullInt': [-9223372036854775808]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullInt': [-9223372036854775808]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_71(self):
        request = [{'ok': {'value': {'arrNullInt': [None, 0, -1, 1, 9223372036854775807, -9223372036854775808]}}}, {'fn.test': {'value': {'arrNullInt': [None, 0, -1, 1, 9223372036854775807, -9223372036854775808]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullInt': [None, 0, -1, 1, 9223372036854775807, -9223372036854775808]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_72(self):
        request = [{}, {'fn.test': {'value': {'arrNullInt': [0, 9223372036854775808]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullInt[1]', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_73(self):
        request = [{}, {'fn.test': {'value': {'arrNullInt': [0, -9223372036854775809]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullInt[1]', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_74(self):
        request = [{}, {'fn.test': {'value': {'arrNullInt': [0, False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullInt[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_75(self):
        request = [{}, {'fn.test': {'value': {'arrNullInt': [0, 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullInt[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_76(self):
        request = [{}, {'fn.test': {'value': {'arrNullInt': [0, '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullInt[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_77(self):
        request = [{}, {'fn.test': {'value': {'arrNullInt': [0, []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullInt[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_78(self):
        request = [{}, {'fn.test': {'value': {'arrNullInt': [0, {}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullInt[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_79(self):
        request = [{'ok': {'value': {'arrNullInt': [0, 9223372036854775808]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullInt[1]', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_80(self):
        request = [{'ok': {'value': {'arrNullInt': [0, -9223372036854775809]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullInt[1]', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_81(self):
        request = [{'ok': {'value': {'arrNullInt': [0, False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullInt[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_82(self):
        request = [{'ok': {'value': {'arrNullInt': [0, 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullInt[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_83(self):
        request = [{'ok': {'value': {'arrNullInt': [0, '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullInt[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_84(self):
        request = [{'ok': {'value': {'arrNullInt': [0, []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullInt[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_85(self):
        request = [{'ok': {'value': {'arrNullInt': [0, {}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullInt[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_86(self):
        request = [{'ok': {'value': {'objInt': {}}}}, {'fn.test': {'value': {'objInt': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objInt': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_87(self):
        request = [{'ok': {'value': {'objInt': {'a': 0}}}}, {'fn.test': {'value': {'objInt': {'a': 0}}}}]
        expected_response = [{}, {'ok': {'value': {'objInt': {'a': 0}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_88(self):
        request = [{'ok': {'value': {'objInt': {'a': -1}}}}, {'fn.test': {'value': {'objInt': {'a': -1}}}}]
        expected_response = [{}, {'ok': {'value': {'objInt': {'a': -1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_89(self):
        request = [{'ok': {'value': {'objInt': {'a': 1}}}}, {'fn.test': {'value': {'objInt': {'a': 1}}}}]
        expected_response = [{}, {'ok': {'value': {'objInt': {'a': 1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_90(self):
        request = [{'ok': {'value': {'objInt': {'a': 9223372036854775807}}}}, {'fn.test': {'value': {'objInt': {'a': 9223372036854775807}}}}]
        expected_response = [{}, {'ok': {'value': {'objInt': {'a': 9223372036854775807}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_91(self):
        request = [{'ok': {'value': {'objInt': {'a': -9223372036854775808}}}}, {'fn.test': {'value': {'objInt': {'a': -9223372036854775808}}}}]
        expected_response = [{}, {'ok': {'value': {'objInt': {'a': -9223372036854775808}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_92(self):
        request = [{'ok': {'value': {'objInt': {'a': 0, 'b': -1, 'c': 1, 'd': 9223372036854775807, 'e': -9223372036854775808}}}}, {'fn.test': {'value': {'objInt': {'a': 0, 'b': -1, 'c': 1, 'd': 9223372036854775807, 'e': -9223372036854775808}}}}]
        expected_response = [{}, {'ok': {'value': {'objInt': {'a': 0, 'b': -1, 'c': 1, 'd': 9223372036854775807, 'e': -9223372036854775808}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_93(self):
        request = [{}, {'fn.test': {'value': {'objInt': {'a': 0, 'b': 9223372036854775808}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objInt{b}', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_94(self):
        request = [{}, {'fn.test': {'value': {'objInt': {'a': 0, 'b': -9223372036854775809}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objInt{b}', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_95(self):
        request = [{}, {'fn.test': {'value': {'objInt': {'a': 0, 'b': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objInt{b}', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_96(self):
        request = [{}, {'fn.test': {'value': {'objInt': {'a': 0, 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objInt{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_97(self):
        request = [{}, {'fn.test': {'value': {'objInt': {'a': 0, 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objInt{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_98(self):
        request = [{}, {'fn.test': {'value': {'objInt': {'a': 0, 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objInt{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_99(self):
        request = [{}, {'fn.test': {'value': {'objInt': {'a': 0, 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objInt{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_100(self):
        request = [{}, {'fn.test': {'value': {'objInt': {'a': 0, 'b': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objInt{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_101(self):
        request = [{'ok': {'value': {'objInt': {'a': 0, 'b': 9223372036854775808}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objInt{b}', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_102(self):
        request = [{'ok': {'value': {'objInt': {'a': 0, 'b': -9223372036854775809}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objInt{b}', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_103(self):
        request = [{'ok': {'value': {'objInt': {'a': 0, 'b': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objInt{b}', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_104(self):
        request = [{'ok': {'value': {'objInt': {'a': 0, 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objInt{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_105(self):
        request = [{'ok': {'value': {'objInt': {'a': 0, 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objInt{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_106(self):
        request = [{'ok': {'value': {'objInt': {'a': 0, 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objInt{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_107(self):
        request = [{'ok': {'value': {'objInt': {'a': 0, 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objInt{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_108(self):
        request = [{'ok': {'value': {'objInt': {'a': 0, 'b': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objInt{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_109(self):
        request = [{'ok': {'value': {'objNullInt': {}}}}, {'fn.test': {'value': {'objNullInt': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullInt': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_110(self):
        request = [{'ok': {'value': {'objNullInt': {'a': None}}}}, {'fn.test': {'value': {'objNullInt': {'a': None}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullInt': {'a': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_111(self):
        request = [{'ok': {'value': {'objNullInt': {'a': 0}}}}, {'fn.test': {'value': {'objNullInt': {'a': 0}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullInt': {'a': 0}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_112(self):
        request = [{'ok': {'value': {'objNullInt': {'a': -1}}}}, {'fn.test': {'value': {'objNullInt': {'a': -1}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullInt': {'a': -1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_113(self):
        request = [{'ok': {'value': {'objNullInt': {'a': 1}}}}, {'fn.test': {'value': {'objNullInt': {'a': 1}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullInt': {'a': 1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_114(self):
        request = [{'ok': {'value': {'objNullInt': {'a': 9223372036854775807}}}}, {'fn.test': {'value': {'objNullInt': {'a': 9223372036854775807}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullInt': {'a': 9223372036854775807}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_115(self):
        request = [{'ok': {'value': {'objNullInt': {'a': -9223372036854775808}}}}, {'fn.test': {'value': {'objNullInt': {'a': -9223372036854775808}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullInt': {'a': -9223372036854775808}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_116(self):
        request = [{'ok': {'value': {'objNullInt': {'a': None, 'b': 0, 'c': -1, 'd': 1, 'e': 9223372036854775807, 'f': -9223372036854775808}}}}, {'fn.test': {'value': {'objNullInt': {'a': None, 'b': 0, 'c': -1, 'd': 1, 'e': 9223372036854775807, 'f': -9223372036854775808}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullInt': {'a': None, 'b': 0, 'c': -1, 'd': 1, 'e': 9223372036854775807, 'f': -9223372036854775808}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_117(self):
        request = [{}, {'fn.test': {'value': {'objNullInt': {'a': 0, 'b': 9223372036854775808}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullInt{b}', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_118(self):
        request = [{}, {'fn.test': {'value': {'objNullInt': {'a': 0, 'b': -9223372036854775809}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullInt{b}', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_119(self):
        request = [{}, {'fn.test': {'value': {'objNullInt': {'a': 0, 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullInt{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_120(self):
        request = [{}, {'fn.test': {'value': {'objNullInt': {'a': 0, 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullInt{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_121(self):
        request = [{}, {'fn.test': {'value': {'objNullInt': {'a': 0, 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullInt{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_122(self):
        request = [{}, {'fn.test': {'value': {'objNullInt': {'a': 0, 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullInt{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_123(self):
        request = [{}, {'fn.test': {'value': {'objNullInt': {'a': 0, 'b': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullInt{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_124(self):
        request = [{'ok': {'value': {'objNullInt': {'a': 0, 'b': 9223372036854775808}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullInt{b}', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_125(self):
        request = [{'ok': {'value': {'objNullInt': {'a': 0, 'b': -9223372036854775809}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullInt{b}', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_126(self):
        request = [{'ok': {'value': {'objNullInt': {'a': 0, 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullInt{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_127(self):
        request = [{'ok': {'value': {'objNullInt': {'a': 0, 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullInt{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_128(self):
        request = [{'ok': {'value': {'objNullInt': {'a': 0, 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullInt{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_129(self):
        request = [{'ok': {'value': {'objNullInt': {'a': 0, 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullInt{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_130(self):
        request = [{'ok': {'value': {'objNullInt': {'a': 0, 'b': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullInt{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_131(self):
        request = [{'ok': {'value': {'pStrInt': {'wrap': 0}}}}, {'fn.test': {'value': {'pStrInt': {'wrap': 0}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrInt': {'wrap': 0}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_132(self):
        request = [{'ok': {'value': {'pStrInt': {'wrap': -1}}}}, {'fn.test': {'value': {'pStrInt': {'wrap': -1}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrInt': {'wrap': -1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_133(self):
        request = [{'ok': {'value': {'pStrInt': {'wrap': 1}}}}, {'fn.test': {'value': {'pStrInt': {'wrap': 1}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrInt': {'wrap': 1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_134(self):
        request = [{'ok': {'value': {'pStrInt': {'wrap': 9223372036854775807}}}}, {'fn.test': {'value': {'pStrInt': {'wrap': 9223372036854775807}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrInt': {'wrap': 9223372036854775807}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_135(self):
        request = [{'ok': {'value': {'pStrInt': {'wrap': -9223372036854775808}}}}, {'fn.test': {'value': {'pStrInt': {'wrap': -9223372036854775808}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrInt': {'wrap': -9223372036854775808}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_136(self):
        request = [{}, {'fn.test': {'value': {'pStrInt': {'wrap': 9223372036854775808}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrInt.wrap', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_137(self):
        request = [{}, {'fn.test': {'value': {'pStrInt': {'wrap': -9223372036854775809}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrInt.wrap', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_138(self):
        request = [{}, {'fn.test': {'value': {'pStrInt': {'wrap': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_139(self):
        request = [{}, {'fn.test': {'value': {'pStrInt': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_140(self):
        request = [{}, {'fn.test': {'value': {'pStrInt': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_141(self):
        request = [{}, {'fn.test': {'value': {'pStrInt': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_142(self):
        request = [{}, {'fn.test': {'value': {'pStrInt': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_143(self):
        request = [{}, {'fn.test': {'value': {'pStrInt': {'wrap': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_144(self):
        request = [{'ok': {'value': {'pStrInt': {'wrap': 9223372036854775808}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrInt.wrap', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_145(self):
        request = [{'ok': {'value': {'pStrInt': {'wrap': -9223372036854775809}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrInt.wrap', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_146(self):
        request = [{'ok': {'value': {'pStrInt': {'wrap': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_147(self):
        request = [{'ok': {'value': {'pStrInt': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_148(self):
        request = [{'ok': {'value': {'pStrInt': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_149(self):
        request = [{'ok': {'value': {'pStrInt': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_150(self):
        request = [{'ok': {'value': {'pStrInt': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_151(self):
        request = [{'ok': {'value': {'pStrInt': {'wrap': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_152(self):
        request = [{'ok': {'value': {'pStrNullInt': {'wrap': None}}}}, {'fn.test': {'value': {'pStrNullInt': {'wrap': None}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullInt': {'wrap': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_153(self):
        request = [{'ok': {'value': {'pStrNullInt': {'wrap': 0}}}}, {'fn.test': {'value': {'pStrNullInt': {'wrap': 0}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullInt': {'wrap': 0}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_154(self):
        request = [{'ok': {'value': {'pStrNullInt': {'wrap': -1}}}}, {'fn.test': {'value': {'pStrNullInt': {'wrap': -1}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullInt': {'wrap': -1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_155(self):
        request = [{'ok': {'value': {'pStrNullInt': {'wrap': 1}}}}, {'fn.test': {'value': {'pStrNullInt': {'wrap': 1}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullInt': {'wrap': 1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_156(self):
        request = [{'ok': {'value': {'pStrNullInt': {'wrap': 9223372036854775807}}}}, {'fn.test': {'value': {'pStrNullInt': {'wrap': 9223372036854775807}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullInt': {'wrap': 9223372036854775807}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_157(self):
        request = [{'ok': {'value': {'pStrNullInt': {'wrap': -9223372036854775808}}}}, {'fn.test': {'value': {'pStrNullInt': {'wrap': -9223372036854775808}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullInt': {'wrap': -9223372036854775808}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_158(self):
        request = [{}, {'fn.test': {'value': {'pStrNullInt': {'wrap': 9223372036854775808}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullInt.wrap', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_159(self):
        request = [{}, {'fn.test': {'value': {'pStrNullInt': {'wrap': -9223372036854775809}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullInt.wrap', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_160(self):
        request = [{}, {'fn.test': {'value': {'pStrNullInt': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_161(self):
        request = [{}, {'fn.test': {'value': {'pStrNullInt': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_162(self):
        request = [{}, {'fn.test': {'value': {'pStrNullInt': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_163(self):
        request = [{}, {'fn.test': {'value': {'pStrNullInt': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_164(self):
        request = [{}, {'fn.test': {'value': {'pStrNullInt': {'wrap': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_165(self):
        request = [{'ok': {'value': {'pStrNullInt': {'wrap': 9223372036854775808}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullInt.wrap', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_166(self):
        request = [{'ok': {'value': {'pStrNullInt': {'wrap': -9223372036854775809}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullInt.wrap', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_167(self):
        request = [{'ok': {'value': {'pStrNullInt': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_168(self):
        request = [{'ok': {'value': {'pStrNullInt': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_169(self):
        request = [{'ok': {'value': {'pStrNullInt': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_170(self):
        request = [{'ok': {'value': {'pStrNullInt': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_171(self):
        request = [{'ok': {'value': {'pStrNullInt': {'wrap': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_172(self):
        request = [{'ok': {'value': {'pEnumInt': {'one': {}}}}}, {'fn.test': {'value': {'pEnumInt': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumInt': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_173(self):
        request = [{'ok': {'value': {'pEnumInt': {'two': {'ewrap': 0}}}}}, {'fn.test': {'value': {'pEnumInt': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumInt': {'two': {'ewrap': 0}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_174(self):
        request = [{'ok': {'value': {'pEnumInt': {'two': {'ewrap': -1}}}}}, {'fn.test': {'value': {'pEnumInt': {'two': {'ewrap': -1}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumInt': {'two': {'ewrap': -1}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_175(self):
        request = [{'ok': {'value': {'pEnumInt': {'two': {'ewrap': 1}}}}}, {'fn.test': {'value': {'pEnumInt': {'two': {'ewrap': 1}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumInt': {'two': {'ewrap': 1}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_176(self):
        request = [{'ok': {'value': {'pEnumInt': {'two': {'ewrap': 9223372036854775807}}}}}, {'fn.test': {'value': {'pEnumInt': {'two': {'ewrap': 9223372036854775807}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumInt': {'two': {'ewrap': 9223372036854775807}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_177(self):
        request = [{'ok': {'value': {'pEnumInt': {'two': {'ewrap': -9223372036854775808}}}}}, {'fn.test': {'value': {'pEnumInt': {'two': {'ewrap': -9223372036854775808}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumInt': {'two': {'ewrap': -9223372036854775808}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_178(self):
        request = [{}, {'fn.test': {'value': {'pEnumInt': {'two': {'ewrap': 9223372036854775808}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumInt.two.ewrap', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_179(self):
        request = [{}, {'fn.test': {'value': {'pEnumInt': {'two': {'ewrap': -9223372036854775809}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumInt.two.ewrap', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_180(self):
        request = [{}, {'fn.test': {'value': {'pEnumInt': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_181(self):
        request = [{}, {'fn.test': {'value': {'pEnumInt': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_182(self):
        request = [{}, {'fn.test': {'value': {'pEnumInt': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_183(self):
        request = [{}, {'fn.test': {'value': {'pEnumInt': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_184(self):
        request = [{}, {'fn.test': {'value': {'pEnumInt': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_185(self):
        request = [{}, {'fn.test': {'value': {'pEnumInt': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_186(self):
        request = [{'ok': {'value': {'pEnumInt': {'two': {'ewrap': 9223372036854775808}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumInt.two.ewrap', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_187(self):
        request = [{'ok': {'value': {'pEnumInt': {'two': {'ewrap': -9223372036854775809}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumInt.two.ewrap', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_188(self):
        request = [{'ok': {'value': {'pEnumInt': {'two': {'ewrap': None}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_189(self):
        request = [{'ok': {'value': {'pEnumInt': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_190(self):
        request = [{'ok': {'value': {'pEnumInt': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_191(self):
        request = [{'ok': {'value': {'pEnumInt': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_192(self):
        request = [{'ok': {'value': {'pEnumInt': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_193(self):
        request = [{'ok': {'value': {'pEnumInt': {'two': {'ewrap': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_194(self):
        request = [{'ok': {'value': {'pEnumNullInt': {'one': {}}}}}, {'fn.test': {'value': {'pEnumNullInt': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullInt': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_195(self):
        request = [{'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': None}}}}}, {'fn.test': {'value': {'pEnumNullInt': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': None}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_196(self):
        request = [{'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': 0}}}}}, {'fn.test': {'value': {'pEnumNullInt': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': 0}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_197(self):
        request = [{'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': -1}}}}}, {'fn.test': {'value': {'pEnumNullInt': {'two': {'ewrap': -1}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': -1}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_198(self):
        request = [{'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': 1}}}}}, {'fn.test': {'value': {'pEnumNullInt': {'two': {'ewrap': 1}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': 1}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_199(self):
        request = [{'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': 9223372036854775807}}}}}, {'fn.test': {'value': {'pEnumNullInt': {'two': {'ewrap': 9223372036854775807}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': 9223372036854775807}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_200(self):
        request = [{'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': -9223372036854775808}}}}}, {'fn.test': {'value': {'pEnumNullInt': {'two': {'ewrap': -9223372036854775808}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': -9223372036854775808}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_201(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullInt': {'two': {'ewrap': 9223372036854775808}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullInt.two.ewrap', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_202(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullInt': {'two': {'ewrap': -9223372036854775809}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullInt.two.ewrap', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_203(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullInt': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_204(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullInt': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_205(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullInt': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_206(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullInt': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_207(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullInt': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_208(self):
        request = [{'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': 9223372036854775808}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullInt.two.ewrap', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_209(self):
        request = [{'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': -9223372036854775809}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullInt.two.ewrap', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_210(self):
        request = [{'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_211(self):
        request = [{'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_212(self):
        request = [{'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_213(self):
        request = [{'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_integer_214(self):
        request = [{'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_0(self):
        request = [{'ok': {'value': {'num': 0}}}, {'fn.test': {'value': {'num': 0}}}]
        expected_response = [{}, {'ok': {'value': {'num': 0}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_1(self):
        request = [{'ok': {'value': {'num': -1}}}, {'fn.test': {'value': {'num': -1}}}]
        expected_response = [{}, {'ok': {'value': {'num': -1}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_2(self):
        request = [{'ok': {'value': {'num': 1}}}, {'fn.test': {'value': {'num': 1}}}]
        expected_response = [{}, {'ok': {'value': {'num': 1}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_3(self):
        request = [{'ok': {'value': {'num': -1.7976931348623157e+308}}}, {'fn.test': {'value': {'num': -1.7976931348623157e+308}}}]
        expected_response = [{}, {'ok': {'value': {'num': -1.7976931348623157e+308}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_4(self):
        request = [{'ok': {'value': {'num': -2.2250738585072014e-308}}}, {'fn.test': {'value': {'num': -2.2250738585072014e-308}}}]
        expected_response = [{}, {'ok': {'value': {'num': -2.2250738585072014e-308}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_5(self):
        request = [{'ok': {'value': {'num': 2.2250738585072014e-308}}}, {'fn.test': {'value': {'num': 2.2250738585072014e-308}}}]
        expected_response = [{}, {'ok': {'value': {'num': 2.2250738585072014e-308}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_6(self):
        request = [{'ok': {'value': {'num': 1.7976931348623157e+308}}}, {'fn.test': {'value': {'num': 1.7976931348623157e+308}}}]
        expected_response = [{}, {'ok': {'value': {'num': 1.7976931348623157e+308}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_7(self):
        request = [{'ok': {'value': {'num': -0.1}}}, {'fn.test': {'value': {'num': -0.1}}}]
        expected_response = [{}, {'ok': {'value': {'num': -0.1}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_8(self):
        request = [{'ok': {'value': {'num': 0.1}}}, {'fn.test': {'value': {'num': 0.1}}}]
        expected_response = [{}, {'ok': {'value': {'num': 0.1}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_9(self):
        request = [{}, {'fn.test': {'value': {'num': None}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.num', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_10(self):
        request = [{}, {'fn.test': {'value': {'num': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.num', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_11(self):
        request = [{}, {'fn.test': {'value': {'num': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.num', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_12(self):
        request = [{}, {'fn.test': {'value': {'num': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.num', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_13(self):
        request = [{}, {'fn.test': {'value': {'num': {}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.num', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_14(self):
        request = [{'ok': {'value': {'num': None}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.num', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_15(self):
        request = [{'ok': {'value': {'num': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.num', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_16(self):
        request = [{'ok': {'value': {'num': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.num', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_17(self):
        request = [{'ok': {'value': {'num': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.num', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_18(self):
        request = [{'ok': {'value': {'num': {}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.num', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_19(self):
        request = [{'ok': {'value': {'nullNum': None}}}, {'fn.test': {'value': {'nullNum': None}}}]
        expected_response = [{}, {'ok': {'value': {'nullNum': None}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_20(self):
        request = [{'ok': {'value': {'nullNum': 0}}}, {'fn.test': {'value': {'nullNum': 0}}}]
        expected_response = [{}, {'ok': {'value': {'nullNum': 0}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_21(self):
        request = [{'ok': {'value': {'nullNum': -1}}}, {'fn.test': {'value': {'nullNum': -1}}}]
        expected_response = [{}, {'ok': {'value': {'nullNum': -1}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_22(self):
        request = [{'ok': {'value': {'nullNum': 1}}}, {'fn.test': {'value': {'nullNum': 1}}}]
        expected_response = [{}, {'ok': {'value': {'nullNum': 1}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_23(self):
        request = [{'ok': {'value': {'nullNum': -1.7976931348623157e+308}}}, {'fn.test': {'value': {'nullNum': -1.7976931348623157e+308}}}]
        expected_response = [{}, {'ok': {'value': {'nullNum': -1.7976931348623157e+308}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_24(self):
        request = [{'ok': {'value': {'nullNum': -2.2250738585072014e-308}}}, {'fn.test': {'value': {'nullNum': -2.2250738585072014e-308}}}]
        expected_response = [{}, {'ok': {'value': {'nullNum': -2.2250738585072014e-308}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_25(self):
        request = [{'ok': {'value': {'nullNum': 2.2250738585072014e-308}}}, {'fn.test': {'value': {'nullNum': 2.2250738585072014e-308}}}]
        expected_response = [{}, {'ok': {'value': {'nullNum': 2.2250738585072014e-308}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_26(self):
        request = [{'ok': {'value': {'nullNum': 1.7976931348623157e+308}}}, {'fn.test': {'value': {'nullNum': 1.7976931348623157e+308}}}]
        expected_response = [{}, {'ok': {'value': {'nullNum': 1.7976931348623157e+308}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_27(self):
        request = [{'ok': {'value': {'nullNum': -0.1}}}, {'fn.test': {'value': {'nullNum': -0.1}}}]
        expected_response = [{}, {'ok': {'value': {'nullNum': -0.1}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_28(self):
        request = [{'ok': {'value': {'nullNum': 0.1}}}, {'fn.test': {'value': {'nullNum': 0.1}}}]
        expected_response = [{}, {'ok': {'value': {'nullNum': 0.1}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_29(self):
        request = [{}, {'fn.test': {'value': {'nullNum': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullNum', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_30(self):
        request = [{}, {'fn.test': {'value': {'nullNum': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullNum', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_31(self):
        request = [{}, {'fn.test': {'value': {'nullNum': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullNum', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_32(self):
        request = [{}, {'fn.test': {'value': {'nullNum': {}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullNum', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_33(self):
        request = [{'ok': {'value': {'nullNum': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullNum', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_34(self):
        request = [{'ok': {'value': {'nullNum': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullNum', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_35(self):
        request = [{'ok': {'value': {'nullNum': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullNum', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_36(self):
        request = [{'ok': {'value': {'nullNum': {}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullNum', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_37(self):
        request = [{'ok': {'value': {'arrNum': []}}}, {'fn.test': {'value': {'arrNum': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrNum': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_38(self):
        request = [{'ok': {'value': {'arrNum': [0]}}}, {'fn.test': {'value': {'arrNum': [0]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNum': [0]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_39(self):
        request = [{'ok': {'value': {'arrNum': [-1]}}}, {'fn.test': {'value': {'arrNum': [-1]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNum': [-1]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_40(self):
        request = [{'ok': {'value': {'arrNum': [1]}}}, {'fn.test': {'value': {'arrNum': [1]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNum': [1]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_41(self):
        request = [{'ok': {'value': {'arrNum': [-1.7976931348623157e+308]}}}, {'fn.test': {'value': {'arrNum': [-1.7976931348623157e+308]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNum': [-1.7976931348623157e+308]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_42(self):
        request = [{'ok': {'value': {'arrNum': [-2.2250738585072014e-308]}}}, {'fn.test': {'value': {'arrNum': [-2.2250738585072014e-308]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNum': [-2.2250738585072014e-308]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_43(self):
        request = [{'ok': {'value': {'arrNum': [2.2250738585072014e-308]}}}, {'fn.test': {'value': {'arrNum': [2.2250738585072014e-308]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNum': [2.2250738585072014e-308]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_44(self):
        request = [{'ok': {'value': {'arrNum': [1.7976931348623157e+308]}}}, {'fn.test': {'value': {'arrNum': [1.7976931348623157e+308]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNum': [1.7976931348623157e+308]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_45(self):
        request = [{'ok': {'value': {'arrNum': [-0.1]}}}, {'fn.test': {'value': {'arrNum': [-0.1]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNum': [-0.1]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_46(self):
        request = [{'ok': {'value': {'arrNum': [0.1]}}}, {'fn.test': {'value': {'arrNum': [0.1]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNum': [0.1]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_47(self):
        request = [{'ok': {'value': {'arrNum': [0, -1, 1, -1.7976931348623157e+308, -2.2250738585072014e-308, 2.2250738585072014e-308, 1.7976931348623157e+308, -0.1, 0.1]}}}, {'fn.test': {'value': {'arrNum': [0, -1, 1, -1.7976931348623157e+308, -2.2250738585072014e-308, 2.2250738585072014e-308, 1.7976931348623157e+308, -0.1, 0.1]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNum': [0, -1, 1, -1.7976931348623157e+308, -2.2250738585072014e-308, 2.2250738585072014e-308, 1.7976931348623157e+308, -0.1, 0.1]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_48(self):
        request = [{}, {'fn.test': {'value': {'arrNum': [0, None]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNum[1]', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_49(self):
        request = [{}, {'fn.test': {'value': {'arrNum': [0, False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNum[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_50(self):
        request = [{}, {'fn.test': {'value': {'arrNum': [0, '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNum[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_51(self):
        request = [{}, {'fn.test': {'value': {'arrNum': [0, []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNum[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_52(self):
        request = [{}, {'fn.test': {'value': {'arrNum': [0, {}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNum[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_53(self):
        request = [{'ok': {'value': {'arrNum': [0, None]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNum[1]', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_54(self):
        request = [{'ok': {'value': {'arrNum': [0, False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNum[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_55(self):
        request = [{'ok': {'value': {'arrNum': [0, '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNum[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_56(self):
        request = [{'ok': {'value': {'arrNum': [0, []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNum[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_57(self):
        request = [{'ok': {'value': {'arrNum': [0, {}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNum[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_58(self):
        request = [{'ok': {'value': {'arrNullNum': []}}}, {'fn.test': {'value': {'arrNullNum': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullNum': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_59(self):
        request = [{'ok': {'value': {'arrNullNum': [None]}}}, {'fn.test': {'value': {'arrNullNum': [None]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullNum': [None]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_60(self):
        request = [{'ok': {'value': {'arrNullNum': [0]}}}, {'fn.test': {'value': {'arrNullNum': [0]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullNum': [0]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_61(self):
        request = [{'ok': {'value': {'arrNullNum': [-1]}}}, {'fn.test': {'value': {'arrNullNum': [-1]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullNum': [-1]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_62(self):
        request = [{'ok': {'value': {'arrNullNum': [1]}}}, {'fn.test': {'value': {'arrNullNum': [1]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullNum': [1]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_63(self):
        request = [{'ok': {'value': {'arrNullNum': [-1.7976931348623157e+308]}}}, {'fn.test': {'value': {'arrNullNum': [-1.7976931348623157e+308]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullNum': [-1.7976931348623157e+308]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_64(self):
        request = [{'ok': {'value': {'arrNullNum': [-2.2250738585072014e-308]}}}, {'fn.test': {'value': {'arrNullNum': [-2.2250738585072014e-308]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullNum': [-2.2250738585072014e-308]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_65(self):
        request = [{'ok': {'value': {'arrNullNum': [2.2250738585072014e-308]}}}, {'fn.test': {'value': {'arrNullNum': [2.2250738585072014e-308]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullNum': [2.2250738585072014e-308]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_66(self):
        request = [{'ok': {'value': {'arrNullNum': [1.7976931348623157e+308]}}}, {'fn.test': {'value': {'arrNullNum': [1.7976931348623157e+308]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullNum': [1.7976931348623157e+308]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_67(self):
        request = [{'ok': {'value': {'arrNullNum': [-0.1]}}}, {'fn.test': {'value': {'arrNullNum': [-0.1]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullNum': [-0.1]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_68(self):
        request = [{'ok': {'value': {'arrNullNum': [0.1]}}}, {'fn.test': {'value': {'arrNullNum': [0.1]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullNum': [0.1]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_69(self):
        request = [{'ok': {'value': {'arrNullNum': [None, 0, -1, 1, -1.7976931348623157e+308, -2.2250738585072014e-308, 2.2250738585072014e-308, 1.7976931348623157e+308, -0.1, 0.1]}}}, {'fn.test': {'value': {'arrNullNum': [None, 0, -1, 1, -1.7976931348623157e+308, -2.2250738585072014e-308, 2.2250738585072014e-308, 1.7976931348623157e+308, -0.1, 0.1]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullNum': [None, 0, -1, 1, -1.7976931348623157e+308, -2.2250738585072014e-308, 2.2250738585072014e-308, 1.7976931348623157e+308, -0.1, 0.1]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_70(self):
        request = [{}, {'fn.test': {'value': {'arrNullNum': [0, False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullNum[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_71(self):
        request = [{}, {'fn.test': {'value': {'arrNullNum': [0, '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullNum[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_72(self):
        request = [{}, {'fn.test': {'value': {'arrNullNum': [0, []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullNum[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_73(self):
        request = [{}, {'fn.test': {'value': {'arrNullNum': [0, {}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullNum[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_74(self):
        request = [{'ok': {'value': {'arrNullNum': [0, False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullNum[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_75(self):
        request = [{'ok': {'value': {'arrNullNum': [0, '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullNum[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_76(self):
        request = [{'ok': {'value': {'arrNullNum': [0, []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullNum[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_77(self):
        request = [{'ok': {'value': {'arrNullNum': [0, {}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullNum[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_78(self):
        request = [{'ok': {'value': {'objNum': {}}}}, {'fn.test': {'value': {'objNum': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objNum': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_79(self):
        request = [{'ok': {'value': {'objNum': {'a': 0}}}}, {'fn.test': {'value': {'objNum': {'a': 0}}}}]
        expected_response = [{}, {'ok': {'value': {'objNum': {'a': 0}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_80(self):
        request = [{'ok': {'value': {'objNum': {'a': -1}}}}, {'fn.test': {'value': {'objNum': {'a': -1}}}}]
        expected_response = [{}, {'ok': {'value': {'objNum': {'a': -1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_81(self):
        request = [{'ok': {'value': {'objNum': {'a': 1}}}}, {'fn.test': {'value': {'objNum': {'a': 1}}}}]
        expected_response = [{}, {'ok': {'value': {'objNum': {'a': 1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_82(self):
        request = [{'ok': {'value': {'objNum': {'a': -1.7976931348623157e+308}}}}, {'fn.test': {'value': {'objNum': {'a': -1.7976931348623157e+308}}}}]
        expected_response = [{}, {'ok': {'value': {'objNum': {'a': -1.7976931348623157e+308}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_83(self):
        request = [{'ok': {'value': {'objNum': {'a': -2.2250738585072014e-308}}}}, {'fn.test': {'value': {'objNum': {'a': -2.2250738585072014e-308}}}}]
        expected_response = [{}, {'ok': {'value': {'objNum': {'a': -2.2250738585072014e-308}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_84(self):
        request = [{'ok': {'value': {'objNum': {'a': 2.2250738585072014e-308}}}}, {'fn.test': {'value': {'objNum': {'a': 2.2250738585072014e-308}}}}]
        expected_response = [{}, {'ok': {'value': {'objNum': {'a': 2.2250738585072014e-308}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_85(self):
        request = [{'ok': {'value': {'objNum': {'a': 1.7976931348623157e+308}}}}, {'fn.test': {'value': {'objNum': {'a': 1.7976931348623157e+308}}}}]
        expected_response = [{}, {'ok': {'value': {'objNum': {'a': 1.7976931348623157e+308}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_86(self):
        request = [{'ok': {'value': {'objNum': {'a': -0.1}}}}, {'fn.test': {'value': {'objNum': {'a': -0.1}}}}]
        expected_response = [{}, {'ok': {'value': {'objNum': {'a': -0.1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_87(self):
        request = [{'ok': {'value': {'objNum': {'a': 0.1}}}}, {'fn.test': {'value': {'objNum': {'a': 0.1}}}}]
        expected_response = [{}, {'ok': {'value': {'objNum': {'a': 0.1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_88(self):
        request = [{'ok': {'value': {'objNum': {'a': 0, 'b': -1, 'c': 1, 'd': -1.7976931348623157e+308, 'e': -2.2250738585072014e-308, 'f': 2.2250738585072014e-308, 'g': 1.7976931348623157e+308, 'h': -0.1, 'i': 0.1}}}}, {'fn.test': {'value': {'objNum': {'a': 0, 'b': -1, 'c': 1, 'd': -1.7976931348623157e+308, 'e': -2.2250738585072014e-308, 'f': 2.2250738585072014e-308, 'g': 1.7976931348623157e+308, 'h': -0.1, 'i': 0.1}}}}]
        expected_response = [{}, {'ok': {'value': {'objNum': {'a': 0, 'b': -1, 'c': 1, 'd': -1.7976931348623157e+308, 'e': -2.2250738585072014e-308, 'f': 2.2250738585072014e-308, 'g': 1.7976931348623157e+308, 'h': -0.1, 'i': 0.1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_89(self):
        request = [{}, {'fn.test': {'value': {'objNum': {'a': 0, 'b': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNum{b}', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_90(self):
        request = [{}, {'fn.test': {'value': {'objNum': {'a': 0, 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNum{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_91(self):
        request = [{}, {'fn.test': {'value': {'objNum': {'a': 0, 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNum{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_92(self):
        request = [{}, {'fn.test': {'value': {'objNum': {'a': 0, 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNum{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_93(self):
        request = [{}, {'fn.test': {'value': {'objNum': {'a': 0, 'b': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNum{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_94(self):
        request = [{'ok': {'value': {'objNum': {'a': 0, 'b': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNum{b}', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_95(self):
        request = [{'ok': {'value': {'objNum': {'a': 0, 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNum{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_96(self):
        request = [{'ok': {'value': {'objNum': {'a': 0, 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNum{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_97(self):
        request = [{'ok': {'value': {'objNum': {'a': 0, 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNum{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_98(self):
        request = [{'ok': {'value': {'objNum': {'a': 0, 'b': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNum{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_99(self):
        request = [{'ok': {'value': {'objNullNum': {}}}}, {'fn.test': {'value': {'objNullNum': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullNum': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_100(self):
        request = [{'ok': {'value': {'objNullNum': {'a': None}}}}, {'fn.test': {'value': {'objNullNum': {'a': None}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullNum': {'a': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_101(self):
        request = [{'ok': {'value': {'objNullNum': {'a': 0}}}}, {'fn.test': {'value': {'objNullNum': {'a': 0}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullNum': {'a': 0}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_102(self):
        request = [{'ok': {'value': {'objNullNum': {'a': -1}}}}, {'fn.test': {'value': {'objNullNum': {'a': -1}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullNum': {'a': -1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_103(self):
        request = [{'ok': {'value': {'objNullNum': {'a': 1}}}}, {'fn.test': {'value': {'objNullNum': {'a': 1}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullNum': {'a': 1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_104(self):
        request = [{'ok': {'value': {'objNullNum': {'a': -1.7976931348623157e+308}}}}, {'fn.test': {'value': {'objNullNum': {'a': -1.7976931348623157e+308}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullNum': {'a': -1.7976931348623157e+308}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_105(self):
        request = [{'ok': {'value': {'objNullNum': {'a': -2.2250738585072014e-308}}}}, {'fn.test': {'value': {'objNullNum': {'a': -2.2250738585072014e-308}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullNum': {'a': -2.2250738585072014e-308}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_106(self):
        request = [{'ok': {'value': {'objNullNum': {'a': 2.2250738585072014e-308}}}}, {'fn.test': {'value': {'objNullNum': {'a': 2.2250738585072014e-308}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullNum': {'a': 2.2250738585072014e-308}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_107(self):
        request = [{'ok': {'value': {'objNullNum': {'a': 1.7976931348623157e+308}}}}, {'fn.test': {'value': {'objNullNum': {'a': 1.7976931348623157e+308}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullNum': {'a': 1.7976931348623157e+308}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_108(self):
        request = [{'ok': {'value': {'objNullNum': {'a': -0.1}}}}, {'fn.test': {'value': {'objNullNum': {'a': -0.1}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullNum': {'a': -0.1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_109(self):
        request = [{'ok': {'value': {'objNullNum': {'a': 0.1}}}}, {'fn.test': {'value': {'objNullNum': {'a': 0.1}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullNum': {'a': 0.1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_110(self):
        request = [{'ok': {'value': {'objNullNum': {'a': None, 'b': 0, 'c': -1, 'd': 1, 'e': -1.7976931348623157e+308, 'f': -2.2250738585072014e-308, 'g': 2.2250738585072014e-308, 'h': 1.7976931348623157e+308, 'i': -0.1, 'j': 0.1}}}}, {'fn.test': {'value': {'objNullNum': {'a': None, 'b': 0, 'c': -1, 'd': 1, 'e': -1.7976931348623157e+308, 'f': -2.2250738585072014e-308, 'g': 2.2250738585072014e-308, 'h': 1.7976931348623157e+308, 'i': -0.1, 'j': 0.1}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullNum': {'a': None, 'b': 0, 'c': -1, 'd': 1, 'e': -1.7976931348623157e+308, 'f': -2.2250738585072014e-308, 'g': 2.2250738585072014e-308, 'h': 1.7976931348623157e+308, 'i': -0.1, 'j': 0.1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_111(self):
        request = [{}, {'fn.test': {'value': {'objNullNum': {'a': 0, 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullNum{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_112(self):
        request = [{}, {'fn.test': {'value': {'objNullNum': {'a': 0, 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullNum{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_113(self):
        request = [{}, {'fn.test': {'value': {'objNullNum': {'a': 0, 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullNum{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_114(self):
        request = [{}, {'fn.test': {'value': {'objNullNum': {'a': 0, 'b': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullNum{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_115(self):
        request = [{'ok': {'value': {'objNullNum': {'a': 0, 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullNum{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_116(self):
        request = [{'ok': {'value': {'objNullNum': {'a': 0, 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullNum{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_117(self):
        request = [{'ok': {'value': {'objNullNum': {'a': 0, 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullNum{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_118(self):
        request = [{'ok': {'value': {'objNullNum': {'a': 0, 'b': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullNum{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_119(self):
        request = [{'ok': {'value': {'pStrNum': {'wrap': 0}}}}, {'fn.test': {'value': {'pStrNum': {'wrap': 0}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNum': {'wrap': 0}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_120(self):
        request = [{'ok': {'value': {'pStrNum': {'wrap': -1}}}}, {'fn.test': {'value': {'pStrNum': {'wrap': -1}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNum': {'wrap': -1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_121(self):
        request = [{'ok': {'value': {'pStrNum': {'wrap': 1}}}}, {'fn.test': {'value': {'pStrNum': {'wrap': 1}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNum': {'wrap': 1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_122(self):
        request = [{'ok': {'value': {'pStrNum': {'wrap': -1.7976931348623157e+308}}}}, {'fn.test': {'value': {'pStrNum': {'wrap': -1.7976931348623157e+308}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNum': {'wrap': -1.7976931348623157e+308}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_123(self):
        request = [{'ok': {'value': {'pStrNum': {'wrap': -2.2250738585072014e-308}}}}, {'fn.test': {'value': {'pStrNum': {'wrap': -2.2250738585072014e-308}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNum': {'wrap': -2.2250738585072014e-308}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_124(self):
        request = [{'ok': {'value': {'pStrNum': {'wrap': 2.2250738585072014e-308}}}}, {'fn.test': {'value': {'pStrNum': {'wrap': 2.2250738585072014e-308}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNum': {'wrap': 2.2250738585072014e-308}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_125(self):
        request = [{'ok': {'value': {'pStrNum': {'wrap': 1.7976931348623157e+308}}}}, {'fn.test': {'value': {'pStrNum': {'wrap': 1.7976931348623157e+308}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNum': {'wrap': 1.7976931348623157e+308}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_126(self):
        request = [{'ok': {'value': {'pStrNum': {'wrap': -0.1}}}}, {'fn.test': {'value': {'pStrNum': {'wrap': -0.1}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNum': {'wrap': -0.1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_127(self):
        request = [{'ok': {'value': {'pStrNum': {'wrap': 0.1}}}}, {'fn.test': {'value': {'pStrNum': {'wrap': 0.1}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNum': {'wrap': 0.1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_128(self):
        request = [{}, {'fn.test': {'value': {'pStrNum': {'wrap': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_129(self):
        request = [{}, {'fn.test': {'value': {'pStrNum': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_130(self):
        request = [{}, {'fn.test': {'value': {'pStrNum': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNum.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_131(self):
        request = [{}, {'fn.test': {'value': {'pStrNum': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_132(self):
        request = [{}, {'fn.test': {'value': {'pStrNum': {'wrap': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_133(self):
        request = [{'ok': {'value': {'pStrNum': {'wrap': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_134(self):
        request = [{'ok': {'value': {'pStrNum': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_135(self):
        request = [{'ok': {'value': {'pStrNum': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNum.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_136(self):
        request = [{'ok': {'value': {'pStrNum': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_137(self):
        request = [{'ok': {'value': {'pStrNum': {'wrap': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_138(self):
        request = [{'ok': {'value': {'pStrNullNum': {'wrap': None}}}}, {'fn.test': {'value': {'pStrNullNum': {'wrap': None}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullNum': {'wrap': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_139(self):
        request = [{'ok': {'value': {'pStrNullNum': {'wrap': 0}}}}, {'fn.test': {'value': {'pStrNullNum': {'wrap': 0}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullNum': {'wrap': 0}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_140(self):
        request = [{'ok': {'value': {'pStrNullNum': {'wrap': -1}}}}, {'fn.test': {'value': {'pStrNullNum': {'wrap': -1}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullNum': {'wrap': -1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_141(self):
        request = [{'ok': {'value': {'pStrNullNum': {'wrap': 1}}}}, {'fn.test': {'value': {'pStrNullNum': {'wrap': 1}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullNum': {'wrap': 1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_142(self):
        request = [{'ok': {'value': {'pStrNullNum': {'wrap': -1.7976931348623157e+308}}}}, {'fn.test': {'value': {'pStrNullNum': {'wrap': -1.7976931348623157e+308}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullNum': {'wrap': -1.7976931348623157e+308}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_143(self):
        request = [{'ok': {'value': {'pStrNullNum': {'wrap': -2.2250738585072014e-308}}}}, {'fn.test': {'value': {'pStrNullNum': {'wrap': -2.2250738585072014e-308}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullNum': {'wrap': -2.2250738585072014e-308}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_144(self):
        request = [{'ok': {'value': {'pStrNullNum': {'wrap': 2.2250738585072014e-308}}}}, {'fn.test': {'value': {'pStrNullNum': {'wrap': 2.2250738585072014e-308}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullNum': {'wrap': 2.2250738585072014e-308}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_145(self):
        request = [{'ok': {'value': {'pStrNullNum': {'wrap': 1.7976931348623157e+308}}}}, {'fn.test': {'value': {'pStrNullNum': {'wrap': 1.7976931348623157e+308}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullNum': {'wrap': 1.7976931348623157e+308}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_146(self):
        request = [{'ok': {'value': {'pStrNullNum': {'wrap': -0.1}}}}, {'fn.test': {'value': {'pStrNullNum': {'wrap': -0.1}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullNum': {'wrap': -0.1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_147(self):
        request = [{'ok': {'value': {'pStrNullNum': {'wrap': 0.1}}}}, {'fn.test': {'value': {'pStrNullNum': {'wrap': 0.1}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullNum': {'wrap': 0.1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_148(self):
        request = [{}, {'fn.test': {'value': {'pStrNullNum': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullNum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_149(self):
        request = [{}, {'fn.test': {'value': {'pStrNullNum': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullNum.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_150(self):
        request = [{}, {'fn.test': {'value': {'pStrNullNum': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullNum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_151(self):
        request = [{}, {'fn.test': {'value': {'pStrNullNum': {'wrap': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullNum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_152(self):
        request = [{'ok': {'value': {'pStrNullNum': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullNum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_153(self):
        request = [{'ok': {'value': {'pStrNullNum': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullNum.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_154(self):
        request = [{'ok': {'value': {'pStrNullNum': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullNum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_155(self):
        request = [{'ok': {'value': {'pStrNullNum': {'wrap': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullNum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_156(self):
        request = [{'ok': {'value': {'pEnumNum': {'one': {}}}}}, {'fn.test': {'value': {'pEnumNum': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNum': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_157(self):
        request = [{'ok': {'value': {'pEnumNum': {'two': {'ewrap': 0}}}}}, {'fn.test': {'value': {'pEnumNum': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNum': {'two': {'ewrap': 0}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_158(self):
        request = [{'ok': {'value': {'pEnumNum': {'two': {'ewrap': -1}}}}}, {'fn.test': {'value': {'pEnumNum': {'two': {'ewrap': -1}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNum': {'two': {'ewrap': -1}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_159(self):
        request = [{'ok': {'value': {'pEnumNum': {'two': {'ewrap': 1}}}}}, {'fn.test': {'value': {'pEnumNum': {'two': {'ewrap': 1}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNum': {'two': {'ewrap': 1}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_160(self):
        request = [{'ok': {'value': {'pEnumNum': {'two': {'ewrap': -1.7976931348623157e+308}}}}}, {'fn.test': {'value': {'pEnumNum': {'two': {'ewrap': -1.7976931348623157e+308}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNum': {'two': {'ewrap': -1.7976931348623157e+308}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_161(self):
        request = [{'ok': {'value': {'pEnumNum': {'two': {'ewrap': -2.2250738585072014e-308}}}}}, {'fn.test': {'value': {'pEnumNum': {'two': {'ewrap': -2.2250738585072014e-308}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNum': {'two': {'ewrap': -2.2250738585072014e-308}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_162(self):
        request = [{'ok': {'value': {'pEnumNum': {'two': {'ewrap': 2.2250738585072014e-308}}}}}, {'fn.test': {'value': {'pEnumNum': {'two': {'ewrap': 2.2250738585072014e-308}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNum': {'two': {'ewrap': 2.2250738585072014e-308}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_163(self):
        request = [{'ok': {'value': {'pEnumNum': {'two': {'ewrap': 1.7976931348623157e+308}}}}}, {'fn.test': {'value': {'pEnumNum': {'two': {'ewrap': 1.7976931348623157e+308}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNum': {'two': {'ewrap': 1.7976931348623157e+308}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_164(self):
        request = [{'ok': {'value': {'pEnumNum': {'two': {'ewrap': -0.1}}}}}, {'fn.test': {'value': {'pEnumNum': {'two': {'ewrap': -0.1}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNum': {'two': {'ewrap': -0.1}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_165(self):
        request = [{'ok': {'value': {'pEnumNum': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {'value': {'pEnumNum': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNum': {'two': {'ewrap': 0.1}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_166(self):
        request = [{}, {'fn.test': {'value': {'pEnumNum': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_167(self):
        request = [{}, {'fn.test': {'value': {'pEnumNum': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_168(self):
        request = [{}, {'fn.test': {'value': {'pEnumNum': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_169(self):
        request = [{}, {'fn.test': {'value': {'pEnumNum': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_170(self):
        request = [{}, {'fn.test': {'value': {'pEnumNum': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_171(self):
        request = [{'ok': {'value': {'pEnumNum': {'two': {'ewrap': None}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_172(self):
        request = [{'ok': {'value': {'pEnumNum': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_173(self):
        request = [{'ok': {'value': {'pEnumNum': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_174(self):
        request = [{'ok': {'value': {'pEnumNum': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_175(self):
        request = [{'ok': {'value': {'pEnumNum': {'two': {'ewrap': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_176(self):
        request = [{'ok': {'value': {'pEnumNullNum': {'one': {}}}}}, {'fn.test': {'value': {'pEnumNullNum': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullNum': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_177(self):
        request = [{'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': None}}}}}, {'fn.test': {'value': {'pEnumNullNum': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': None}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_178(self):
        request = [{'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': 0}}}}}, {'fn.test': {'value': {'pEnumNullNum': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': 0}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_179(self):
        request = [{'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': -1}}}}}, {'fn.test': {'value': {'pEnumNullNum': {'two': {'ewrap': -1}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': -1}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_180(self):
        request = [{'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': 1}}}}}, {'fn.test': {'value': {'pEnumNullNum': {'two': {'ewrap': 1}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': 1}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_181(self):
        request = [{'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': -1.7976931348623157e+308}}}}}, {'fn.test': {'value': {'pEnumNullNum': {'two': {'ewrap': -1.7976931348623157e+308}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': -1.7976931348623157e+308}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_182(self):
        request = [{'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': -2.2250738585072014e-308}}}}}, {'fn.test': {'value': {'pEnumNullNum': {'two': {'ewrap': -2.2250738585072014e-308}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': -2.2250738585072014e-308}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_183(self):
        request = [{'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': 2.2250738585072014e-308}}}}}, {'fn.test': {'value': {'pEnumNullNum': {'two': {'ewrap': 2.2250738585072014e-308}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': 2.2250738585072014e-308}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_184(self):
        request = [{'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': 1.7976931348623157e+308}}}}}, {'fn.test': {'value': {'pEnumNullNum': {'two': {'ewrap': 1.7976931348623157e+308}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': 1.7976931348623157e+308}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_185(self):
        request = [{'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': -0.1}}}}}, {'fn.test': {'value': {'pEnumNullNum': {'two': {'ewrap': -0.1}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': -0.1}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_186(self):
        request = [{'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {'value': {'pEnumNullNum': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': 0.1}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_187(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullNum': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullNum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_188(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullNum': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullNum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_189(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullNum': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullNum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_190(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullNum': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullNum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_191(self):
        request = [{'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullNum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_192(self):
        request = [{'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullNum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_193(self):
        request = [{'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullNum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_number_194(self):
        request = [{'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullNum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_0(self):
        request = [{'ok': {'value': {'str': ''}}}, {'fn.test': {'value': {'str': ''}}}]
        expected_response = [{}, {'ok': {'value': {'str': ''}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_1(self):
        request = [{'ok': {'value': {'str': 'abc'}}}, {'fn.test': {'value': {'str': 'abc'}}}]
        expected_response = [{}, {'ok': {'value': {'str': 'abc'}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_2(self):
        request = [{}, {'fn.test': {'value': {'str': None}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.str', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_3(self):
        request = [{}, {'fn.test': {'value': {'str': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.str', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_4(self):
        request = [{}, {'fn.test': {'value': {'str': 0}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.str', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_5(self):
        request = [{}, {'fn.test': {'value': {'str': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.str', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_6(self):
        request = [{}, {'fn.test': {'value': {'str': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.str', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_7(self):
        request = [{}, {'fn.test': {'value': {'str': {}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.str', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_8(self):
        request = [{'ok': {'value': {'str': None}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.str', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_9(self):
        request = [{'ok': {'value': {'str': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.str', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_10(self):
        request = [{'ok': {'value': {'str': 0}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.str', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_11(self):
        request = [{'ok': {'value': {'str': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.str', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_12(self):
        request = [{'ok': {'value': {'str': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.str', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_13(self):
        request = [{'ok': {'value': {'str': {}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.str', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_14(self):
        request = [{'ok': {'value': {'nullStr': None}}}, {'fn.test': {'value': {'nullStr': None}}}]
        expected_response = [{}, {'ok': {'value': {'nullStr': None}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_15(self):
        request = [{'ok': {'value': {'nullStr': ''}}}, {'fn.test': {'value': {'nullStr': ''}}}]
        expected_response = [{}, {'ok': {'value': {'nullStr': ''}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_16(self):
        request = [{'ok': {'value': {'nullStr': 'abc'}}}, {'fn.test': {'value': {'nullStr': 'abc'}}}]
        expected_response = [{}, {'ok': {'value': {'nullStr': 'abc'}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_17(self):
        request = [{}, {'fn.test': {'value': {'nullStr': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullStr', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_18(self):
        request = [{}, {'fn.test': {'value': {'nullStr': 0}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullStr', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_19(self):
        request = [{}, {'fn.test': {'value': {'nullStr': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullStr', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_20(self):
        request = [{}, {'fn.test': {'value': {'nullStr': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullStr', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_21(self):
        request = [{}, {'fn.test': {'value': {'nullStr': {}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullStr', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_22(self):
        request = [{'ok': {'value': {'nullStr': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullStr', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_23(self):
        request = [{'ok': {'value': {'nullStr': 0}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullStr', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_24(self):
        request = [{'ok': {'value': {'nullStr': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullStr', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_25(self):
        request = [{'ok': {'value': {'nullStr': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullStr', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_26(self):
        request = [{'ok': {'value': {'nullStr': {}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullStr', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_27(self):
        request = [{'ok': {'value': {'arrStr': []}}}, {'fn.test': {'value': {'arrStr': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrStr': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_28(self):
        request = [{'ok': {'value': {'arrStr': ['']}}}, {'fn.test': {'value': {'arrStr': ['']}}}]
        expected_response = [{}, {'ok': {'value': {'arrStr': ['']}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_29(self):
        request = [{'ok': {'value': {'arrStr': ['abc']}}}, {'fn.test': {'value': {'arrStr': ['abc']}}}]
        expected_response = [{}, {'ok': {'value': {'arrStr': ['abc']}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_30(self):
        request = [{'ok': {'value': {'arrStr': ['', 'abc']}}}, {'fn.test': {'value': {'arrStr': ['', 'abc']}}}]
        expected_response = [{}, {'ok': {'value': {'arrStr': ['', 'abc']}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_31(self):
        request = [{}, {'fn.test': {'value': {'arrStr': ['', None]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_32(self):
        request = [{}, {'fn.test': {'value': {'arrStr': ['', False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_33(self):
        request = [{}, {'fn.test': {'value': {'arrStr': ['', 0]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_34(self):
        request = [{}, {'fn.test': {'value': {'arrStr': ['', 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_35(self):
        request = [{}, {'fn.test': {'value': {'arrStr': ['', []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_36(self):
        request = [{}, {'fn.test': {'value': {'arrStr': ['', {}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_37(self):
        request = [{'ok': {'value': {'arrStr': ['', None]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_38(self):
        request = [{'ok': {'value': {'arrStr': ['', False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_39(self):
        request = [{'ok': {'value': {'arrStr': ['', 0]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_40(self):
        request = [{'ok': {'value': {'arrStr': ['', 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_41(self):
        request = [{'ok': {'value': {'arrStr': ['', []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_42(self):
        request = [{'ok': {'value': {'arrStr': ['', {}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_43(self):
        request = [{'ok': {'value': {'arrNullStr': []}}}, {'fn.test': {'value': {'arrNullStr': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullStr': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_44(self):
        request = [{'ok': {'value': {'arrNullStr': [None]}}}, {'fn.test': {'value': {'arrNullStr': [None]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullStr': [None]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_45(self):
        request = [{'ok': {'value': {'arrNullStr': ['']}}}, {'fn.test': {'value': {'arrNullStr': ['']}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullStr': ['']}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_46(self):
        request = [{'ok': {'value': {'arrNullStr': ['abc']}}}, {'fn.test': {'value': {'arrNullStr': ['abc']}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullStr': ['abc']}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_47(self):
        request = [{'ok': {'value': {'arrNullStr': [None, '', 'abc']}}}, {'fn.test': {'value': {'arrNullStr': [None, '', 'abc']}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullStr': [None, '', 'abc']}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_48(self):
        request = [{}, {'fn.test': {'value': {'arrNullStr': ['', False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_49(self):
        request = [{}, {'fn.test': {'value': {'arrNullStr': ['', 0]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_50(self):
        request = [{}, {'fn.test': {'value': {'arrNullStr': ['', 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_51(self):
        request = [{}, {'fn.test': {'value': {'arrNullStr': ['', []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_52(self):
        request = [{}, {'fn.test': {'value': {'arrNullStr': ['', {}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_53(self):
        request = [{'ok': {'value': {'arrNullStr': ['', False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_54(self):
        request = [{'ok': {'value': {'arrNullStr': ['', 0]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_55(self):
        request = [{'ok': {'value': {'arrNullStr': ['', 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_56(self):
        request = [{'ok': {'value': {'arrNullStr': ['', []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_57(self):
        request = [{'ok': {'value': {'arrNullStr': ['', {}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_58(self):
        request = [{'ok': {'value': {'objStr': {}}}}, {'fn.test': {'value': {'objStr': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objStr': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_59(self):
        request = [{'ok': {'value': {'objStr': {'a': ''}}}}, {'fn.test': {'value': {'objStr': {'a': ''}}}}]
        expected_response = [{}, {'ok': {'value': {'objStr': {'a': ''}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_60(self):
        request = [{'ok': {'value': {'objStr': {'a': 'abc'}}}}, {'fn.test': {'value': {'objStr': {'a': 'abc'}}}}]
        expected_response = [{}, {'ok': {'value': {'objStr': {'a': 'abc'}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_61(self):
        request = [{'ok': {'value': {'objStr': {'a': '', 'b': 'abc'}}}}, {'fn.test': {'value': {'objStr': {'a': '', 'b': 'abc'}}}}]
        expected_response = [{}, {'ok': {'value': {'objStr': {'a': '', 'b': 'abc'}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_62(self):
        request = [{}, {'fn.test': {'value': {'objStr': {'a': '', 'b': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_63(self):
        request = [{}, {'fn.test': {'value': {'objStr': {'a': '', 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_64(self):
        request = [{}, {'fn.test': {'value': {'objStr': {'a': '', 'b': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_65(self):
        request = [{}, {'fn.test': {'value': {'objStr': {'a': '', 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_66(self):
        request = [{}, {'fn.test': {'value': {'objStr': {'a': '', 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_67(self):
        request = [{}, {'fn.test': {'value': {'objStr': {'a': '', 'b': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_68(self):
        request = [{'ok': {'value': {'objStr': {'a': '', 'b': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_69(self):
        request = [{'ok': {'value': {'objStr': {'a': '', 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_70(self):
        request = [{'ok': {'value': {'objStr': {'a': '', 'b': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_71(self):
        request = [{'ok': {'value': {'objStr': {'a': '', 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_72(self):
        request = [{'ok': {'value': {'objStr': {'a': '', 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_73(self):
        request = [{'ok': {'value': {'objStr': {'a': '', 'b': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_74(self):
        request = [{'ok': {'value': {'objNullStr': {}}}}, {'fn.test': {'value': {'objNullStr': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullStr': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_75(self):
        request = [{'ok': {'value': {'objNullStr': {'a': None}}}}, {'fn.test': {'value': {'objNullStr': {'a': None}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullStr': {'a': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_76(self):
        request = [{'ok': {'value': {'objNullStr': {'a': ''}}}}, {'fn.test': {'value': {'objNullStr': {'a': ''}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullStr': {'a': ''}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_77(self):
        request = [{'ok': {'value': {'objNullStr': {'a': 'abc'}}}}, {'fn.test': {'value': {'objNullStr': {'a': 'abc'}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullStr': {'a': 'abc'}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_78(self):
        request = [{'ok': {'value': {'objNullStr': {'a': None, 'b': '', 'c': 'abc'}}}}, {'fn.test': {'value': {'objNullStr': {'a': None, 'b': '', 'c': 'abc'}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullStr': {'a': None, 'b': '', 'c': 'abc'}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_79(self):
        request = [{}, {'fn.test': {'value': {'objNullStr': {'a': '', 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_80(self):
        request = [{}, {'fn.test': {'value': {'objNullStr': {'a': '', 'b': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_81(self):
        request = [{}, {'fn.test': {'value': {'objNullStr': {'a': '', 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_82(self):
        request = [{}, {'fn.test': {'value': {'objNullStr': {'a': '', 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_83(self):
        request = [{}, {'fn.test': {'value': {'objNullStr': {'a': '', 'b': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_84(self):
        request = [{'ok': {'value': {'objNullStr': {'a': '', 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_85(self):
        request = [{'ok': {'value': {'objNullStr': {'a': '', 'b': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_86(self):
        request = [{'ok': {'value': {'objNullStr': {'a': '', 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_87(self):
        request = [{'ok': {'value': {'objNullStr': {'a': '', 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_88(self):
        request = [{'ok': {'value': {'objNullStr': {'a': '', 'b': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_89(self):
        request = [{'ok': {'value': {'pStrStr': {'wrap': ''}}}}, {'fn.test': {'value': {'pStrStr': {'wrap': ''}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrStr': {'wrap': ''}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_90(self):
        request = [{'ok': {'value': {'pStrStr': {'wrap': 'abc'}}}}, {'fn.test': {'value': {'pStrStr': {'wrap': 'abc'}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrStr': {'wrap': 'abc'}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_91(self):
        request = [{}, {'fn.test': {'value': {'pStrStr': {'wrap': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_92(self):
        request = [{}, {'fn.test': {'value': {'pStrStr': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_93(self):
        request = [{}, {'fn.test': {'value': {'pStrStr': {'wrap': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_94(self):
        request = [{}, {'fn.test': {'value': {'pStrStr': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_95(self):
        request = [{}, {'fn.test': {'value': {'pStrStr': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_96(self):
        request = [{}, {'fn.test': {'value': {'pStrStr': {'wrap': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_97(self):
        request = [{'ok': {'value': {'pStrStr': {'wrap': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_98(self):
        request = [{'ok': {'value': {'pStrStr': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_99(self):
        request = [{'ok': {'value': {'pStrStr': {'wrap': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_100(self):
        request = [{'ok': {'value': {'pStrStr': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_101(self):
        request = [{'ok': {'value': {'pStrStr': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_102(self):
        request = [{'ok': {'value': {'pStrStr': {'wrap': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_103(self):
        request = [{'ok': {'value': {'pStrNullStr': {'wrap': None}}}}, {'fn.test': {'value': {'pStrNullStr': {'wrap': None}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullStr': {'wrap': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_104(self):
        request = [{'ok': {'value': {'pStrNullStr': {'wrap': ''}}}}, {'fn.test': {'value': {'pStrNullStr': {'wrap': ''}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullStr': {'wrap': ''}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_105(self):
        request = [{'ok': {'value': {'pStrNullStr': {'wrap': 'abc'}}}}, {'fn.test': {'value': {'pStrNullStr': {'wrap': 'abc'}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullStr': {'wrap': 'abc'}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_106(self):
        request = [{}, {'fn.test': {'value': {'pStrNullStr': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_107(self):
        request = [{}, {'fn.test': {'value': {'pStrNullStr': {'wrap': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_108(self):
        request = [{}, {'fn.test': {'value': {'pStrNullStr': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_109(self):
        request = [{}, {'fn.test': {'value': {'pStrNullStr': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_110(self):
        request = [{}, {'fn.test': {'value': {'pStrNullStr': {'wrap': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_111(self):
        request = [{'ok': {'value': {'pStrNullStr': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_112(self):
        request = [{'ok': {'value': {'pStrNullStr': {'wrap': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_113(self):
        request = [{'ok': {'value': {'pStrNullStr': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_114(self):
        request = [{'ok': {'value': {'pStrNullStr': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_115(self):
        request = [{'ok': {'value': {'pStrNullStr': {'wrap': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_116(self):
        request = [{'ok': {'value': {'pEnumStr': {'one': {}}}}}, {'fn.test': {'value': {'pEnumStr': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumStr': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_117(self):
        request = [{'ok': {'value': {'pEnumStr': {'two': {'ewrap': ''}}}}}, {'fn.test': {'value': {'pEnumStr': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumStr': {'two': {'ewrap': ''}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_118(self):
        request = [{'ok': {'value': {'pEnumStr': {'two': {'ewrap': 'abc'}}}}}, {'fn.test': {'value': {'pEnumStr': {'two': {'ewrap': 'abc'}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumStr': {'two': {'ewrap': 'abc'}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_119(self):
        request = [{}, {'fn.test': {'value': {'pEnumStr': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_120(self):
        request = [{}, {'fn.test': {'value': {'pEnumStr': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_121(self):
        request = [{}, {'fn.test': {'value': {'pEnumStr': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_122(self):
        request = [{}, {'fn.test': {'value': {'pEnumStr': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_123(self):
        request = [{}, {'fn.test': {'value': {'pEnumStr': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_124(self):
        request = [{}, {'fn.test': {'value': {'pEnumStr': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_125(self):
        request = [{'ok': {'value': {'pEnumStr': {'two': {'ewrap': None}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_126(self):
        request = [{'ok': {'value': {'pEnumStr': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_127(self):
        request = [{'ok': {'value': {'pEnumStr': {'two': {'ewrap': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_128(self):
        request = [{'ok': {'value': {'pEnumStr': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_129(self):
        request = [{'ok': {'value': {'pEnumStr': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_130(self):
        request = [{'ok': {'value': {'pEnumStr': {'two': {'ewrap': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_131(self):
        request = [{'ok': {'value': {'pEnumNullStr': {'one': {}}}}}, {'fn.test': {'value': {'pEnumNullStr': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullStr': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_132(self):
        request = [{'ok': {'value': {'pEnumNullStr': {'two': {'ewrap': None}}}}}, {'fn.test': {'value': {'pEnumNullStr': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullStr': {'two': {'ewrap': None}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_133(self):
        request = [{'ok': {'value': {'pEnumNullStr': {'two': {'ewrap': ''}}}}}, {'fn.test': {'value': {'pEnumNullStr': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullStr': {'two': {'ewrap': ''}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_134(self):
        request = [{'ok': {'value': {'pEnumNullStr': {'two': {'ewrap': 'abc'}}}}}, {'fn.test': {'value': {'pEnumNullStr': {'two': {'ewrap': 'abc'}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullStr': {'two': {'ewrap': 'abc'}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_135(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullStr': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_136(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullStr': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_137(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullStr': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_138(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullStr': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_139(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullStr': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_140(self):
        request = [{'ok': {'value': {'pEnumNullStr': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_141(self):
        request = [{'ok': {'value': {'pEnumNullStr': {'two': {'ewrap': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_142(self):
        request = [{'ok': {'value': {'pEnumNullStr': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_143(self):
        request = [{'ok': {'value': {'pEnumNullStr': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_string_144(self):
        request = [{'ok': {'value': {'pEnumNullStr': {'two': {'ewrap': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_0(self):
        request = [{'ok': {'value': {'arr': []}}}, {'fn.test': {'value': {'arr': []}}}]
        expected_response = [{}, {'ok': {'value': {'arr': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_1(self):
        request = [{'ok': {'value': {'arr': [False, 0, 0.1, '']}}}, {'fn.test': {'value': {'arr': [False, 0, 0.1, '']}}}]
        expected_response = [{}, {'ok': {'value': {'arr': [False, 0, 0.1, '']}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_2(self):
        request = [{}, {'fn.test': {'value': {'arr': None}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arr', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_3(self):
        request = [{}, {'fn.test': {'value': {'arr': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arr', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_4(self):
        request = [{}, {'fn.test': {'value': {'arr': 0}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arr', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_5(self):
        request = [{}, {'fn.test': {'value': {'arr': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arr', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_6(self):
        request = [{}, {'fn.test': {'value': {'arr': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arr', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_7(self):
        request = [{}, {'fn.test': {'value': {'arr': {}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arr', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_8(self):
        request = [{'ok': {'value': {'arr': None}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arr', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_9(self):
        request = [{'ok': {'value': {'arr': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arr', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_10(self):
        request = [{'ok': {'value': {'arr': 0}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arr', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_11(self):
        request = [{'ok': {'value': {'arr': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arr', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_12(self):
        request = [{'ok': {'value': {'arr': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arr', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_13(self):
        request = [{'ok': {'value': {'arr': {}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arr', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_14(self):
        request = [{'ok': {'value': {'nullArr': None}}}, {'fn.test': {'value': {'nullArr': None}}}]
        expected_response = [{}, {'ok': {'value': {'nullArr': None}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_15(self):
        request = [{'ok': {'value': {'nullArr': []}}}, {'fn.test': {'value': {'nullArr': []}}}]
        expected_response = [{}, {'ok': {'value': {'nullArr': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_16(self):
        request = [{'ok': {'value': {'nullArr': [False, 0, 0.1, '']}}}, {'fn.test': {'value': {'nullArr': [False, 0, 0.1, '']}}}]
        expected_response = [{}, {'ok': {'value': {'nullArr': [False, 0, 0.1, '']}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_17(self):
        request = [{}, {'fn.test': {'value': {'nullArr': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullArr', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_18(self):
        request = [{}, {'fn.test': {'value': {'nullArr': 0}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullArr', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_19(self):
        request = [{}, {'fn.test': {'value': {'nullArr': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullArr', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_20(self):
        request = [{}, {'fn.test': {'value': {'nullArr': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullArr', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_21(self):
        request = [{}, {'fn.test': {'value': {'nullArr': {}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullArr', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_22(self):
        request = [{'ok': {'value': {'nullArr': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullArr', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_23(self):
        request = [{'ok': {'value': {'nullArr': 0}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullArr', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_24(self):
        request = [{'ok': {'value': {'nullArr': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullArr', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_25(self):
        request = [{'ok': {'value': {'nullArr': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullArr', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_26(self):
        request = [{'ok': {'value': {'nullArr': {}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullArr', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_27(self):
        request = [{'ok': {'value': {'arrArr': []}}}, {'fn.test': {'value': {'arrArr': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrArr': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_28(self):
        request = [{'ok': {'value': {'arrArr': [[]]}}}, {'fn.test': {'value': {'arrArr': [[]]}}}]
        expected_response = [{}, {'ok': {'value': {'arrArr': [[]]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_29(self):
        request = [{'ok': {'value': {'arrArr': [[False, 0, 0.1, '']]}}}, {'fn.test': {'value': {'arrArr': [[False, 0, 0.1, '']]}}}]
        expected_response = [{}, {'ok': {'value': {'arrArr': [[False, 0, 0.1, '']]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_30(self):
        request = [{'ok': {'value': {'arrArr': [[], [False, 0, 0.1, '']]}}}, {'fn.test': {'value': {'arrArr': [[], [False, 0, 0.1, '']]}}}]
        expected_response = [{}, {'ok': {'value': {'arrArr': [[], [False, 0, 0.1, '']]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_31(self):
        request = [{}, {'fn.test': {'value': {'arrArr': [[], None]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrArr[1]', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_32(self):
        request = [{}, {'fn.test': {'value': {'arrArr': [[], False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrArr[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_33(self):
        request = [{}, {'fn.test': {'value': {'arrArr': [[], 0]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrArr[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_34(self):
        request = [{}, {'fn.test': {'value': {'arrArr': [[], 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrArr[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_35(self):
        request = [{}, {'fn.test': {'value': {'arrArr': [[], '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrArr[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_36(self):
        request = [{}, {'fn.test': {'value': {'arrArr': [[], {}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrArr[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_37(self):
        request = [{'ok': {'value': {'arrArr': [[], None]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrArr[1]', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_38(self):
        request = [{'ok': {'value': {'arrArr': [[], False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrArr[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_39(self):
        request = [{'ok': {'value': {'arrArr': [[], 0]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrArr[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_40(self):
        request = [{'ok': {'value': {'arrArr': [[], 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrArr[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_41(self):
        request = [{'ok': {'value': {'arrArr': [[], '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrArr[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_42(self):
        request = [{'ok': {'value': {'arrArr': [[], {}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrArr[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_43(self):
        request = [{'ok': {'value': {'arrNullArr': []}}}, {'fn.test': {'value': {'arrNullArr': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullArr': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_44(self):
        request = [{'ok': {'value': {'arrNullArr': [None]}}}, {'fn.test': {'value': {'arrNullArr': [None]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullArr': [None]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_45(self):
        request = [{'ok': {'value': {'arrNullArr': [[]]}}}, {'fn.test': {'value': {'arrNullArr': [[]]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullArr': [[]]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_46(self):
        request = [{'ok': {'value': {'arrNullArr': [[False, 0, 0.1, '']]}}}, {'fn.test': {'value': {'arrNullArr': [[False, 0, 0.1, '']]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullArr': [[False, 0, 0.1, '']]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_47(self):
        request = [{'ok': {'value': {'arrNullArr': [None, [], [False, 0, 0.1, '']]}}}, {'fn.test': {'value': {'arrNullArr': [None, [], [False, 0, 0.1, '']]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullArr': [None, [], [False, 0, 0.1, '']]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_48(self):
        request = [{}, {'fn.test': {'value': {'arrNullArr': [[], False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullArr[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_49(self):
        request = [{}, {'fn.test': {'value': {'arrNullArr': [[], 0]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullArr[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_50(self):
        request = [{}, {'fn.test': {'value': {'arrNullArr': [[], 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullArr[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_51(self):
        request = [{}, {'fn.test': {'value': {'arrNullArr': [[], '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullArr[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_52(self):
        request = [{}, {'fn.test': {'value': {'arrNullArr': [[], {}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullArr[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_53(self):
        request = [{'ok': {'value': {'arrNullArr': [[], False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullArr[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_54(self):
        request = [{'ok': {'value': {'arrNullArr': [[], 0]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullArr[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_55(self):
        request = [{'ok': {'value': {'arrNullArr': [[], 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullArr[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_56(self):
        request = [{'ok': {'value': {'arrNullArr': [[], '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullArr[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_57(self):
        request = [{'ok': {'value': {'arrNullArr': [[], {}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullArr[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_58(self):
        request = [{'ok': {'value': {'objArr': {}}}}, {'fn.test': {'value': {'objArr': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objArr': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_59(self):
        request = [{'ok': {'value': {'objArr': {'a': []}}}}, {'fn.test': {'value': {'objArr': {'a': []}}}}]
        expected_response = [{}, {'ok': {'value': {'objArr': {'a': []}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_60(self):
        request = [{'ok': {'value': {'objArr': {'a': [False, 0, 0.1, '']}}}}, {'fn.test': {'value': {'objArr': {'a': [False, 0, 0.1, '']}}}}]
        expected_response = [{}, {'ok': {'value': {'objArr': {'a': [False, 0, 0.1, '']}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_61(self):
        request = [{'ok': {'value': {'objArr': {'a': [], 'b': [False, 0, 0.1, '']}}}}, {'fn.test': {'value': {'objArr': {'a': [], 'b': [False, 0, 0.1, '']}}}}]
        expected_response = [{}, {'ok': {'value': {'objArr': {'a': [], 'b': [False, 0, 0.1, '']}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_62(self):
        request = [{}, {'fn.test': {'value': {'objArr': {'a': [], 'b': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objArr{b}', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_63(self):
        request = [{}, {'fn.test': {'value': {'objArr': {'a': [], 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objArr{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_64(self):
        request = [{}, {'fn.test': {'value': {'objArr': {'a': [], 'b': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objArr{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_65(self):
        request = [{}, {'fn.test': {'value': {'objArr': {'a': [], 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objArr{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_66(self):
        request = [{}, {'fn.test': {'value': {'objArr': {'a': [], 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objArr{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_67(self):
        request = [{}, {'fn.test': {'value': {'objArr': {'a': [], 'b': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objArr{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_68(self):
        request = [{'ok': {'value': {'objArr': {'a': [], 'b': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objArr{b}', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_69(self):
        request = [{'ok': {'value': {'objArr': {'a': [], 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objArr{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_70(self):
        request = [{'ok': {'value': {'objArr': {'a': [], 'b': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objArr{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_71(self):
        request = [{'ok': {'value': {'objArr': {'a': [], 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objArr{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_72(self):
        request = [{'ok': {'value': {'objArr': {'a': [], 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objArr{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_73(self):
        request = [{'ok': {'value': {'objArr': {'a': [], 'b': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objArr{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_74(self):
        request = [{'ok': {'value': {'objNullArr': {}}}}, {'fn.test': {'value': {'objNullArr': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullArr': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_75(self):
        request = [{'ok': {'value': {'objNullArr': {'a': None}}}}, {'fn.test': {'value': {'objNullArr': {'a': None}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullArr': {'a': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_76(self):
        request = [{'ok': {'value': {'objNullArr': {'a': []}}}}, {'fn.test': {'value': {'objNullArr': {'a': []}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullArr': {'a': []}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_77(self):
        request = [{'ok': {'value': {'objNullArr': {'a': [False, 0, 0.1, '']}}}}, {'fn.test': {'value': {'objNullArr': {'a': [False, 0, 0.1, '']}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullArr': {'a': [False, 0, 0.1, '']}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_78(self):
        request = [{'ok': {'value': {'objNullArr': {'a': None, 'b': [], 'c': [False, 0, 0.1, '']}}}}, {'fn.test': {'value': {'objNullArr': {'a': None, 'b': [], 'c': [False, 0, 0.1, '']}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullArr': {'a': None, 'b': [], 'c': [False, 0, 0.1, '']}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_79(self):
        request = [{}, {'fn.test': {'value': {'objNullArr': {'a': [], 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullArr{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_80(self):
        request = [{}, {'fn.test': {'value': {'objNullArr': {'a': [], 'b': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullArr{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_81(self):
        request = [{}, {'fn.test': {'value': {'objNullArr': {'a': [], 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullArr{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_82(self):
        request = [{}, {'fn.test': {'value': {'objNullArr': {'a': [], 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullArr{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_83(self):
        request = [{}, {'fn.test': {'value': {'objNullArr': {'a': [], 'b': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullArr{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_84(self):
        request = [{'ok': {'value': {'objNullArr': {'a': [], 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullArr{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_85(self):
        request = [{'ok': {'value': {'objNullArr': {'a': [], 'b': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullArr{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_86(self):
        request = [{'ok': {'value': {'objNullArr': {'a': [], 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullArr{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_87(self):
        request = [{'ok': {'value': {'objNullArr': {'a': [], 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullArr{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_88(self):
        request = [{'ok': {'value': {'objNullArr': {'a': [], 'b': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullArr{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_89(self):
        request = [{'ok': {'value': {'pStrArr': {'wrap': []}}}}, {'fn.test': {'value': {'pStrArr': {'wrap': []}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrArr': {'wrap': []}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_90(self):
        request = [{'ok': {'value': {'pStrArr': {'wrap': [False, 0, 0.1, '']}}}}, {'fn.test': {'value': {'pStrArr': {'wrap': [False, 0, 0.1, '']}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrArr': {'wrap': [False, 0, 0.1, '']}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_91(self):
        request = [{}, {'fn.test': {'value': {'pStrArr': {'wrap': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_92(self):
        request = [{}, {'fn.test': {'value': {'pStrArr': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_93(self):
        request = [{}, {'fn.test': {'value': {'pStrArr': {'wrap': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_94(self):
        request = [{}, {'fn.test': {'value': {'pStrArr': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_95(self):
        request = [{}, {'fn.test': {'value': {'pStrArr': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_96(self):
        request = [{}, {'fn.test': {'value': {'pStrArr': {'wrap': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_97(self):
        request = [{'ok': {'value': {'pStrArr': {'wrap': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_98(self):
        request = [{'ok': {'value': {'pStrArr': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_99(self):
        request = [{'ok': {'value': {'pStrArr': {'wrap': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_100(self):
        request = [{'ok': {'value': {'pStrArr': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_101(self):
        request = [{'ok': {'value': {'pStrArr': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_102(self):
        request = [{'ok': {'value': {'pStrArr': {'wrap': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_103(self):
        request = [{'ok': {'value': {'pStrNullArr': {'wrap': None}}}}, {'fn.test': {'value': {'pStrNullArr': {'wrap': None}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullArr': {'wrap': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_104(self):
        request = [{'ok': {'value': {'pStrNullArr': {'wrap': []}}}}, {'fn.test': {'value': {'pStrNullArr': {'wrap': []}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullArr': {'wrap': []}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_105(self):
        request = [{'ok': {'value': {'pStrNullArr': {'wrap': [False, 0, 0.1, '']}}}}, {'fn.test': {'value': {'pStrNullArr': {'wrap': [False, 0, 0.1, '']}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullArr': {'wrap': [False, 0, 0.1, '']}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_106(self):
        request = [{}, {'fn.test': {'value': {'pStrNullArr': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_107(self):
        request = [{}, {'fn.test': {'value': {'pStrNullArr': {'wrap': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_108(self):
        request = [{}, {'fn.test': {'value': {'pStrNullArr': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_109(self):
        request = [{}, {'fn.test': {'value': {'pStrNullArr': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_110(self):
        request = [{}, {'fn.test': {'value': {'pStrNullArr': {'wrap': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_111(self):
        request = [{'ok': {'value': {'pStrNullArr': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_112(self):
        request = [{'ok': {'value': {'pStrNullArr': {'wrap': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_113(self):
        request = [{'ok': {'value': {'pStrNullArr': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_114(self):
        request = [{'ok': {'value': {'pStrNullArr': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_115(self):
        request = [{'ok': {'value': {'pStrNullArr': {'wrap': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_116(self):
        request = [{'ok': {'value': {'pEnumArr': {'one': {}}}}}, {'fn.test': {'value': {'pEnumArr': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumArr': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_117(self):
        request = [{'ok': {'value': {'pEnumArr': {'two': {'ewrap': []}}}}}, {'fn.test': {'value': {'pEnumArr': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumArr': {'two': {'ewrap': []}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_118(self):
        request = [{'ok': {'value': {'pEnumArr': {'two': {'ewrap': [False, 0, 0.1, '']}}}}}, {'fn.test': {'value': {'pEnumArr': {'two': {'ewrap': [False, 0, 0.1, '']}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumArr': {'two': {'ewrap': [False, 0, 0.1, '']}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_119(self):
        request = [{}, {'fn.test': {'value': {'pEnumArr': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_120(self):
        request = [{}, {'fn.test': {'value': {'pEnumArr': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_121(self):
        request = [{}, {'fn.test': {'value': {'pEnumArr': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_122(self):
        request = [{}, {'fn.test': {'value': {'pEnumArr': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_123(self):
        request = [{}, {'fn.test': {'value': {'pEnumArr': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_124(self):
        request = [{}, {'fn.test': {'value': {'pEnumArr': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_125(self):
        request = [{'ok': {'value': {'pEnumArr': {'two': {'ewrap': None}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_126(self):
        request = [{'ok': {'value': {'pEnumArr': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_127(self):
        request = [{'ok': {'value': {'pEnumArr': {'two': {'ewrap': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_128(self):
        request = [{'ok': {'value': {'pEnumArr': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_129(self):
        request = [{'ok': {'value': {'pEnumArr': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_130(self):
        request = [{'ok': {'value': {'pEnumArr': {'two': {'ewrap': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_131(self):
        request = [{'ok': {'value': {'pEnumNullArr': {'one': {}}}}}, {'fn.test': {'value': {'pEnumNullArr': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullArr': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_132(self):
        request = [{'ok': {'value': {'pEnumNullArr': {'two': {'ewrap': None}}}}}, {'fn.test': {'value': {'pEnumNullArr': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullArr': {'two': {'ewrap': None}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_133(self):
        request = [{'ok': {'value': {'pEnumNullArr': {'two': {'ewrap': []}}}}}, {'fn.test': {'value': {'pEnumNullArr': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullArr': {'two': {'ewrap': []}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_134(self):
        request = [{'ok': {'value': {'pEnumNullArr': {'two': {'ewrap': [False, 0, 0.1, '']}}}}}, {'fn.test': {'value': {'pEnumNullArr': {'two': {'ewrap': [False, 0, 0.1, '']}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullArr': {'two': {'ewrap': [False, 0, 0.1, '']}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_135(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullArr': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_136(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullArr': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_137(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullArr': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_138(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullArr': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_139(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullArr': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_140(self):
        request = [{'ok': {'value': {'pEnumNullArr': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_141(self):
        request = [{'ok': {'value': {'pEnumNullArr': {'two': {'ewrap': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_142(self):
        request = [{'ok': {'value': {'pEnumNullArr': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_143(self):
        request = [{'ok': {'value': {'pEnumNullArr': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_array_144(self):
        request = [{'ok': {'value': {'pEnumNullArr': {'two': {'ewrap': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_0(self):
        request = [{'ok': {'value': {'obj': {}}}}, {'fn.test': {'value': {'obj': {}}}}]
        expected_response = [{}, {'ok': {'value': {'obj': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_1(self):
        request = [{'ok': {'value': {'obj': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}, {'fn.test': {'value': {'obj': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}]
        expected_response = [{}, {'ok': {'value': {'obj': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_2(self):
        request = [{}, {'fn.test': {'value': {'obj': None}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.obj', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_3(self):
        request = [{}, {'fn.test': {'value': {'obj': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.obj', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_4(self):
        request = [{}, {'fn.test': {'value': {'obj': 0}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.obj', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_5(self):
        request = [{}, {'fn.test': {'value': {'obj': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.obj', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_6(self):
        request = [{}, {'fn.test': {'value': {'obj': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.obj', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_7(self):
        request = [{}, {'fn.test': {'value': {'obj': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.obj', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_8(self):
        request = [{'ok': {'value': {'obj': None}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.obj', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_9(self):
        request = [{'ok': {'value': {'obj': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.obj', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_10(self):
        request = [{'ok': {'value': {'obj': 0}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.obj', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_11(self):
        request = [{'ok': {'value': {'obj': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.obj', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_12(self):
        request = [{'ok': {'value': {'obj': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.obj', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_13(self):
        request = [{'ok': {'value': {'obj': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.obj', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_14(self):
        request = [{'ok': {'value': {'nullObj': None}}}, {'fn.test': {'value': {'nullObj': None}}}]
        expected_response = [{}, {'ok': {'value': {'nullObj': None}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_15(self):
        request = [{'ok': {'value': {'nullObj': {}}}}, {'fn.test': {'value': {'nullObj': {}}}}]
        expected_response = [{}, {'ok': {'value': {'nullObj': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_16(self):
        request = [{'ok': {'value': {'nullObj': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}, {'fn.test': {'value': {'nullObj': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}]
        expected_response = [{}, {'ok': {'value': {'nullObj': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_17(self):
        request = [{}, {'fn.test': {'value': {'nullObj': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullObj', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_18(self):
        request = [{}, {'fn.test': {'value': {'nullObj': 0}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullObj', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_19(self):
        request = [{}, {'fn.test': {'value': {'nullObj': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullObj', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_20(self):
        request = [{}, {'fn.test': {'value': {'nullObj': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullObj', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_21(self):
        request = [{}, {'fn.test': {'value': {'nullObj': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullObj', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_22(self):
        request = [{'ok': {'value': {'nullObj': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullObj', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_23(self):
        request = [{'ok': {'value': {'nullObj': 0}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullObj', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_24(self):
        request = [{'ok': {'value': {'nullObj': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullObj', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_25(self):
        request = [{'ok': {'value': {'nullObj': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullObj', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_26(self):
        request = [{'ok': {'value': {'nullObj': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullObj', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_27(self):
        request = [{'ok': {'value': {'arrObj': []}}}, {'fn.test': {'value': {'arrObj': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrObj': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_28(self):
        request = [{'ok': {'value': {'arrObj': [{}]}}}, {'fn.test': {'value': {'arrObj': [{}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrObj': [{}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_29(self):
        request = [{'ok': {'value': {'arrObj': [{'a': False, 'b': 0, 'c': 0.1, 'd': ''}]}}}, {'fn.test': {'value': {'arrObj': [{'a': False, 'b': 0, 'c': 0.1, 'd': ''}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrObj': [{'a': False, 'b': 0, 'c': 0.1, 'd': ''}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_30(self):
        request = [{'ok': {'value': {'arrObj': [{}, {'a': False, 'b': 0, 'c': 0.1, 'd': ''}]}}}, {'fn.test': {'value': {'arrObj': [{}, {'a': False, 'b': 0, 'c': 0.1, 'd': ''}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrObj': [{}, {'a': False, 'b': 0, 'c': 0.1, 'd': ''}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_31(self):
        request = [{}, {'fn.test': {'value': {'arrObj': [{}, None]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrObj[1]', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_32(self):
        request = [{}, {'fn.test': {'value': {'arrObj': [{}, False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrObj[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_33(self):
        request = [{}, {'fn.test': {'value': {'arrObj': [{}, 0]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrObj[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_34(self):
        request = [{}, {'fn.test': {'value': {'arrObj': [{}, 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrObj[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_35(self):
        request = [{}, {'fn.test': {'value': {'arrObj': [{}, '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrObj[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_36(self):
        request = [{}, {'fn.test': {'value': {'arrObj': [{}, []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrObj[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_37(self):
        request = [{'ok': {'value': {'arrObj': [{}, None]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrObj[1]', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_38(self):
        request = [{'ok': {'value': {'arrObj': [{}, False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrObj[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_39(self):
        request = [{'ok': {'value': {'arrObj': [{}, 0]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrObj[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_40(self):
        request = [{'ok': {'value': {'arrObj': [{}, 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrObj[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_41(self):
        request = [{'ok': {'value': {'arrObj': [{}, '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrObj[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_42(self):
        request = [{'ok': {'value': {'arrObj': [{}, []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrObj[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_43(self):
        request = [{'ok': {'value': {'arrNullObj': []}}}, {'fn.test': {'value': {'arrNullObj': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullObj': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_44(self):
        request = [{'ok': {'value': {'arrNullObj': [None]}}}, {'fn.test': {'value': {'arrNullObj': [None]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullObj': [None]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_45(self):
        request = [{'ok': {'value': {'arrNullObj': [{}]}}}, {'fn.test': {'value': {'arrNullObj': [{}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullObj': [{}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_46(self):
        request = [{'ok': {'value': {'arrNullObj': [{'a': False, 'b': 0, 'c': 0.1, 'd': ''}]}}}, {'fn.test': {'value': {'arrNullObj': [{'a': False, 'b': 0, 'c': 0.1, 'd': ''}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullObj': [{'a': False, 'b': 0, 'c': 0.1, 'd': ''}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_47(self):
        request = [{'ok': {'value': {'arrNullObj': [None, {}, {'a': False, 'b': 0, 'c': 0.1, 'd': ''}]}}}, {'fn.test': {'value': {'arrNullObj': [None, {}, {'a': False, 'b': 0, 'c': 0.1, 'd': ''}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullObj': [None, {}, {'a': False, 'b': 0, 'c': 0.1, 'd': ''}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_48(self):
        request = [{}, {'fn.test': {'value': {'arrNullObj': [{}, False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullObj[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_49(self):
        request = [{}, {'fn.test': {'value': {'arrNullObj': [{}, 0]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullObj[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_50(self):
        request = [{}, {'fn.test': {'value': {'arrNullObj': [{}, 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullObj[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_51(self):
        request = [{}, {'fn.test': {'value': {'arrNullObj': [{}, '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullObj[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_52(self):
        request = [{}, {'fn.test': {'value': {'arrNullObj': [{}, []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullObj[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_53(self):
        request = [{'ok': {'value': {'arrNullObj': [{}, False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullObj[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_54(self):
        request = [{'ok': {'value': {'arrNullObj': [{}, 0]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullObj[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_55(self):
        request = [{'ok': {'value': {'arrNullObj': [{}, 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullObj[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_56(self):
        request = [{'ok': {'value': {'arrNullObj': [{}, '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullObj[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_57(self):
        request = [{'ok': {'value': {'arrNullObj': [{}, []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullObj[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_58(self):
        request = [{'ok': {'value': {'objObj': {}}}}, {'fn.test': {'value': {'objObj': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objObj': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_59(self):
        request = [{'ok': {'value': {'objObj': {'a': {}}}}}, {'fn.test': {'value': {'objObj': {'a': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'objObj': {'a': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_60(self):
        request = [{'ok': {'value': {'objObj': {'a': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}, {'fn.test': {'value': {'objObj': {'a': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}]
        expected_response = [{}, {'ok': {'value': {'objObj': {'a': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_61(self):
        request = [{'ok': {'value': {'objObj': {'a': {}, 'b': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}, {'fn.test': {'value': {'objObj': {'a': {}, 'b': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}]
        expected_response = [{}, {'ok': {'value': {'objObj': {'a': {}, 'b': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_62(self):
        request = [{}, {'fn.test': {'value': {'objObj': {'a': {}, 'b': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objObj{b}', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_63(self):
        request = [{}, {'fn.test': {'value': {'objObj': {'a': {}, 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objObj{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_64(self):
        request = [{}, {'fn.test': {'value': {'objObj': {'a': {}, 'b': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objObj{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_65(self):
        request = [{}, {'fn.test': {'value': {'objObj': {'a': {}, 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objObj{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_66(self):
        request = [{}, {'fn.test': {'value': {'objObj': {'a': {}, 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objObj{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_67(self):
        request = [{}, {'fn.test': {'value': {'objObj': {'a': {}, 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objObj{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_68(self):
        request = [{'ok': {'value': {'objObj': {'a': {}, 'b': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objObj{b}', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_69(self):
        request = [{'ok': {'value': {'objObj': {'a': {}, 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objObj{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_70(self):
        request = [{'ok': {'value': {'objObj': {'a': {}, 'b': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objObj{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_71(self):
        request = [{'ok': {'value': {'objObj': {'a': {}, 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objObj{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_72(self):
        request = [{'ok': {'value': {'objObj': {'a': {}, 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objObj{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_73(self):
        request = [{'ok': {'value': {'objObj': {'a': {}, 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objObj{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_74(self):
        request = [{'ok': {'value': {'objNullObj': {}}}}, {'fn.test': {'value': {'objNullObj': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullObj': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_75(self):
        request = [{'ok': {'value': {'objNullObj': {'a': None}}}}, {'fn.test': {'value': {'objNullObj': {'a': None}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullObj': {'a': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_76(self):
        request = [{'ok': {'value': {'objNullObj': {'a': {}}}}}, {'fn.test': {'value': {'objNullObj': {'a': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullObj': {'a': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_77(self):
        request = [{'ok': {'value': {'objNullObj': {'a': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}, {'fn.test': {'value': {'objNullObj': {'a': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullObj': {'a': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_78(self):
        request = [{'ok': {'value': {'objNullObj': {'a': None, 'b': {}, 'c': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}, {'fn.test': {'value': {'objNullObj': {'a': None, 'b': {}, 'c': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullObj': {'a': None, 'b': {}, 'c': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_79(self):
        request = [{}, {'fn.test': {'value': {'objNullObj': {'a': {}, 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullObj{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_80(self):
        request = [{}, {'fn.test': {'value': {'objNullObj': {'a': {}, 'b': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullObj{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_81(self):
        request = [{}, {'fn.test': {'value': {'objNullObj': {'a': {}, 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullObj{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_82(self):
        request = [{}, {'fn.test': {'value': {'objNullObj': {'a': {}, 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullObj{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_83(self):
        request = [{}, {'fn.test': {'value': {'objNullObj': {'a': {}, 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullObj{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_84(self):
        request = [{'ok': {'value': {'objNullObj': {'a': {}, 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullObj{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_85(self):
        request = [{'ok': {'value': {'objNullObj': {'a': {}, 'b': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullObj{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_86(self):
        request = [{'ok': {'value': {'objNullObj': {'a': {}, 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullObj{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_87(self):
        request = [{'ok': {'value': {'objNullObj': {'a': {}, 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullObj{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_88(self):
        request = [{'ok': {'value': {'objNullObj': {'a': {}, 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullObj{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_89(self):
        request = [{'ok': {'value': {'pStrObj': {'wrap': {}}}}}, {'fn.test': {'value': {'pStrObj': {'wrap': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrObj': {'wrap': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_90(self):
        request = [{'ok': {'value': {'pStrObj': {'wrap': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}, {'fn.test': {'value': {'pStrObj': {'wrap': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrObj': {'wrap': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_91(self):
        request = [{}, {'fn.test': {'value': {'pStrObj': {'wrap': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_92(self):
        request = [{}, {'fn.test': {'value': {'pStrObj': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_93(self):
        request = [{}, {'fn.test': {'value': {'pStrObj': {'wrap': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_94(self):
        request = [{}, {'fn.test': {'value': {'pStrObj': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_95(self):
        request = [{}, {'fn.test': {'value': {'pStrObj': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_96(self):
        request = [{}, {'fn.test': {'value': {'pStrObj': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_97(self):
        request = [{'ok': {'value': {'pStrObj': {'wrap': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_98(self):
        request = [{'ok': {'value': {'pStrObj': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_99(self):
        request = [{'ok': {'value': {'pStrObj': {'wrap': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_100(self):
        request = [{'ok': {'value': {'pStrObj': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_101(self):
        request = [{'ok': {'value': {'pStrObj': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_102(self):
        request = [{'ok': {'value': {'pStrObj': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_103(self):
        request = [{'ok': {'value': {'pStrNullObj': {'wrap': None}}}}, {'fn.test': {'value': {'pStrNullObj': {'wrap': None}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullObj': {'wrap': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_104(self):
        request = [{'ok': {'value': {'pStrNullObj': {'wrap': {}}}}}, {'fn.test': {'value': {'pStrNullObj': {'wrap': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullObj': {'wrap': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_105(self):
        request = [{'ok': {'value': {'pStrNullObj': {'wrap': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}, {'fn.test': {'value': {'pStrNullObj': {'wrap': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullObj': {'wrap': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_106(self):
        request = [{}, {'fn.test': {'value': {'pStrNullObj': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_107(self):
        request = [{}, {'fn.test': {'value': {'pStrNullObj': {'wrap': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_108(self):
        request = [{}, {'fn.test': {'value': {'pStrNullObj': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_109(self):
        request = [{}, {'fn.test': {'value': {'pStrNullObj': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_110(self):
        request = [{}, {'fn.test': {'value': {'pStrNullObj': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_111(self):
        request = [{'ok': {'value': {'pStrNullObj': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_112(self):
        request = [{'ok': {'value': {'pStrNullObj': {'wrap': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_113(self):
        request = [{'ok': {'value': {'pStrNullObj': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_114(self):
        request = [{'ok': {'value': {'pStrNullObj': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_115(self):
        request = [{'ok': {'value': {'pStrNullObj': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_116(self):
        request = [{'ok': {'value': {'pEnumObj': {'one': {}}}}}, {'fn.test': {'value': {'pEnumObj': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumObj': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_117(self):
        request = [{'ok': {'value': {'pEnumObj': {'two': {'ewrap': {}}}}}}, {'fn.test': {'value': {'pEnumObj': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumObj': {'two': {'ewrap': {}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_118(self):
        request = [{'ok': {'value': {'pEnumObj': {'two': {'ewrap': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}}, {'fn.test': {'value': {'pEnumObj': {'two': {'ewrap': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumObj': {'two': {'ewrap': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_119(self):
        request = [{}, {'fn.test': {'value': {'pEnumObj': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_120(self):
        request = [{}, {'fn.test': {'value': {'pEnumObj': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_121(self):
        request = [{}, {'fn.test': {'value': {'pEnumObj': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_122(self):
        request = [{}, {'fn.test': {'value': {'pEnumObj': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_123(self):
        request = [{}, {'fn.test': {'value': {'pEnumObj': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_124(self):
        request = [{}, {'fn.test': {'value': {'pEnumObj': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_125(self):
        request = [{'ok': {'value': {'pEnumObj': {'two': {'ewrap': None}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_126(self):
        request = [{'ok': {'value': {'pEnumObj': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_127(self):
        request = [{'ok': {'value': {'pEnumObj': {'two': {'ewrap': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_128(self):
        request = [{'ok': {'value': {'pEnumObj': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_129(self):
        request = [{'ok': {'value': {'pEnumObj': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_130(self):
        request = [{'ok': {'value': {'pEnumObj': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_131(self):
        request = [{'ok': {'value': {'pEnumNullObj': {'one': {}}}}}, {'fn.test': {'value': {'pEnumNullObj': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullObj': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_132(self):
        request = [{'ok': {'value': {'pEnumNullObj': {'two': {'ewrap': None}}}}}, {'fn.test': {'value': {'pEnumNullObj': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullObj': {'two': {'ewrap': None}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_133(self):
        request = [{'ok': {'value': {'pEnumNullObj': {'two': {'ewrap': {}}}}}}, {'fn.test': {'value': {'pEnumNullObj': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullObj': {'two': {'ewrap': {}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_134(self):
        request = [{'ok': {'value': {'pEnumNullObj': {'two': {'ewrap': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}}, {'fn.test': {'value': {'pEnumNullObj': {'two': {'ewrap': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullObj': {'two': {'ewrap': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_135(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullObj': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_136(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullObj': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_137(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullObj': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_138(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullObj': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_139(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullObj': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_140(self):
        request = [{'ok': {'value': {'pEnumNullObj': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_141(self):
        request = [{'ok': {'value': {'pEnumNullObj': {'two': {'ewrap': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_142(self):
        request = [{'ok': {'value': {'pEnumNullObj': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_143(self):
        request = [{'ok': {'value': {'pEnumNullObj': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_object_144(self):
        request = [{'ok': {'value': {'pEnumNullObj': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_0(self):
        request = [{'ok': {'value': {'any': False}}}, {'fn.test': {'value': {'any': False}}}]
        expected_response = [{}, {'ok': {'value': {'any': False}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_1(self):
        request = [{'ok': {'value': {'any': 0}}}, {'fn.test': {'value': {'any': 0}}}]
        expected_response = [{}, {'ok': {'value': {'any': 0}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_2(self):
        request = [{'ok': {'value': {'any': 0.1}}}, {'fn.test': {'value': {'any': 0.1}}}]
        expected_response = [{}, {'ok': {'value': {'any': 0.1}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_3(self):
        request = [{'ok': {'value': {'any': ''}}}, {'fn.test': {'value': {'any': ''}}}]
        expected_response = [{}, {'ok': {'value': {'any': ''}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_4(self):
        request = [{'ok': {'value': {'any': []}}}, {'fn.test': {'value': {'any': []}}}]
        expected_response = [{}, {'ok': {'value': {'any': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_5(self):
        request = [{'ok': {'value': {'any': {}}}}, {'fn.test': {'value': {'any': {}}}}]
        expected_response = [{}, {'ok': {'value': {'any': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_6(self):
        request = [{}, {'fn.test': {'value': {'any': None}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.any', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Any': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_7(self):
        request = [{'ok': {'value': {'any': None}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.any', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Any': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_8(self):
        request = [{'ok': {'value': {'nullAny': None}}}, {'fn.test': {'value': {'nullAny': None}}}]
        expected_response = [{}, {'ok': {'value': {'nullAny': None}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_9(self):
        request = [{'ok': {'value': {'nullAny': False}}}, {'fn.test': {'value': {'nullAny': False}}}]
        expected_response = [{}, {'ok': {'value': {'nullAny': False}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_10(self):
        request = [{'ok': {'value': {'nullAny': 0}}}, {'fn.test': {'value': {'nullAny': 0}}}]
        expected_response = [{}, {'ok': {'value': {'nullAny': 0}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_11(self):
        request = [{'ok': {'value': {'nullAny': 0.1}}}, {'fn.test': {'value': {'nullAny': 0.1}}}]
        expected_response = [{}, {'ok': {'value': {'nullAny': 0.1}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_12(self):
        request = [{'ok': {'value': {'nullAny': ''}}}, {'fn.test': {'value': {'nullAny': ''}}}]
        expected_response = [{}, {'ok': {'value': {'nullAny': ''}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_13(self):
        request = [{'ok': {'value': {'nullAny': []}}}, {'fn.test': {'value': {'nullAny': []}}}]
        expected_response = [{}, {'ok': {'value': {'nullAny': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_14(self):
        request = [{'ok': {'value': {'nullAny': {}}}}, {'fn.test': {'value': {'nullAny': {}}}}]
        expected_response = [{}, {'ok': {'value': {'nullAny': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_15(self):
        request = [{'ok': {'value': {'arrAny': []}}}, {'fn.test': {'value': {'arrAny': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrAny': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_16(self):
        request = [{'ok': {'value': {'arrAny': [False]}}}, {'fn.test': {'value': {'arrAny': [False]}}}]
        expected_response = [{}, {'ok': {'value': {'arrAny': [False]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_17(self):
        request = [{'ok': {'value': {'arrAny': [0]}}}, {'fn.test': {'value': {'arrAny': [0]}}}]
        expected_response = [{}, {'ok': {'value': {'arrAny': [0]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_18(self):
        request = [{'ok': {'value': {'arrAny': [0.1]}}}, {'fn.test': {'value': {'arrAny': [0.1]}}}]
        expected_response = [{}, {'ok': {'value': {'arrAny': [0.1]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_19(self):
        request = [{'ok': {'value': {'arrAny': ['']}}}, {'fn.test': {'value': {'arrAny': ['']}}}]
        expected_response = [{}, {'ok': {'value': {'arrAny': ['']}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_20(self):
        request = [{'ok': {'value': {'arrAny': [[]]}}}, {'fn.test': {'value': {'arrAny': [[]]}}}]
        expected_response = [{}, {'ok': {'value': {'arrAny': [[]]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_21(self):
        request = [{'ok': {'value': {'arrAny': [{}]}}}, {'fn.test': {'value': {'arrAny': [{}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrAny': [{}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_22(self):
        request = [{'ok': {'value': {'arrAny': [False, 0, 0.1, '', [], {}]}}}, {'fn.test': {'value': {'arrAny': [False, 0, 0.1, '', [], {}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrAny': [False, 0, 0.1, '', [], {}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_23(self):
        request = [{}, {'fn.test': {'value': {'arrAny': [False, None]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrAny[1]', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Any': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_24(self):
        request = [{'ok': {'value': {'arrAny': [False, None]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrAny[1]', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Any': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_25(self):
        request = [{'ok': {'value': {'arrNullAny': []}}}, {'fn.test': {'value': {'arrNullAny': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullAny': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_26(self):
        request = [{'ok': {'value': {'arrNullAny': [None]}}}, {'fn.test': {'value': {'arrNullAny': [None]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullAny': [None]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_27(self):
        request = [{'ok': {'value': {'arrNullAny': [False]}}}, {'fn.test': {'value': {'arrNullAny': [False]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullAny': [False]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_28(self):
        request = [{'ok': {'value': {'arrNullAny': [0]}}}, {'fn.test': {'value': {'arrNullAny': [0]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullAny': [0]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_29(self):
        request = [{'ok': {'value': {'arrNullAny': [0.1]}}}, {'fn.test': {'value': {'arrNullAny': [0.1]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullAny': [0.1]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_30(self):
        request = [{'ok': {'value': {'arrNullAny': ['']}}}, {'fn.test': {'value': {'arrNullAny': ['']}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullAny': ['']}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_31(self):
        request = [{'ok': {'value': {'arrNullAny': [[]]}}}, {'fn.test': {'value': {'arrNullAny': [[]]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullAny': [[]]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_32(self):
        request = [{'ok': {'value': {'arrNullAny': [{}]}}}, {'fn.test': {'value': {'arrNullAny': [{}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullAny': [{}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_33(self):
        request = [{'ok': {'value': {'arrNullAny': [None, False, 0, 0.1, '', [], {}]}}}, {'fn.test': {'value': {'arrNullAny': [None, False, 0, 0.1, '', [], {}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullAny': [None, False, 0, 0.1, '', [], {}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_34(self):
        request = [{'ok': {'value': {'objAny': {}}}}, {'fn.test': {'value': {'objAny': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objAny': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_35(self):
        request = [{'ok': {'value': {'objAny': {'a': False}}}}, {'fn.test': {'value': {'objAny': {'a': False}}}}]
        expected_response = [{}, {'ok': {'value': {'objAny': {'a': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_36(self):
        request = [{'ok': {'value': {'objAny': {'a': 0}}}}, {'fn.test': {'value': {'objAny': {'a': 0}}}}]
        expected_response = [{}, {'ok': {'value': {'objAny': {'a': 0}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_37(self):
        request = [{'ok': {'value': {'objAny': {'a': 0.1}}}}, {'fn.test': {'value': {'objAny': {'a': 0.1}}}}]
        expected_response = [{}, {'ok': {'value': {'objAny': {'a': 0.1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_38(self):
        request = [{'ok': {'value': {'objAny': {'a': ''}}}}, {'fn.test': {'value': {'objAny': {'a': ''}}}}]
        expected_response = [{}, {'ok': {'value': {'objAny': {'a': ''}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_39(self):
        request = [{'ok': {'value': {'objAny': {'a': []}}}}, {'fn.test': {'value': {'objAny': {'a': []}}}}]
        expected_response = [{}, {'ok': {'value': {'objAny': {'a': []}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_40(self):
        request = [{'ok': {'value': {'objAny': {'a': {}}}}}, {'fn.test': {'value': {'objAny': {'a': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'objAny': {'a': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_41(self):
        request = [{'ok': {'value': {'objAny': {'a': False, 'b': 0, 'c': 0.1, 'd': '', 'e': [], 'f': {}}}}}, {'fn.test': {'value': {'objAny': {'a': False, 'b': 0, 'c': 0.1, 'd': '', 'e': [], 'f': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'objAny': {'a': False, 'b': 0, 'c': 0.1, 'd': '', 'e': [], 'f': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_42(self):
        request = [{}, {'fn.test': {'value': {'objAny': {'a': False, 'b': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objAny{b}', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Any': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_43(self):
        request = [{'ok': {'value': {'objAny': {'a': False, 'b': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objAny{b}', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Any': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_44(self):
        request = [{'ok': {'value': {'objNullAny': {}}}}, {'fn.test': {'value': {'objNullAny': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullAny': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_45(self):
        request = [{'ok': {'value': {'objNullAny': {'a': None}}}}, {'fn.test': {'value': {'objNullAny': {'a': None}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullAny': {'a': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_46(self):
        request = [{'ok': {'value': {'objNullAny': {'a': False}}}}, {'fn.test': {'value': {'objNullAny': {'a': False}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullAny': {'a': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_47(self):
        request = [{'ok': {'value': {'objNullAny': {'a': 0}}}}, {'fn.test': {'value': {'objNullAny': {'a': 0}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullAny': {'a': 0}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_48(self):
        request = [{'ok': {'value': {'objNullAny': {'a': 0.1}}}}, {'fn.test': {'value': {'objNullAny': {'a': 0.1}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullAny': {'a': 0.1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_49(self):
        request = [{'ok': {'value': {'objNullAny': {'a': ''}}}}, {'fn.test': {'value': {'objNullAny': {'a': ''}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullAny': {'a': ''}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_50(self):
        request = [{'ok': {'value': {'objNullAny': {'a': []}}}}, {'fn.test': {'value': {'objNullAny': {'a': []}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullAny': {'a': []}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_51(self):
        request = [{'ok': {'value': {'objNullAny': {'a': {}}}}}, {'fn.test': {'value': {'objNullAny': {'a': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullAny': {'a': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_52(self):
        request = [{'ok': {'value': {'objNullAny': {'a': None, 'b': False, 'c': 0, 'd': 0.1, 'e': '', 'f': [], 'g': {}}}}}, {'fn.test': {'value': {'objNullAny': {'a': None, 'b': False, 'c': 0, 'd': 0.1, 'e': '', 'f': [], 'g': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullAny': {'a': None, 'b': False, 'c': 0, 'd': 0.1, 'e': '', 'f': [], 'g': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_53(self):
        request = [{'ok': {'value': {'pStrAny': {'wrap': False}}}}, {'fn.test': {'value': {'pStrAny': {'wrap': False}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrAny': {'wrap': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_54(self):
        request = [{'ok': {'value': {'pStrAny': {'wrap': 0}}}}, {'fn.test': {'value': {'pStrAny': {'wrap': 0}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrAny': {'wrap': 0}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_55(self):
        request = [{'ok': {'value': {'pStrAny': {'wrap': 0.1}}}}, {'fn.test': {'value': {'pStrAny': {'wrap': 0.1}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrAny': {'wrap': 0.1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_56(self):
        request = [{'ok': {'value': {'pStrAny': {'wrap': ''}}}}, {'fn.test': {'value': {'pStrAny': {'wrap': ''}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrAny': {'wrap': ''}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_57(self):
        request = [{'ok': {'value': {'pStrAny': {'wrap': []}}}}, {'fn.test': {'value': {'pStrAny': {'wrap': []}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrAny': {'wrap': []}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_58(self):
        request = [{'ok': {'value': {'pStrAny': {'wrap': {}}}}}, {'fn.test': {'value': {'pStrAny': {'wrap': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrAny': {'wrap': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_59(self):
        request = [{}, {'fn.test': {'value': {'pStrAny': {'wrap': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrAny.wrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Any': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_60(self):
        request = [{'ok': {'value': {'pStrAny': {'wrap': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrAny.wrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Any': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_61(self):
        request = [{'ok': {'value': {'pStrNullAny': {'wrap': None}}}}, {'fn.test': {'value': {'pStrNullAny': {'wrap': None}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullAny': {'wrap': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_62(self):
        request = [{'ok': {'value': {'pStrNullAny': {'wrap': False}}}}, {'fn.test': {'value': {'pStrNullAny': {'wrap': False}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullAny': {'wrap': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_63(self):
        request = [{'ok': {'value': {'pStrNullAny': {'wrap': 0}}}}, {'fn.test': {'value': {'pStrNullAny': {'wrap': 0}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullAny': {'wrap': 0}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_64(self):
        request = [{'ok': {'value': {'pStrNullAny': {'wrap': 0.1}}}}, {'fn.test': {'value': {'pStrNullAny': {'wrap': 0.1}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullAny': {'wrap': 0.1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_65(self):
        request = [{'ok': {'value': {'pStrNullAny': {'wrap': ''}}}}, {'fn.test': {'value': {'pStrNullAny': {'wrap': ''}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullAny': {'wrap': ''}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_66(self):
        request = [{'ok': {'value': {'pStrNullAny': {'wrap': []}}}}, {'fn.test': {'value': {'pStrNullAny': {'wrap': []}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullAny': {'wrap': []}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_67(self):
        request = [{'ok': {'value': {'pStrNullAny': {'wrap': {}}}}}, {'fn.test': {'value': {'pStrNullAny': {'wrap': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullAny': {'wrap': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_68(self):
        request = [{'ok': {'value': {'pEnumAny': {'one': {}}}}}, {'fn.test': {'value': {'pEnumAny': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumAny': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_69(self):
        request = [{'ok': {'value': {'pEnumAny': {'two': {'ewrap': False}}}}}, {'fn.test': {'value': {'pEnumAny': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumAny': {'two': {'ewrap': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_70(self):
        request = [{'ok': {'value': {'pEnumAny': {'two': {'ewrap': 0}}}}}, {'fn.test': {'value': {'pEnumAny': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumAny': {'two': {'ewrap': 0}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_71(self):
        request = [{'ok': {'value': {'pEnumAny': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {'value': {'pEnumAny': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumAny': {'two': {'ewrap': 0.1}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_72(self):
        request = [{'ok': {'value': {'pEnumAny': {'two': {'ewrap': ''}}}}}, {'fn.test': {'value': {'pEnumAny': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumAny': {'two': {'ewrap': ''}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_73(self):
        request = [{'ok': {'value': {'pEnumAny': {'two': {'ewrap': []}}}}}, {'fn.test': {'value': {'pEnumAny': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumAny': {'two': {'ewrap': []}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_74(self):
        request = [{'ok': {'value': {'pEnumAny': {'two': {'ewrap': {}}}}}}, {'fn.test': {'value': {'pEnumAny': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumAny': {'two': {'ewrap': {}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_75(self):
        request = [{}, {'fn.test': {'value': {'pEnumAny': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumAny.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Any': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_76(self):
        request = [{'ok': {'value': {'pEnumAny': {'two': {'ewrap': None}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumAny.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Any': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_77(self):
        request = [{'ok': {'value': {'pEnumNullAny': {'one': {}}}}}, {'fn.test': {'value': {'pEnumNullAny': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullAny': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_78(self):
        request = [{'ok': {'value': {'pEnumNullAny': {'two': {'ewrap': None}}}}}, {'fn.test': {'value': {'pEnumNullAny': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullAny': {'two': {'ewrap': None}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_79(self):
        request = [{'ok': {'value': {'pEnumNullAny': {'two': {'ewrap': False}}}}}, {'fn.test': {'value': {'pEnumNullAny': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullAny': {'two': {'ewrap': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_80(self):
        request = [{'ok': {'value': {'pEnumNullAny': {'two': {'ewrap': 0}}}}}, {'fn.test': {'value': {'pEnumNullAny': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullAny': {'two': {'ewrap': 0}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_81(self):
        request = [{'ok': {'value': {'pEnumNullAny': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {'value': {'pEnumNullAny': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullAny': {'two': {'ewrap': 0.1}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_82(self):
        request = [{'ok': {'value': {'pEnumNullAny': {'two': {'ewrap': ''}}}}}, {'fn.test': {'value': {'pEnumNullAny': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullAny': {'two': {'ewrap': ''}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_83(self):
        request = [{'ok': {'value': {'pEnumNullAny': {'two': {'ewrap': []}}}}}, {'fn.test': {'value': {'pEnumNullAny': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullAny': {'two': {'ewrap': []}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_any_84(self):
        request = [{'ok': {'value': {'pEnumNullAny': {'two': {'ewrap': {}}}}}}, {'fn.test': {'value': {'pEnumNullAny': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullAny': {'two': {'ewrap': {}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_0(self):
        request = [{'ok': {'value': {'struct': {'required': False}}}}, {'fn.test': {'value': {'struct': {'required': False}}}}]
        expected_response = [{}, {'ok': {'value': {'struct': {'required': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_1(self):
        request = [{'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {'value': {'struct': {'optional': False, 'required': False}}}}]
        expected_response = [{}, {'ok': {'value': {'struct': {'optional': False, 'required': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_2(self):
        request = [{}, {'fn.test': {'value': {'struct': {}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.struct.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_3(self):
        request = [{}, {'fn.test': {'value': {'struct': {'required': False, 'a': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.struct.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_4(self):
        request = [{}, {'fn.test': {'value': {'struct': None}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.struct', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_5(self):
        request = [{}, {'fn.test': {'value': {'struct': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.struct', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_6(self):
        request = [{}, {'fn.test': {'value': {'struct': 0}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.struct', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_7(self):
        request = [{}, {'fn.test': {'value': {'struct': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.struct', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_8(self):
        request = [{}, {'fn.test': {'value': {'struct': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.struct', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_9(self):
        request = [{}, {'fn.test': {'value': {'struct': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.struct', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_10(self):
        request = [{'ok': {'value': {'struct': {}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.struct.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_11(self):
        request = [{'ok': {'value': {'struct': {'required': False, 'a': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.struct.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_12(self):
        request = [{'ok': {'value': {'struct': None}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.struct', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_13(self):
        request = [{'ok': {'value': {'struct': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.struct', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_14(self):
        request = [{'ok': {'value': {'struct': 0}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.struct', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_15(self):
        request = [{'ok': {'value': {'struct': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.struct', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_16(self):
        request = [{'ok': {'value': {'struct': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.struct', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_17(self):
        request = [{'ok': {'value': {'struct': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.struct', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_18(self):
        request = [{'ok': {'value': {'nullStruct': None}}}, {'fn.test': {'value': {'nullStruct': None}}}]
        expected_response = [{}, {'ok': {'value': {'nullStruct': None}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_19(self):
        request = [{'ok': {'value': {'nullStruct': {'required': False}}}}, {'fn.test': {'value': {'nullStruct': {'required': False}}}}]
        expected_response = [{}, {'ok': {'value': {'nullStruct': {'required': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_20(self):
        request = [{'ok': {'value': {'nullStruct': {'optional': False, 'required': False}}}}, {'fn.test': {'value': {'nullStruct': {'optional': False, 'required': False}}}}]
        expected_response = [{}, {'ok': {'value': {'nullStruct': {'optional': False, 'required': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_21(self):
        request = [{}, {'fn.test': {'value': {'nullStruct': {}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullStruct.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_22(self):
        request = [{}, {'fn.test': {'value': {'nullStruct': {'required': False, 'a': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullStruct.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_23(self):
        request = [{}, {'fn.test': {'value': {'nullStruct': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullStruct', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_24(self):
        request = [{}, {'fn.test': {'value': {'nullStruct': 0}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullStruct', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_25(self):
        request = [{}, {'fn.test': {'value': {'nullStruct': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullStruct', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_26(self):
        request = [{}, {'fn.test': {'value': {'nullStruct': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullStruct', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_27(self):
        request = [{}, {'fn.test': {'value': {'nullStruct': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullStruct', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_28(self):
        request = [{'ok': {'value': {'nullStruct': {}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullStruct.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_29(self):
        request = [{'ok': {'value': {'nullStruct': {'required': False, 'a': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullStruct.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_30(self):
        request = [{'ok': {'value': {'nullStruct': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullStruct', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_31(self):
        request = [{'ok': {'value': {'nullStruct': 0}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullStruct', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_32(self):
        request = [{'ok': {'value': {'nullStruct': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullStruct', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_33(self):
        request = [{'ok': {'value': {'nullStruct': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullStruct', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_34(self):
        request = [{'ok': {'value': {'nullStruct': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullStruct', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_35(self):
        request = [{'ok': {'value': {'arrStruct': []}}}, {'fn.test': {'value': {'arrStruct': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrStruct': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_36(self):
        request = [{'ok': {'value': {'arrStruct': [{'required': False}]}}}, {'fn.test': {'value': {'arrStruct': [{'required': False}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrStruct': [{'required': False}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_37(self):
        request = [{'ok': {'value': {'arrStruct': [{'optional': False, 'required': False}]}}}, {'fn.test': {'value': {'arrStruct': [{'optional': False, 'required': False}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrStruct': [{'optional': False, 'required': False}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_38(self):
        request = [{'ok': {'value': {'arrStruct': [{'required': False}, {'optional': False, 'required': False}]}}}, {'fn.test': {'value': {'arrStruct': [{'required': False}, {'optional': False, 'required': False}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrStruct': [{'required': False}, {'optional': False, 'required': False}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_39(self):
        request = [{}, {'fn.test': {'value': {'arrStruct': [{'required': False}, {}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrStruct[1].required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_40(self):
        request = [{}, {'fn.test': {'value': {'arrStruct': [{'required': False}, {'required': False, 'a': False}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrStruct[1].a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_41(self):
        request = [{}, {'fn.test': {'value': {'arrStruct': [{'required': False}, None]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_42(self):
        request = [{}, {'fn.test': {'value': {'arrStruct': [{'required': False}, False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_43(self):
        request = [{}, {'fn.test': {'value': {'arrStruct': [{'required': False}, 0]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_44(self):
        request = [{}, {'fn.test': {'value': {'arrStruct': [{'required': False}, 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_45(self):
        request = [{}, {'fn.test': {'value': {'arrStruct': [{'required': False}, '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_46(self):
        request = [{}, {'fn.test': {'value': {'arrStruct': [{'required': False}, []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_47(self):
        request = [{'ok': {'value': {'arrStruct': [{'required': False}, {}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrStruct[1].required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_48(self):
        request = [{'ok': {'value': {'arrStruct': [{'required': False}, {'required': False, 'a': False}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrStruct[1].a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_49(self):
        request = [{'ok': {'value': {'arrStruct': [{'required': False}, None]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_50(self):
        request = [{'ok': {'value': {'arrStruct': [{'required': False}, False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_51(self):
        request = [{'ok': {'value': {'arrStruct': [{'required': False}, 0]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_52(self):
        request = [{'ok': {'value': {'arrStruct': [{'required': False}, 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_53(self):
        request = [{'ok': {'value': {'arrStruct': [{'required': False}, '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_54(self):
        request = [{'ok': {'value': {'arrStruct': [{'required': False}, []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_55(self):
        request = [{'ok': {'value': {'arrNullStruct': []}}}, {'fn.test': {'value': {'arrNullStruct': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullStruct': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_56(self):
        request = [{'ok': {'value': {'arrNullStruct': [None]}}}, {'fn.test': {'value': {'arrNullStruct': [None]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullStruct': [None]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_57(self):
        request = [{'ok': {'value': {'arrNullStruct': [{'required': False}]}}}, {'fn.test': {'value': {'arrNullStruct': [{'required': False}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullStruct': [{'required': False}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_58(self):
        request = [{'ok': {'value': {'arrNullStruct': [{'optional': False, 'required': False}]}}}, {'fn.test': {'value': {'arrNullStruct': [{'optional': False, 'required': False}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullStruct': [{'optional': False, 'required': False}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_59(self):
        request = [{'ok': {'value': {'arrNullStruct': [None, {'required': False}, {'optional': False, 'required': False}]}}}, {'fn.test': {'value': {'arrNullStruct': [None, {'required': False}, {'optional': False, 'required': False}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullStruct': [None, {'required': False}, {'optional': False, 'required': False}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_60(self):
        request = [{}, {'fn.test': {'value': {'arrNullStruct': [{'required': False}, {}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullStruct[1].required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_61(self):
        request = [{}, {'fn.test': {'value': {'arrNullStruct': [{'required': False}, {'required': False, 'a': False}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullStruct[1].a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_62(self):
        request = [{}, {'fn.test': {'value': {'arrNullStruct': [{'required': False}, False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_63(self):
        request = [{}, {'fn.test': {'value': {'arrNullStruct': [{'required': False}, 0]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_64(self):
        request = [{}, {'fn.test': {'value': {'arrNullStruct': [{'required': False}, 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_65(self):
        request = [{}, {'fn.test': {'value': {'arrNullStruct': [{'required': False}, '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_66(self):
        request = [{}, {'fn.test': {'value': {'arrNullStruct': [{'required': False}, []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_67(self):
        request = [{'ok': {'value': {'arrNullStruct': [{'required': False}, {}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullStruct[1].required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_68(self):
        request = [{'ok': {'value': {'arrNullStruct': [{'required': False}, {'required': False, 'a': False}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullStruct[1].a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_69(self):
        request = [{'ok': {'value': {'arrNullStruct': [{'required': False}, False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_70(self):
        request = [{'ok': {'value': {'arrNullStruct': [{'required': False}, 0]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_71(self):
        request = [{'ok': {'value': {'arrNullStruct': [{'required': False}, 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_72(self):
        request = [{'ok': {'value': {'arrNullStruct': [{'required': False}, '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_73(self):
        request = [{'ok': {'value': {'arrNullStruct': [{'required': False}, []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_74(self):
        request = [{'ok': {'value': {'objStruct': {}}}}, {'fn.test': {'value': {'objStruct': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objStruct': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_75(self):
        request = [{'ok': {'value': {'objStruct': {'a': {'required': False}}}}}, {'fn.test': {'value': {'objStruct': {'a': {'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'objStruct': {'a': {'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_76(self):
        request = [{'ok': {'value': {'objStruct': {'a': {'optional': False, 'required': False}}}}}, {'fn.test': {'value': {'objStruct': {'a': {'optional': False, 'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'objStruct': {'a': {'optional': False, 'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_77(self):
        request = [{'ok': {'value': {'objStruct': {'a': {'required': False}, 'b': {'optional': False, 'required': False}}}}}, {'fn.test': {'value': {'objStruct': {'a': {'required': False}, 'b': {'optional': False, 'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'objStruct': {'a': {'required': False}, 'b': {'optional': False, 'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_78(self):
        request = [{}, {'fn.test': {'value': {'objStruct': {'a': {'required': False}, 'b': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objStruct{b}.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_79(self):
        request = [{}, {'fn.test': {'value': {'objStruct': {'a': {'required': False}, 'b': {'required': False, 'a': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objStruct{b}.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_80(self):
        request = [{}, {'fn.test': {'value': {'objStruct': {'a': {'required': False}, 'b': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_81(self):
        request = [{}, {'fn.test': {'value': {'objStruct': {'a': {'required': False}, 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_82(self):
        request = [{}, {'fn.test': {'value': {'objStruct': {'a': {'required': False}, 'b': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_83(self):
        request = [{}, {'fn.test': {'value': {'objStruct': {'a': {'required': False}, 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_84(self):
        request = [{}, {'fn.test': {'value': {'objStruct': {'a': {'required': False}, 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_85(self):
        request = [{}, {'fn.test': {'value': {'objStruct': {'a': {'required': False}, 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_86(self):
        request = [{'ok': {'value': {'objStruct': {'a': {'required': False}, 'b': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objStruct{b}.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_87(self):
        request = [{'ok': {'value': {'objStruct': {'a': {'required': False}, 'b': {'required': False, 'a': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objStruct{b}.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_88(self):
        request = [{'ok': {'value': {'objStruct': {'a': {'required': False}, 'b': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_89(self):
        request = [{'ok': {'value': {'objStruct': {'a': {'required': False}, 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_90(self):
        request = [{'ok': {'value': {'objStruct': {'a': {'required': False}, 'b': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_91(self):
        request = [{'ok': {'value': {'objStruct': {'a': {'required': False}, 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_92(self):
        request = [{'ok': {'value': {'objStruct': {'a': {'required': False}, 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_93(self):
        request = [{'ok': {'value': {'objStruct': {'a': {'required': False}, 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_94(self):
        request = [{'ok': {'value': {'objNullStruct': {}}}}, {'fn.test': {'value': {'objNullStruct': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullStruct': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_95(self):
        request = [{'ok': {'value': {'objNullStruct': {'a': None}}}}, {'fn.test': {'value': {'objNullStruct': {'a': None}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullStruct': {'a': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_96(self):
        request = [{'ok': {'value': {'objNullStruct': {'a': {'required': False}}}}}, {'fn.test': {'value': {'objNullStruct': {'a': {'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullStruct': {'a': {'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_97(self):
        request = [{'ok': {'value': {'objNullStruct': {'a': {'optional': False, 'required': False}}}}}, {'fn.test': {'value': {'objNullStruct': {'a': {'optional': False, 'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullStruct': {'a': {'optional': False, 'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_98(self):
        request = [{'ok': {'value': {'objNullStruct': {'a': None, 'b': {'required': False}, 'c': {'optional': False, 'required': False}}}}}, {'fn.test': {'value': {'objNullStruct': {'a': None, 'b': {'required': False}, 'c': {'optional': False, 'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullStruct': {'a': None, 'b': {'required': False}, 'c': {'optional': False, 'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_99(self):
        request = [{}, {'fn.test': {'value': {'objNullStruct': {'a': {'required': False}, 'b': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullStruct{b}.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_100(self):
        request = [{}, {'fn.test': {'value': {'objNullStruct': {'a': {'required': False}, 'b': {'required': False, 'a': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullStruct{b}.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_101(self):
        request = [{}, {'fn.test': {'value': {'objNullStruct': {'a': {'required': False}, 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_102(self):
        request = [{}, {'fn.test': {'value': {'objNullStruct': {'a': {'required': False}, 'b': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_103(self):
        request = [{}, {'fn.test': {'value': {'objNullStruct': {'a': {'required': False}, 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_104(self):
        request = [{}, {'fn.test': {'value': {'objNullStruct': {'a': {'required': False}, 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_105(self):
        request = [{}, {'fn.test': {'value': {'objNullStruct': {'a': {'required': False}, 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_106(self):
        request = [{'ok': {'value': {'objNullStruct': {'a': {'required': False}, 'b': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullStruct{b}.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_107(self):
        request = [{'ok': {'value': {'objNullStruct': {'a': {'required': False}, 'b': {'required': False, 'a': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullStruct{b}.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_108(self):
        request = [{'ok': {'value': {'objNullStruct': {'a': {'required': False}, 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_109(self):
        request = [{'ok': {'value': {'objNullStruct': {'a': {'required': False}, 'b': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_110(self):
        request = [{'ok': {'value': {'objNullStruct': {'a': {'required': False}, 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_111(self):
        request = [{'ok': {'value': {'objNullStruct': {'a': {'required': False}, 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_112(self):
        request = [{'ok': {'value': {'objNullStruct': {'a': {'required': False}, 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_113(self):
        request = [{'ok': {'value': {'pStrStruct': {'wrap': {'required': False}}}}}, {'fn.test': {'value': {'pStrStruct': {'wrap': {'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrStruct': {'wrap': {'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_114(self):
        request = [{'ok': {'value': {'pStrStruct': {'wrap': {'optional': False, 'required': False}}}}}, {'fn.test': {'value': {'pStrStruct': {'wrap': {'optional': False, 'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrStruct': {'wrap': {'optional': False, 'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_115(self):
        request = [{}, {'fn.test': {'value': {'pStrStruct': {'wrap': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrStruct.wrap.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_116(self):
        request = [{}, {'fn.test': {'value': {'pStrStruct': {'wrap': {'required': False, 'a': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrStruct.wrap.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_117(self):
        request = [{}, {'fn.test': {'value': {'pStrStruct': {'wrap': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_118(self):
        request = [{}, {'fn.test': {'value': {'pStrStruct': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_119(self):
        request = [{}, {'fn.test': {'value': {'pStrStruct': {'wrap': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_120(self):
        request = [{}, {'fn.test': {'value': {'pStrStruct': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_121(self):
        request = [{}, {'fn.test': {'value': {'pStrStruct': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_122(self):
        request = [{}, {'fn.test': {'value': {'pStrStruct': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_123(self):
        request = [{'ok': {'value': {'pStrStruct': {'wrap': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrStruct.wrap.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_124(self):
        request = [{'ok': {'value': {'pStrStruct': {'wrap': {'required': False, 'a': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrStruct.wrap.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_125(self):
        request = [{'ok': {'value': {'pStrStruct': {'wrap': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_126(self):
        request = [{'ok': {'value': {'pStrStruct': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_127(self):
        request = [{'ok': {'value': {'pStrStruct': {'wrap': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_128(self):
        request = [{'ok': {'value': {'pStrStruct': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_129(self):
        request = [{'ok': {'value': {'pStrStruct': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_130(self):
        request = [{'ok': {'value': {'pStrStruct': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_131(self):
        request = [{'ok': {'value': {'pStrNullStruct': {'wrap': None}}}}, {'fn.test': {'value': {'pStrNullStruct': {'wrap': None}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullStruct': {'wrap': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_132(self):
        request = [{'ok': {'value': {'pStrNullStruct': {'wrap': {'required': False}}}}}, {'fn.test': {'value': {'pStrNullStruct': {'wrap': {'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullStruct': {'wrap': {'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_133(self):
        request = [{'ok': {'value': {'pStrNullStruct': {'wrap': {'optional': False, 'required': False}}}}}, {'fn.test': {'value': {'pStrNullStruct': {'wrap': {'optional': False, 'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullStruct': {'wrap': {'optional': False, 'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_134(self):
        request = [{}, {'fn.test': {'value': {'pStrNullStruct': {'wrap': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullStruct.wrap.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_135(self):
        request = [{}, {'fn.test': {'value': {'pStrNullStruct': {'wrap': {'required': False, 'a': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullStruct.wrap.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_136(self):
        request = [{}, {'fn.test': {'value': {'pStrNullStruct': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_137(self):
        request = [{}, {'fn.test': {'value': {'pStrNullStruct': {'wrap': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_138(self):
        request = [{}, {'fn.test': {'value': {'pStrNullStruct': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_139(self):
        request = [{}, {'fn.test': {'value': {'pStrNullStruct': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_140(self):
        request = [{}, {'fn.test': {'value': {'pStrNullStruct': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_141(self):
        request = [{'ok': {'value': {'pStrNullStruct': {'wrap': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullStruct.wrap.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_142(self):
        request = [{'ok': {'value': {'pStrNullStruct': {'wrap': {'required': False, 'a': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullStruct.wrap.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_143(self):
        request = [{'ok': {'value': {'pStrNullStruct': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_144(self):
        request = [{'ok': {'value': {'pStrNullStruct': {'wrap': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_145(self):
        request = [{'ok': {'value': {'pStrNullStruct': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_146(self):
        request = [{'ok': {'value': {'pStrNullStruct': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_147(self):
        request = [{'ok': {'value': {'pStrNullStruct': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_148(self):
        request = [{'ok': {'value': {'pEnumStruct': {'one': {}}}}}, {'fn.test': {'value': {'pEnumStruct': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumStruct': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_149(self):
        request = [{'ok': {'value': {'pEnumStruct': {'two': {'ewrap': {'required': False}}}}}}, {'fn.test': {'value': {'pEnumStruct': {'two': {'ewrap': {'required': False}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumStruct': {'two': {'ewrap': {'required': False}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_150(self):
        request = [{'ok': {'value': {'pEnumStruct': {'two': {'ewrap': {'optional': False, 'required': False}}}}}}, {'fn.test': {'value': {'pEnumStruct': {'two': {'ewrap': {'optional': False, 'required': False}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumStruct': {'two': {'ewrap': {'optional': False, 'required': False}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_151(self):
        request = [{}, {'fn.test': {'value': {'pEnumStruct': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumStruct.two.ewrap.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_152(self):
        request = [{}, {'fn.test': {'value': {'pEnumStruct': {'two': {'ewrap': {'required': False, 'a': False}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumStruct.two.ewrap.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_153(self):
        request = [{}, {'fn.test': {'value': {'pEnumStruct': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_154(self):
        request = [{}, {'fn.test': {'value': {'pEnumStruct': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_155(self):
        request = [{}, {'fn.test': {'value': {'pEnumStruct': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_156(self):
        request = [{}, {'fn.test': {'value': {'pEnumStruct': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_157(self):
        request = [{}, {'fn.test': {'value': {'pEnumStruct': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_158(self):
        request = [{}, {'fn.test': {'value': {'pEnumStruct': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_159(self):
        request = [{'ok': {'value': {'pEnumStruct': {'two': {'ewrap': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumStruct.two.ewrap.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_160(self):
        request = [{'ok': {'value': {'pEnumStruct': {'two': {'ewrap': {'required': False, 'a': False}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumStruct.two.ewrap.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_161(self):
        request = [{'ok': {'value': {'pEnumStruct': {'two': {'ewrap': None}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_162(self):
        request = [{'ok': {'value': {'pEnumStruct': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_163(self):
        request = [{'ok': {'value': {'pEnumStruct': {'two': {'ewrap': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_164(self):
        request = [{'ok': {'value': {'pEnumStruct': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_165(self):
        request = [{'ok': {'value': {'pEnumStruct': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_166(self):
        request = [{'ok': {'value': {'pEnumStruct': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_167(self):
        request = [{'ok': {'value': {'pEnumNullStruct': {'one': {}}}}}, {'fn.test': {'value': {'pEnumNullStruct': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullStruct': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_168(self):
        request = [{'ok': {'value': {'pEnumNullStruct': {'two': {'ewrap': None}}}}}, {'fn.test': {'value': {'pEnumNullStruct': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullStruct': {'two': {'ewrap': None}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_169(self):
        request = [{'ok': {'value': {'pEnumNullStruct': {'two': {'ewrap': {'required': False}}}}}}, {'fn.test': {'value': {'pEnumNullStruct': {'two': {'ewrap': {'required': False}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullStruct': {'two': {'ewrap': {'required': False}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_170(self):
        request = [{'ok': {'value': {'pEnumNullStruct': {'two': {'ewrap': {'optional': False, 'required': False}}}}}}, {'fn.test': {'value': {'pEnumNullStruct': {'two': {'ewrap': {'optional': False, 'required': False}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullStruct': {'two': {'ewrap': {'optional': False, 'required': False}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_171(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullStruct': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullStruct.two.ewrap.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_172(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullStruct': {'two': {'ewrap': {'required': False, 'a': False}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullStruct.two.ewrap.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_173(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullStruct': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_174(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullStruct': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_175(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullStruct': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_176(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullStruct': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_177(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullStruct': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_178(self):
        request = [{'ok': {'value': {'pEnumNullStruct': {'two': {'ewrap': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullStruct.two.ewrap.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_179(self):
        request = [{'ok': {'value': {'pEnumNullStruct': {'two': {'ewrap': {'required': False, 'a': False}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullStruct.two.ewrap.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_180(self):
        request = [{'ok': {'value': {'pEnumNullStruct': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_181(self):
        request = [{'ok': {'value': {'pEnumNullStruct': {'two': {'ewrap': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_182(self):
        request = [{'ok': {'value': {'pEnumNullStruct': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_183(self):
        request = [{'ok': {'value': {'pEnumNullStruct': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_struct_184(self):
        request = [{'ok': {'value': {'pEnumNullStruct': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_0(self):
        request = [{'ok': {'value': {'enum': {'one': {}}}}}, {'fn.test': {'value': {'enum': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'enum': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_1(self):
        request = [{'ok': {'value': {'enum': {'two': {'required': False}}}}}, {'fn.test': {'value': {'enum': {'two': {'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'enum': {'two': {'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_2(self):
        request = [{'ok': {'value': {'enum': {'two': {'optional': False, 'required': False}}}}}, {'fn.test': {'value': {'enum': {'two': {'optional': False, 'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'enum': {'two': {'optional': False, 'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_3(self):
        request = [{}, {'fn.test': {'value': {'enum': {}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.enum', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_4(self):
        request = [{}, {'fn.test': {'value': {'enum': {'one': {}, 'two': {'optional': False, 'required': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.enum', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_5(self):
        request = [{}, {'fn.test': {'value': {'enum': {'a': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.enum.a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_6(self):
        request = [{}, {'fn.test': {'value': {'enum': {'two': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.enum.two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_7(self):
        request = [{}, {'fn.test': {'value': {'enum': {'one': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.enum.one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_8(self):
        request = [{}, {'fn.test': {'value': {'enum': {'one': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.enum.one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_9(self):
        request = [{}, {'fn.test': {'value': {'enum': {'one': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.enum.one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_10(self):
        request = [{}, {'fn.test': {'value': {'enum': {'one': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.enum.one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_11(self):
        request = [{}, {'fn.test': {'value': {'enum': {'one': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.enum.one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_12(self):
        request = [{}, {'fn.test': {'value': {'enum': None}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.enum', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_13(self):
        request = [{}, {'fn.test': {'value': {'enum': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.enum', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_14(self):
        request = [{}, {'fn.test': {'value': {'enum': 0}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.enum', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_15(self):
        request = [{}, {'fn.test': {'value': {'enum': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.enum', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_16(self):
        request = [{}, {'fn.test': {'value': {'enum': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.enum', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_17(self):
        request = [{}, {'fn.test': {'value': {'enum': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.enum', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_18(self):
        request = [{'ok': {'value': {'enum': {}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.enum', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_19(self):
        request = [{'ok': {'value': {'enum': {'one': {}, 'two': {'optional': False, 'required': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.enum', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_20(self):
        request = [{'ok': {'value': {'enum': {'a': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.enum.a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_21(self):
        request = [{'ok': {'value': {'enum': {'two': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.enum.two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_22(self):
        request = [{'ok': {'value': {'enum': {'one': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.enum.one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_23(self):
        request = [{'ok': {'value': {'enum': {'one': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.enum.one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_24(self):
        request = [{'ok': {'value': {'enum': {'one': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.enum.one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_25(self):
        request = [{'ok': {'value': {'enum': {'one': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.enum.one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_26(self):
        request = [{'ok': {'value': {'enum': {'one': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.enum.one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_27(self):
        request = [{'ok': {'value': {'enum': None}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.enum', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_28(self):
        request = [{'ok': {'value': {'enum': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.enum', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_29(self):
        request = [{'ok': {'value': {'enum': 0}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.enum', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_30(self):
        request = [{'ok': {'value': {'enum': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.enum', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_31(self):
        request = [{'ok': {'value': {'enum': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.enum', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_32(self):
        request = [{'ok': {'value': {'enum': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.enum', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_33(self):
        request = [{'ok': {'value': {'nullEnum': None}}}, {'fn.test': {'value': {'nullEnum': None}}}]
        expected_response = [{}, {'ok': {'value': {'nullEnum': None}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_34(self):
        request = [{'ok': {'value': {'nullEnum': {'one': {}}}}}, {'fn.test': {'value': {'nullEnum': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'nullEnum': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_35(self):
        request = [{'ok': {'value': {'nullEnum': {'two': {'required': False}}}}}, {'fn.test': {'value': {'nullEnum': {'two': {'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'nullEnum': {'two': {'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_36(self):
        request = [{'ok': {'value': {'nullEnum': {'two': {'optional': False, 'required': False}}}}}, {'fn.test': {'value': {'nullEnum': {'two': {'optional': False, 'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'nullEnum': {'two': {'optional': False, 'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_37(self):
        request = [{}, {'fn.test': {'value': {'nullEnum': {}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullEnum', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_38(self):
        request = [{}, {'fn.test': {'value': {'nullEnum': {'one': {}, 'two': {'optional': False, 'required': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullEnum', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_39(self):
        request = [{}, {'fn.test': {'value': {'nullEnum': {'a': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullEnum.a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_40(self):
        request = [{}, {'fn.test': {'value': {'nullEnum': {'two': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullEnum.two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_41(self):
        request = [{}, {'fn.test': {'value': {'nullEnum': {'one': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullEnum.one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_42(self):
        request = [{}, {'fn.test': {'value': {'nullEnum': {'one': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullEnum.one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_43(self):
        request = [{}, {'fn.test': {'value': {'nullEnum': {'one': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullEnum.one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_44(self):
        request = [{}, {'fn.test': {'value': {'nullEnum': {'one': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullEnum.one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_45(self):
        request = [{}, {'fn.test': {'value': {'nullEnum': {'one': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullEnum.one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_46(self):
        request = [{}, {'fn.test': {'value': {'nullEnum': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullEnum', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_47(self):
        request = [{}, {'fn.test': {'value': {'nullEnum': 0}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullEnum', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_48(self):
        request = [{}, {'fn.test': {'value': {'nullEnum': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullEnum', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_49(self):
        request = [{}, {'fn.test': {'value': {'nullEnum': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullEnum', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_50(self):
        request = [{}, {'fn.test': {'value': {'nullEnum': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullEnum', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_51(self):
        request = [{'ok': {'value': {'nullEnum': {}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullEnum', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_52(self):
        request = [{'ok': {'value': {'nullEnum': {'one': {}, 'two': {'optional': False, 'required': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullEnum', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_53(self):
        request = [{'ok': {'value': {'nullEnum': {'a': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullEnum.a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_54(self):
        request = [{'ok': {'value': {'nullEnum': {'two': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullEnum.two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_55(self):
        request = [{'ok': {'value': {'nullEnum': {'one': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullEnum.one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_56(self):
        request = [{'ok': {'value': {'nullEnum': {'one': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullEnum.one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_57(self):
        request = [{'ok': {'value': {'nullEnum': {'one': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullEnum.one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_58(self):
        request = [{'ok': {'value': {'nullEnum': {'one': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullEnum.one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_59(self):
        request = [{'ok': {'value': {'nullEnum': {'one': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullEnum.one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_60(self):
        request = [{'ok': {'value': {'nullEnum': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullEnum', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_61(self):
        request = [{'ok': {'value': {'nullEnum': 0}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullEnum', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_62(self):
        request = [{'ok': {'value': {'nullEnum': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullEnum', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_63(self):
        request = [{'ok': {'value': {'nullEnum': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullEnum', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_64(self):
        request = [{'ok': {'value': {'nullEnum': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullEnum', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_65(self):
        request = [{'ok': {'value': {'arrEnum': []}}}, {'fn.test': {'value': {'arrEnum': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrEnum': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_66(self):
        request = [{'ok': {'value': {'arrEnum': [{'one': {}}]}}}, {'fn.test': {'value': {'arrEnum': [{'one': {}}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrEnum': [{'one': {}}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_67(self):
        request = [{'ok': {'value': {'arrEnum': [{'two': {'required': False}}]}}}, {'fn.test': {'value': {'arrEnum': [{'two': {'required': False}}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrEnum': [{'two': {'required': False}}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_68(self):
        request = [{'ok': {'value': {'arrEnum': [{'two': {'optional': False, 'required': False}}]}}}, {'fn.test': {'value': {'arrEnum': [{'two': {'optional': False, 'required': False}}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrEnum': [{'two': {'optional': False, 'required': False}}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_69(self):
        request = [{'ok': {'value': {'arrEnum': [{'one': {}}, {'two': {'required': False}}, {'two': {'optional': False, 'required': False}}]}}}, {'fn.test': {'value': {'arrEnum': [{'one': {}}, {'two': {'required': False}}, {'two': {'optional': False, 'required': False}}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrEnum': [{'one': {}}, {'two': {'required': False}}, {'two': {'optional': False, 'required': False}}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_70(self):
        request = [{}, {'fn.test': {'value': {'arrEnum': [{'one': {}}, {}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrEnum[1]', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_71(self):
        request = [{}, {'fn.test': {'value': {'arrEnum': [{'one': {}}, {'one': {}, 'two': {'optional': False, 'required': False}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrEnum[1]', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_72(self):
        request = [{}, {'fn.test': {'value': {'arrEnum': [{'one': {}}, {'a': {}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrEnum[1].a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_73(self):
        request = [{}, {'fn.test': {'value': {'arrEnum': [{'one': {}}, {'two': {}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrEnum[1].two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_74(self):
        request = [{}, {'fn.test': {'value': {'arrEnum': [{'one': {}}, {'one': False}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_75(self):
        request = [{}, {'fn.test': {'value': {'arrEnum': [{'one': {}}, {'one': 0}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_76(self):
        request = [{}, {'fn.test': {'value': {'arrEnum': [{'one': {}}, {'one': 0.1}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_77(self):
        request = [{}, {'fn.test': {'value': {'arrEnum': [{'one': {}}, {'one': ''}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_78(self):
        request = [{}, {'fn.test': {'value': {'arrEnum': [{'one': {}}, {'one': []}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_79(self):
        request = [{}, {'fn.test': {'value': {'arrEnum': [{'one': {}}, None]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_80(self):
        request = [{}, {'fn.test': {'value': {'arrEnum': [{'one': {}}, False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_81(self):
        request = [{}, {'fn.test': {'value': {'arrEnum': [{'one': {}}, 0]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_82(self):
        request = [{}, {'fn.test': {'value': {'arrEnum': [{'one': {}}, 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_83(self):
        request = [{}, {'fn.test': {'value': {'arrEnum': [{'one': {}}, '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_84(self):
        request = [{}, {'fn.test': {'value': {'arrEnum': [{'one': {}}, []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_85(self):
        request = [{'ok': {'value': {'arrEnum': [{'one': {}}, {}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrEnum[1]', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_86(self):
        request = [{'ok': {'value': {'arrEnum': [{'one': {}}, {'one': {}, 'two': {'optional': False, 'required': False}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrEnum[1]', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_87(self):
        request = [{'ok': {'value': {'arrEnum': [{'one': {}}, {'a': {}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrEnum[1].a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_88(self):
        request = [{'ok': {'value': {'arrEnum': [{'one': {}}, {'two': {}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrEnum[1].two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_89(self):
        request = [{'ok': {'value': {'arrEnum': [{'one': {}}, {'one': False}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_90(self):
        request = [{'ok': {'value': {'arrEnum': [{'one': {}}, {'one': 0}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_91(self):
        request = [{'ok': {'value': {'arrEnum': [{'one': {}}, {'one': 0.1}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_92(self):
        request = [{'ok': {'value': {'arrEnum': [{'one': {}}, {'one': ''}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_93(self):
        request = [{'ok': {'value': {'arrEnum': [{'one': {}}, {'one': []}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_94(self):
        request = [{'ok': {'value': {'arrEnum': [{'one': {}}, None]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_95(self):
        request = [{'ok': {'value': {'arrEnum': [{'one': {}}, False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_96(self):
        request = [{'ok': {'value': {'arrEnum': [{'one': {}}, 0]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_97(self):
        request = [{'ok': {'value': {'arrEnum': [{'one': {}}, 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_98(self):
        request = [{'ok': {'value': {'arrEnum': [{'one': {}}, '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_99(self):
        request = [{'ok': {'value': {'arrEnum': [{'one': {}}, []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_100(self):
        request = [{'ok': {'value': {'arrNullEnum': []}}}, {'fn.test': {'value': {'arrNullEnum': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullEnum': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_101(self):
        request = [{'ok': {'value': {'arrNullEnum': [None]}}}, {'fn.test': {'value': {'arrNullEnum': [None]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullEnum': [None]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_102(self):
        request = [{'ok': {'value': {'arrNullEnum': [{'one': {}}]}}}, {'fn.test': {'value': {'arrNullEnum': [{'one': {}}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullEnum': [{'one': {}}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_103(self):
        request = [{'ok': {'value': {'arrNullEnum': [{'two': {'required': False}}]}}}, {'fn.test': {'value': {'arrNullEnum': [{'two': {'required': False}}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullEnum': [{'two': {'required': False}}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_104(self):
        request = [{'ok': {'value': {'arrNullEnum': [{'two': {'optional': False, 'required': False}}]}}}, {'fn.test': {'value': {'arrNullEnum': [{'two': {'optional': False, 'required': False}}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullEnum': [{'two': {'optional': False, 'required': False}}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_105(self):
        request = [{'ok': {'value': {'arrNullEnum': [None, {'one': {}}, {'two': {'required': False}}, {'two': {'optional': False, 'required': False}}]}}}, {'fn.test': {'value': {'arrNullEnum': [None, {'one': {}}, {'two': {'required': False}}, {'two': {'optional': False, 'required': False}}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullEnum': [None, {'one': {}}, {'two': {'required': False}}, {'two': {'optional': False, 'required': False}}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_106(self):
        request = [{}, {'fn.test': {'value': {'arrNullEnum': [{'one': {}}, {}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullEnum[1]', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_107(self):
        request = [{}, {'fn.test': {'value': {'arrNullEnum': [{'one': {}}, {'one': {}, 'two': {'optional': False, 'required': False}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullEnum[1]', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_108(self):
        request = [{}, {'fn.test': {'value': {'arrNullEnum': [{'one': {}}, {'a': {}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullEnum[1].a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_109(self):
        request = [{}, {'fn.test': {'value': {'arrNullEnum': [{'one': {}}, {'two': {}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullEnum[1].two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_110(self):
        request = [{}, {'fn.test': {'value': {'arrNullEnum': [{'one': {}}, {'one': False}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_111(self):
        request = [{}, {'fn.test': {'value': {'arrNullEnum': [{'one': {}}, {'one': 0}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_112(self):
        request = [{}, {'fn.test': {'value': {'arrNullEnum': [{'one': {}}, {'one': 0.1}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_113(self):
        request = [{}, {'fn.test': {'value': {'arrNullEnum': [{'one': {}}, {'one': ''}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_114(self):
        request = [{}, {'fn.test': {'value': {'arrNullEnum': [{'one': {}}, {'one': []}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_115(self):
        request = [{}, {'fn.test': {'value': {'arrNullEnum': [{'one': {}}, False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_116(self):
        request = [{}, {'fn.test': {'value': {'arrNullEnum': [{'one': {}}, 0]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_117(self):
        request = [{}, {'fn.test': {'value': {'arrNullEnum': [{'one': {}}, 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_118(self):
        request = [{}, {'fn.test': {'value': {'arrNullEnum': [{'one': {}}, '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_119(self):
        request = [{}, {'fn.test': {'value': {'arrNullEnum': [{'one': {}}, []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_120(self):
        request = [{'ok': {'value': {'arrNullEnum': [{'one': {}}, {}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullEnum[1]', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_121(self):
        request = [{'ok': {'value': {'arrNullEnum': [{'one': {}}, {'one': {}, 'two': {'optional': False, 'required': False}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullEnum[1]', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_122(self):
        request = [{'ok': {'value': {'arrNullEnum': [{'one': {}}, {'a': {}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullEnum[1].a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_123(self):
        request = [{'ok': {'value': {'arrNullEnum': [{'one': {}}, {'two': {}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullEnum[1].two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_124(self):
        request = [{'ok': {'value': {'arrNullEnum': [{'one': {}}, {'one': False}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_125(self):
        request = [{'ok': {'value': {'arrNullEnum': [{'one': {}}, {'one': 0}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_126(self):
        request = [{'ok': {'value': {'arrNullEnum': [{'one': {}}, {'one': 0.1}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_127(self):
        request = [{'ok': {'value': {'arrNullEnum': [{'one': {}}, {'one': ''}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_128(self):
        request = [{'ok': {'value': {'arrNullEnum': [{'one': {}}, {'one': []}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_129(self):
        request = [{'ok': {'value': {'arrNullEnum': [{'one': {}}, False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_130(self):
        request = [{'ok': {'value': {'arrNullEnum': [{'one': {}}, 0]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_131(self):
        request = [{'ok': {'value': {'arrNullEnum': [{'one': {}}, 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_132(self):
        request = [{'ok': {'value': {'arrNullEnum': [{'one': {}}, '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_133(self):
        request = [{'ok': {'value': {'arrNullEnum': [{'one': {}}, []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_134(self):
        request = [{'ok': {'value': {'objEnum': {}}}}, {'fn.test': {'value': {'objEnum': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objEnum': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_135(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'one': {}}}}}}, {'fn.test': {'value': {'objEnum': {'a': {'one': {}}}}}}]
        expected_response = [{}, {'ok': {'value': {'objEnum': {'a': {'one': {}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_136(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'two': {'required': False}}}}}}, {'fn.test': {'value': {'objEnum': {'a': {'two': {'required': False}}}}}}]
        expected_response = [{}, {'ok': {'value': {'objEnum': {'a': {'two': {'required': False}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_137(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'two': {'optional': False, 'required': False}}}}}}, {'fn.test': {'value': {'objEnum': {'a': {'two': {'optional': False, 'required': False}}}}}}]
        expected_response = [{}, {'ok': {'value': {'objEnum': {'a': {'two': {'optional': False, 'required': False}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_138(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'two': {'required': False}}, 'c': {'two': {'optional': False, 'required': False}}}}}}, {'fn.test': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'two': {'required': False}}, 'c': {'two': {'optional': False, 'required': False}}}}}}]
        expected_response = [{}, {'ok': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'two': {'required': False}}, 'c': {'two': {'optional': False, 'required': False}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_139(self):
        request = [{}, {'fn.test': {'value': {'objEnum': {'a': {'one': {}}, 'b': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objEnum{b}', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_140(self):
        request = [{}, {'fn.test': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'one': {}, 'two': {'optional': False, 'required': False}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objEnum{b}', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_141(self):
        request = [{}, {'fn.test': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'a': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objEnum{b}.a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_142(self):
        request = [{}, {'fn.test': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'two': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objEnum{b}.two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_143(self):
        request = [{}, {'fn.test': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'one': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_144(self):
        request = [{}, {'fn.test': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'one': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_145(self):
        request = [{}, {'fn.test': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'one': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_146(self):
        request = [{}, {'fn.test': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'one': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_147(self):
        request = [{}, {'fn.test': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'one': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_148(self):
        request = [{}, {'fn.test': {'value': {'objEnum': {'a': {'one': {}}, 'b': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_149(self):
        request = [{}, {'fn.test': {'value': {'objEnum': {'a': {'one': {}}, 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_150(self):
        request = [{}, {'fn.test': {'value': {'objEnum': {'a': {'one': {}}, 'b': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_151(self):
        request = [{}, {'fn.test': {'value': {'objEnum': {'a': {'one': {}}, 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_152(self):
        request = [{}, {'fn.test': {'value': {'objEnum': {'a': {'one': {}}, 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_153(self):
        request = [{}, {'fn.test': {'value': {'objEnum': {'a': {'one': {}}, 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_154(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'one': {}}, 'b': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objEnum{b}', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_155(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'one': {}, 'two': {'optional': False, 'required': False}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objEnum{b}', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_156(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'a': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objEnum{b}.a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_157(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'two': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objEnum{b}.two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_158(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'one': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_159(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'one': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_160(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'one': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_161(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'one': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_162(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'one': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_163(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'one': {}}, 'b': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_164(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'one': {}}, 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_165(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'one': {}}, 'b': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_166(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'one': {}}, 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_167(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'one': {}}, 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_168(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'one': {}}, 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_169(self):
        request = [{'ok': {'value': {'objNullEnum': {}}}}, {'fn.test': {'value': {'objNullEnum': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullEnum': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_170(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': None}}}}, {'fn.test': {'value': {'objNullEnum': {'a': None}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullEnum': {'a': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_171(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': {'one': {}}}}}}, {'fn.test': {'value': {'objNullEnum': {'a': {'one': {}}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullEnum': {'a': {'one': {}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_172(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': {'two': {'required': False}}}}}}, {'fn.test': {'value': {'objNullEnum': {'a': {'two': {'required': False}}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullEnum': {'a': {'two': {'required': False}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_173(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': {'two': {'optional': False, 'required': False}}}}}}, {'fn.test': {'value': {'objNullEnum': {'a': {'two': {'optional': False, 'required': False}}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullEnum': {'a': {'two': {'optional': False, 'required': False}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_174(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': None, 'b': {'one': {}}, 'c': {'two': {'required': False}}, 'd': {'two': {'optional': False, 'required': False}}}}}}, {'fn.test': {'value': {'objNullEnum': {'a': None, 'b': {'one': {}}, 'c': {'two': {'required': False}}, 'd': {'two': {'optional': False, 'required': False}}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullEnum': {'a': None, 'b': {'one': {}}, 'c': {'two': {'required': False}}, 'd': {'two': {'optional': False, 'required': False}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_175(self):
        request = [{}, {'fn.test': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullEnum{b}', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_176(self):
        request = [{}, {'fn.test': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': {'one': {}, 'two': {'optional': False, 'required': False}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullEnum{b}', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_177(self):
        request = [{}, {'fn.test': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': {'a': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullEnum{b}.a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_178(self):
        request = [{}, {'fn.test': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': {'two': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullEnum{b}.two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_179(self):
        request = [{}, {'fn.test': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': {'one': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_180(self):
        request = [{}, {'fn.test': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': {'one': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_181(self):
        request = [{}, {'fn.test': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': {'one': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_182(self):
        request = [{}, {'fn.test': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': {'one': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_183(self):
        request = [{}, {'fn.test': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': {'one': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_184(self):
        request = [{}, {'fn.test': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_185(self):
        request = [{}, {'fn.test': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_186(self):
        request = [{}, {'fn.test': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_187(self):
        request = [{}, {'fn.test': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_188(self):
        request = [{}, {'fn.test': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_189(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullEnum{b}', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_190(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': {'one': {}, 'two': {'optional': False, 'required': False}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullEnum{b}', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_191(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': {'a': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullEnum{b}.a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_192(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': {'two': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullEnum{b}.two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_193(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': {'one': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_194(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': {'one': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_195(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': {'one': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_196(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': {'one': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_197(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': {'one': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_198(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_199(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_200(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_201(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_202(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_203(self):
        request = [{'ok': {'value': {'pStrEnum': {'wrap': {'one': {}}}}}}, {'fn.test': {'value': {'pStrEnum': {'wrap': {'one': {}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrEnum': {'wrap': {'one': {}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_204(self):
        request = [{'ok': {'value': {'pStrEnum': {'wrap': {'two': {'required': False}}}}}}, {'fn.test': {'value': {'pStrEnum': {'wrap': {'two': {'required': False}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrEnum': {'wrap': {'two': {'required': False}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_205(self):
        request = [{'ok': {'value': {'pStrEnum': {'wrap': {'two': {'optional': False, 'required': False}}}}}}, {'fn.test': {'value': {'pStrEnum': {'wrap': {'two': {'optional': False, 'required': False}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrEnum': {'wrap': {'two': {'optional': False, 'required': False}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_206(self):
        request = [{}, {'fn.test': {'value': {'pStrEnum': {'wrap': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrEnum.wrap', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_207(self):
        request = [{}, {'fn.test': {'value': {'pStrEnum': {'wrap': {'one': {}, 'two': {'optional': False, 'required': False}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrEnum.wrap', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_208(self):
        request = [{}, {'fn.test': {'value': {'pStrEnum': {'wrap': {'a': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrEnum.wrap.a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_209(self):
        request = [{}, {'fn.test': {'value': {'pStrEnum': {'wrap': {'two': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrEnum.wrap.two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_210(self):
        request = [{}, {'fn.test': {'value': {'pStrEnum': {'wrap': {'one': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_211(self):
        request = [{}, {'fn.test': {'value': {'pStrEnum': {'wrap': {'one': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_212(self):
        request = [{}, {'fn.test': {'value': {'pStrEnum': {'wrap': {'one': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_213(self):
        request = [{}, {'fn.test': {'value': {'pStrEnum': {'wrap': {'one': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_214(self):
        request = [{}, {'fn.test': {'value': {'pStrEnum': {'wrap': {'one': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_215(self):
        request = [{}, {'fn.test': {'value': {'pStrEnum': {'wrap': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_216(self):
        request = [{}, {'fn.test': {'value': {'pStrEnum': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_217(self):
        request = [{}, {'fn.test': {'value': {'pStrEnum': {'wrap': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_218(self):
        request = [{}, {'fn.test': {'value': {'pStrEnum': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_219(self):
        request = [{}, {'fn.test': {'value': {'pStrEnum': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_220(self):
        request = [{}, {'fn.test': {'value': {'pStrEnum': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_221(self):
        request = [{'ok': {'value': {'pStrEnum': {'wrap': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrEnum.wrap', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_222(self):
        request = [{'ok': {'value': {'pStrEnum': {'wrap': {'one': {}, 'two': {'optional': False, 'required': False}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrEnum.wrap', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_223(self):
        request = [{'ok': {'value': {'pStrEnum': {'wrap': {'a': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrEnum.wrap.a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_224(self):
        request = [{'ok': {'value': {'pStrEnum': {'wrap': {'two': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrEnum.wrap.two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_225(self):
        request = [{'ok': {'value': {'pStrEnum': {'wrap': {'one': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_226(self):
        request = [{'ok': {'value': {'pStrEnum': {'wrap': {'one': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_227(self):
        request = [{'ok': {'value': {'pStrEnum': {'wrap': {'one': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_228(self):
        request = [{'ok': {'value': {'pStrEnum': {'wrap': {'one': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_229(self):
        request = [{'ok': {'value': {'pStrEnum': {'wrap': {'one': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_230(self):
        request = [{'ok': {'value': {'pStrEnum': {'wrap': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_231(self):
        request = [{'ok': {'value': {'pStrEnum': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_232(self):
        request = [{'ok': {'value': {'pStrEnum': {'wrap': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_233(self):
        request = [{'ok': {'value': {'pStrEnum': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_234(self):
        request = [{'ok': {'value': {'pStrEnum': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_235(self):
        request = [{'ok': {'value': {'pStrEnum': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_236(self):
        request = [{'ok': {'value': {'pStrNullEnum': {'wrap': None}}}}, {'fn.test': {'value': {'pStrNullEnum': {'wrap': None}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullEnum': {'wrap': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_237(self):
        request = [{'ok': {'value': {'pStrNullEnum': {'wrap': {'one': {}}}}}}, {'fn.test': {'value': {'pStrNullEnum': {'wrap': {'one': {}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullEnum': {'wrap': {'one': {}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_238(self):
        request = [{'ok': {'value': {'pStrNullEnum': {'wrap': {'two': {'required': False}}}}}}, {'fn.test': {'value': {'pStrNullEnum': {'wrap': {'two': {'required': False}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullEnum': {'wrap': {'two': {'required': False}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_239(self):
        request = [{'ok': {'value': {'pStrNullEnum': {'wrap': {'two': {'optional': False, 'required': False}}}}}}, {'fn.test': {'value': {'pStrNullEnum': {'wrap': {'two': {'optional': False, 'required': False}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullEnum': {'wrap': {'two': {'optional': False, 'required': False}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_240(self):
        request = [{}, {'fn.test': {'value': {'pStrNullEnum': {'wrap': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullEnum.wrap', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_241(self):
        request = [{}, {'fn.test': {'value': {'pStrNullEnum': {'wrap': {'one': {}, 'two': {'optional': False, 'required': False}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullEnum.wrap', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_242(self):
        request = [{}, {'fn.test': {'value': {'pStrNullEnum': {'wrap': {'a': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullEnum.wrap.a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_243(self):
        request = [{}, {'fn.test': {'value': {'pStrNullEnum': {'wrap': {'two': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullEnum.wrap.two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_244(self):
        request = [{}, {'fn.test': {'value': {'pStrNullEnum': {'wrap': {'one': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_245(self):
        request = [{}, {'fn.test': {'value': {'pStrNullEnum': {'wrap': {'one': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_246(self):
        request = [{}, {'fn.test': {'value': {'pStrNullEnum': {'wrap': {'one': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_247(self):
        request = [{}, {'fn.test': {'value': {'pStrNullEnum': {'wrap': {'one': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_248(self):
        request = [{}, {'fn.test': {'value': {'pStrNullEnum': {'wrap': {'one': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_249(self):
        request = [{}, {'fn.test': {'value': {'pStrNullEnum': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_250(self):
        request = [{}, {'fn.test': {'value': {'pStrNullEnum': {'wrap': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_251(self):
        request = [{}, {'fn.test': {'value': {'pStrNullEnum': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_252(self):
        request = [{}, {'fn.test': {'value': {'pStrNullEnum': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_253(self):
        request = [{}, {'fn.test': {'value': {'pStrNullEnum': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_254(self):
        request = [{'ok': {'value': {'pStrNullEnum': {'wrap': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullEnum.wrap', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_255(self):
        request = [{'ok': {'value': {'pStrNullEnum': {'wrap': {'one': {}, 'two': {'optional': False, 'required': False}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullEnum.wrap', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_256(self):
        request = [{'ok': {'value': {'pStrNullEnum': {'wrap': {'a': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullEnum.wrap.a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_257(self):
        request = [{'ok': {'value': {'pStrNullEnum': {'wrap': {'two': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullEnum.wrap.two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_258(self):
        request = [{'ok': {'value': {'pStrNullEnum': {'wrap': {'one': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_259(self):
        request = [{'ok': {'value': {'pStrNullEnum': {'wrap': {'one': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_260(self):
        request = [{'ok': {'value': {'pStrNullEnum': {'wrap': {'one': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_261(self):
        request = [{'ok': {'value': {'pStrNullEnum': {'wrap': {'one': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_262(self):
        request = [{'ok': {'value': {'pStrNullEnum': {'wrap': {'one': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_263(self):
        request = [{'ok': {'value': {'pStrNullEnum': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_264(self):
        request = [{'ok': {'value': {'pStrNullEnum': {'wrap': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_265(self):
        request = [{'ok': {'value': {'pStrNullEnum': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_266(self):
        request = [{'ok': {'value': {'pStrNullEnum': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_267(self):
        request = [{'ok': {'value': {'pStrNullEnum': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_268(self):
        request = [{'ok': {'value': {'pEnumEnum': {'one': {}}}}}, {'fn.test': {'value': {'pEnumEnum': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumEnum': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_269(self):
        request = [{'ok': {'value': {'pEnumEnum': {'two': {'ewrap': {'one': {}}}}}}}, {'fn.test': {'value': {'pEnumEnum': {'two': {'ewrap': {'one': {}}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumEnum': {'two': {'ewrap': {'one': {}}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_270(self):
        request = [{'ok': {'value': {'pEnumEnum': {'two': {'ewrap': {'two': {'required': False}}}}}}}, {'fn.test': {'value': {'pEnumEnum': {'two': {'ewrap': {'two': {'required': False}}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumEnum': {'two': {'ewrap': {'two': {'required': False}}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_271(self):
        request = [{'ok': {'value': {'pEnumEnum': {'two': {'ewrap': {'two': {'optional': False, 'required': False}}}}}}}, {'fn.test': {'value': {'pEnumEnum': {'two': {'ewrap': {'two': {'optional': False, 'required': False}}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumEnum': {'two': {'ewrap': {'two': {'optional': False, 'required': False}}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_272(self):
        request = [{}, {'fn.test': {'value': {'pEnumEnum': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumEnum.two.ewrap', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_273(self):
        request = [{}, {'fn.test': {'value': {'pEnumEnum': {'two': {'ewrap': {'one': {}, 'two': {'optional': False, 'required': False}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumEnum.two.ewrap', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_274(self):
        request = [{}, {'fn.test': {'value': {'pEnumEnum': {'two': {'ewrap': {'a': {}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumEnum.two.ewrap.a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_275(self):
        request = [{}, {'fn.test': {'value': {'pEnumEnum': {'two': {'ewrap': {'two': {}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumEnum.two.ewrap.two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_276(self):
        request = [{}, {'fn.test': {'value': {'pEnumEnum': {'two': {'ewrap': {'one': False}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_277(self):
        request = [{}, {'fn.test': {'value': {'pEnumEnum': {'two': {'ewrap': {'one': 0}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_278(self):
        request = [{}, {'fn.test': {'value': {'pEnumEnum': {'two': {'ewrap': {'one': 0.1}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_279(self):
        request = [{}, {'fn.test': {'value': {'pEnumEnum': {'two': {'ewrap': {'one': ''}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_280(self):
        request = [{}, {'fn.test': {'value': {'pEnumEnum': {'two': {'ewrap': {'one': []}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_281(self):
        request = [{}, {'fn.test': {'value': {'pEnumEnum': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_282(self):
        request = [{}, {'fn.test': {'value': {'pEnumEnum': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_283(self):
        request = [{}, {'fn.test': {'value': {'pEnumEnum': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_284(self):
        request = [{}, {'fn.test': {'value': {'pEnumEnum': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_285(self):
        request = [{}, {'fn.test': {'value': {'pEnumEnum': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_286(self):
        request = [{}, {'fn.test': {'value': {'pEnumEnum': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_287(self):
        request = [{'ok': {'value': {'pEnumEnum': {'two': {'ewrap': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumEnum.two.ewrap', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_288(self):
        request = [{'ok': {'value': {'pEnumEnum': {'two': {'ewrap': {'one': {}, 'two': {'optional': False, 'required': False}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumEnum.two.ewrap', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_289(self):
        request = [{'ok': {'value': {'pEnumEnum': {'two': {'ewrap': {'a': {}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumEnum.two.ewrap.a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_290(self):
        request = [{'ok': {'value': {'pEnumEnum': {'two': {'ewrap': {'two': {}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumEnum.two.ewrap.two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_291(self):
        request = [{'ok': {'value': {'pEnumEnum': {'two': {'ewrap': {'one': False}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_292(self):
        request = [{'ok': {'value': {'pEnumEnum': {'two': {'ewrap': {'one': 0}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_293(self):
        request = [{'ok': {'value': {'pEnumEnum': {'two': {'ewrap': {'one': 0.1}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_294(self):
        request = [{'ok': {'value': {'pEnumEnum': {'two': {'ewrap': {'one': ''}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_295(self):
        request = [{'ok': {'value': {'pEnumEnum': {'two': {'ewrap': {'one': []}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_296(self):
        request = [{'ok': {'value': {'pEnumEnum': {'two': {'ewrap': None}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_297(self):
        request = [{'ok': {'value': {'pEnumEnum': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_298(self):
        request = [{'ok': {'value': {'pEnumEnum': {'two': {'ewrap': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_299(self):
        request = [{'ok': {'value': {'pEnumEnum': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_300(self):
        request = [{'ok': {'value': {'pEnumEnum': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_301(self):
        request = [{'ok': {'value': {'pEnumEnum': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_302(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'one': {}}}}}, {'fn.test': {'value': {'pEnumNullEnum': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullEnum': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_303(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': None}}}}}, {'fn.test': {'value': {'pEnumNullEnum': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': None}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_304(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'one': {}}}}}}}, {'fn.test': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'one': {}}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'one': {}}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_305(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'two': {'required': False}}}}}}}, {'fn.test': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'two': {'required': False}}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'two': {'required': False}}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_306(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'two': {'optional': False, 'required': False}}}}}}}, {'fn.test': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'two': {'optional': False, 'required': False}}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'two': {'optional': False, 'required': False}}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_307(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullEnum': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullEnum.two.ewrap', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_308(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'one': {}, 'two': {'optional': False, 'required': False}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullEnum.two.ewrap', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_309(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'a': {}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullEnum.two.ewrap.a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_310(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'two': {}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullEnum.two.ewrap.two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_311(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'one': False}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_312(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'one': 0}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_313(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'one': 0.1}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_314(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'one': ''}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_315(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'one': []}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_316(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullEnum': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_317(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullEnum': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_318(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullEnum': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_319(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullEnum': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_320(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullEnum': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_321(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullEnum.two.ewrap', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_322(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'one': {}, 'two': {'optional': False, 'required': False}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullEnum.two.ewrap', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_323(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'a': {}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullEnum.two.ewrap.a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_324(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'two': {}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullEnum.two.ewrap.two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_325(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'one': False}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_326(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'one': 0}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_327(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'one': 0.1}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_328(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'one': ''}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_329(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'one': []}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_330(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_331(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_332(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_333(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_enum_334(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testFn_0(self):
        request = [{'ok': {'value': {'fn': {'required': False}}}}, {'fn.test': {'value': {'fn': {'required': False}}}}]
        expected_response = [{}, {'ok': {'value': {'fn': {'required': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testFn_1(self):
        request = [{'ok': {'value': {'fn': {'optional': False, 'required': False}}}}, {'fn.test': {'value': {'fn': {'optional': False, 'required': False}}}}]
        expected_response = [{}, {'ok': {'value': {'fn': {'optional': False, 'required': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testFn_2(self):
        request = [{}, {'fn.test': {'value': {'fn': None}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.fn', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testFn_3(self):
        request = [{}, {'fn.test': {'value': {'fn': {}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.fn.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testFn_4(self):
        request = [{}, {'fn.test': {'value': {'fn': {'required': False, 'a': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.fn.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testFn_5(self):
        request = [{}, {'fn.test': {'value': {'fn': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.fn', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testFn_6(self):
        request = [{}, {'fn.test': {'value': {'fn': 0}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.fn', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testFn_7(self):
        request = [{}, {'fn.test': {'value': {'fn': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.fn', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testFn_8(self):
        request = [{}, {'fn.test': {'value': {'fn': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.fn', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testFn_9(self):
        request = [{}, {'fn.test': {'value': {'fn': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.fn', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testFn_10(self):
        request = [{'ok': {'value': {'fn': None}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.fn', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testFn_11(self):
        request = [{'ok': {'value': {'fn': {}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.fn.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testFn_12(self):
        request = [{'ok': {'value': {'fn': {'required': False, 'a': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.fn.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testFn_13(self):
        request = [{'ok': {'value': {'fn': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.fn', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testFn_14(self):
        request = [{'ok': {'value': {'fn': 0}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.fn', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testFn_15(self):
        request = [{'ok': {'value': {'fn': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.fn', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testFn_16(self):
        request = [{'ok': {'value': {'fn': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.fn', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testFn_17(self):
        request = [{'ok': {'value': {'fn': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.fn', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullFn_0(self):
        request = [{'ok': {'value': {'nullFn': None}}}, {'fn.test': {'value': {'nullFn': None}}}]
        expected_response = [{}, {'ok': {'value': {'nullFn': None}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullFn_1(self):
        request = [{'ok': {'value': {'nullFn': {'required': False}}}}, {'fn.test': {'value': {'nullFn': {'required': False}}}}]
        expected_response = [{}, {'ok': {'value': {'nullFn': {'required': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullFn_2(self):
        request = [{'ok': {'value': {'nullFn': {'optional': False, 'required': False}}}}, {'fn.test': {'value': {'nullFn': {'optional': False, 'required': False}}}}]
        expected_response = [{}, {'ok': {'value': {'nullFn': {'optional': False, 'required': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullFn_3(self):
        request = [{}, {'fn.test': {'value': {'nullFn': {}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullFn.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullFn_4(self):
        request = [{}, {'fn.test': {'value': {'nullFn': {'required': False, 'a': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullFn.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullFn_5(self):
        request = [{}, {'fn.test': {'value': {'nullFn': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullFn', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullFn_6(self):
        request = [{}, {'fn.test': {'value': {'nullFn': 0}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullFn', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullFn_7(self):
        request = [{}, {'fn.test': {'value': {'nullFn': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullFn', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullFn_8(self):
        request = [{}, {'fn.test': {'value': {'nullFn': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullFn', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullFn_9(self):
        request = [{}, {'fn.test': {'value': {'nullFn': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullFn', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullFn_10(self):
        request = [{'ok': {'value': {'nullFn': {}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullFn.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullFn_11(self):
        request = [{'ok': {'value': {'nullFn': {'required': False, 'a': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullFn.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullFn_12(self):
        request = [{'ok': {'value': {'nullFn': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullFn', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullFn_13(self):
        request = [{'ok': {'value': {'nullFn': 0}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullFn', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullFn_14(self):
        request = [{'ok': {'value': {'nullFn': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullFn', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullFn_15(self):
        request = [{'ok': {'value': {'nullFn': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullFn', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullFn_16(self):
        request = [{'ok': {'value': {'nullFn': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullFn', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayFn_0(self):
        request = [{'ok': {'value': {'arrFn': []}}}, {'fn.test': {'value': {'arrFn': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrFn': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayFn_1(self):
        request = [{'ok': {'value': {'arrFn': [{'required': False}]}}}, {'fn.test': {'value': {'arrFn': [{'required': False}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrFn': [{'required': False}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayFn_2(self):
        request = [{'ok': {'value': {'arrFn': [{'optional': False, 'required': False}]}}}, {'fn.test': {'value': {'arrFn': [{'optional': False, 'required': False}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrFn': [{'optional': False, 'required': False}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayFn_3(self):
        request = [{'ok': {'value': {'arrFn': [{'required': False}, {'optional': False, 'required': False}]}}}, {'fn.test': {'value': {'arrFn': [{'required': False}, {'optional': False, 'required': False}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrFn': [{'required': False}, {'optional': False, 'required': False}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayFn_4(self):
        request = [{}, {'fn.test': {'value': {'arrFn': [{'required': False}, None]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrFn[1]', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayFn_5(self):
        request = [{}, {'fn.test': {'value': {'arrFn': [{'required': False}, {}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrFn[1].required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayFn_6(self):
        request = [{}, {'fn.test': {'value': {'arrFn': [{'required': False}, {'required': False, 'a': False}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrFn[1].a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayFn_7(self):
        request = [{}, {'fn.test': {'value': {'arrFn': [{'required': False}, False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrFn[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayFn_8(self):
        request = [{}, {'fn.test': {'value': {'arrFn': [{'required': False}, 0]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrFn[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayFn_9(self):
        request = [{}, {'fn.test': {'value': {'arrFn': [{'required': False}, 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrFn[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayFn_10(self):
        request = [{}, {'fn.test': {'value': {'arrFn': [{'required': False}, '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrFn[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayFn_11(self):
        request = [{}, {'fn.test': {'value': {'arrFn': [{'required': False}, []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrFn[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayFn_12(self):
        request = [{'ok': {'value': {'arrFn': [{'required': False}, None]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrFn[1]', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayFn_13(self):
        request = [{'ok': {'value': {'arrFn': [{'required': False}, {}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrFn[1].required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayFn_14(self):
        request = [{'ok': {'value': {'arrFn': [{'required': False}, {'required': False, 'a': False}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrFn[1].a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayFn_15(self):
        request = [{'ok': {'value': {'arrFn': [{'required': False}, False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrFn[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayFn_16(self):
        request = [{'ok': {'value': {'arrFn': [{'required': False}, 0]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrFn[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayFn_17(self):
        request = [{'ok': {'value': {'arrFn': [{'required': False}, 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrFn[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayFn_18(self):
        request = [{'ok': {'value': {'arrFn': [{'required': False}, '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrFn[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayFn_19(self):
        request = [{'ok': {'value': {'arrFn': [{'required': False}, []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrFn[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullFn_0(self):
        request = [{'ok': {'value': {'arrNullFn': [None]}}}, {'fn.test': {'value': {'arrNullFn': [None]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullFn': [None]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullFn_1(self):
        request = [{'ok': {'value': {'arrNullFn': []}}}, {'fn.test': {'value': {'arrNullFn': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullFn': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullFn_2(self):
        request = [{'ok': {'value': {'arrNullFn': [{'required': False}]}}}, {'fn.test': {'value': {'arrNullFn': [{'required': False}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullFn': [{'required': False}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullFn_3(self):
        request = [{'ok': {'value': {'arrNullFn': [{'optional': False, 'required': False}]}}}, {'fn.test': {'value': {'arrNullFn': [{'optional': False, 'required': False}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullFn': [{'optional': False, 'required': False}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullFn_4(self):
        request = [{'ok': {'value': {'arrNullFn': [None, {'required': False}, {'optional': False, 'required': False}]}}}, {'fn.test': {'value': {'arrNullFn': [None, {'required': False}, {'optional': False, 'required': False}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullFn': [None, {'required': False}, {'optional': False, 'required': False}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullFn_5(self):
        request = [{}, {'fn.test': {'value': {'arrNullFn': [{'required': False}, {}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullFn[1].required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullFn_6(self):
        request = [{}, {'fn.test': {'value': {'arrNullFn': [{'required': False}, {'required': False, 'a': False}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullFn[1].a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullFn_7(self):
        request = [{}, {'fn.test': {'value': {'arrNullFn': [{'required': False}, False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullFn[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullFn_8(self):
        request = [{}, {'fn.test': {'value': {'arrNullFn': [{'required': False}, 0]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullFn[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullFn_9(self):
        request = [{}, {'fn.test': {'value': {'arrNullFn': [{'required': False}, 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullFn[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullFn_10(self):
        request = [{}, {'fn.test': {'value': {'arrNullFn': [{'required': False}, '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullFn[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullFn_11(self):
        request = [{}, {'fn.test': {'value': {'arrNullFn': [{'required': False}, []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullFn[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullFn_12(self):
        request = [{'ok': {'value': {'arrNullFn': [{'required': False}, {}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullFn[1].required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullFn_13(self):
        request = [{'ok': {'value': {'arrNullFn': [{'required': False}, {'required': False, 'a': False}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullFn[1].a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullFn_14(self):
        request = [{'ok': {'value': {'arrNullFn': [{'required': False}, False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullFn[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullFn_15(self):
        request = [{'ok': {'value': {'arrNullFn': [{'required': False}, 0]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullFn[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullFn_16(self):
        request = [{'ok': {'value': {'arrNullFn': [{'required': False}, 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullFn[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullFn_17(self):
        request = [{'ok': {'value': {'arrNullFn': [{'required': False}, '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullFn[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullFn_18(self):
        request = [{'ok': {'value': {'arrNullFn': [{'required': False}, []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullFn[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectFn_0(self):
        request = [{'ok': {'value': {'objFn': {}}}}, {'fn.test': {'value': {'objFn': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objFn': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectFn_1(self):
        request = [{'ok': {'value': {'objFn': {'a': {'required': False}}}}}, {'fn.test': {'value': {'objFn': {'a': {'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'objFn': {'a': {'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectFn_2(self):
        request = [{'ok': {'value': {'objFn': {'a': {'optional': False, 'required': False}}}}}, {'fn.test': {'value': {'objFn': {'a': {'optional': False, 'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'objFn': {'a': {'optional': False, 'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectFn_3(self):
        request = [{'ok': {'value': {'objFn': {'a': {'required': False}, 'b': {'optional': False, 'required': False}}}}}, {'fn.test': {'value': {'objFn': {'a': {'required': False}, 'b': {'optional': False, 'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'objFn': {'a': {'required': False}, 'b': {'optional': False, 'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectFn_4(self):
        request = [{}, {'fn.test': {'value': {'objFn': {'a': {'required': False}, 'b': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objFn{b}', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectFn_5(self):
        request = [{}, {'fn.test': {'value': {'objFn': {'a': {'required': False}, 'b': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objFn{b}.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectFn_6(self):
        request = [{}, {'fn.test': {'value': {'objFn': {'a': {'required': False}, 'b': {'required': False, 'a': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objFn{b}.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectFn_7(self):
        request = [{}, {'fn.test': {'value': {'objFn': {'a': {'required': False}, 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objFn{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectFn_8(self):
        request = [{}, {'fn.test': {'value': {'objFn': {'a': {'required': False}, 'b': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objFn{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectFn_9(self):
        request = [{}, {'fn.test': {'value': {'objFn': {'a': {'required': False}, 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objFn{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectFn_10(self):
        request = [{}, {'fn.test': {'value': {'objFn': {'a': {'required': False}, 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objFn{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectFn_11(self):
        request = [{}, {'fn.test': {'value': {'objFn': {'a': {'required': False}, 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objFn{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectFn_12(self):
        request = [{'ok': {'value': {'objFn': {'a': {'required': False}, 'b': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objFn{b}', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectFn_13(self):
        request = [{'ok': {'value': {'objFn': {'a': {'required': False}, 'b': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objFn{b}.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectFn_14(self):
        request = [{'ok': {'value': {'objFn': {'a': {'required': False}, 'b': {'required': False, 'a': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objFn{b}.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectFn_15(self):
        request = [{'ok': {'value': {'objFn': {'a': {'required': False}, 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objFn{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectFn_16(self):
        request = [{'ok': {'value': {'objFn': {'a': {'required': False}, 'b': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objFn{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectFn_17(self):
        request = [{'ok': {'value': {'objFn': {'a': {'required': False}, 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objFn{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectFn_18(self):
        request = [{'ok': {'value': {'objFn': {'a': {'required': False}, 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objFn{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectFn_19(self):
        request = [{'ok': {'value': {'objFn': {'a': {'required': False}, 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objFn{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullFn_0(self):
        request = [{'ok': {'value': {'objNullFn': {}}}}, {'fn.test': {'value': {'objNullFn': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullFn': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullFn_1(self):
        request = [{'ok': {'value': {'objNullFn': {'a': None}}}}, {'fn.test': {'value': {'objNullFn': {'a': None}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullFn': {'a': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullFn_2(self):
        request = [{'ok': {'value': {'objNullFn': {'a': {'required': False}}}}}, {'fn.test': {'value': {'objNullFn': {'a': {'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullFn': {'a': {'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullFn_3(self):
        request = [{'ok': {'value': {'objNullFn': {'a': {'optional': False, 'required': False}}}}}, {'fn.test': {'value': {'objNullFn': {'a': {'optional': False, 'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullFn': {'a': {'optional': False, 'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullFn_4(self):
        request = [{'ok': {'value': {'objNullFn': {'a': None, 'b': {'required': False}, 'c': {'optional': False, 'required': False}}}}}, {'fn.test': {'value': {'objNullFn': {'a': None, 'b': {'required': False}, 'c': {'optional': False, 'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullFn': {'a': None, 'b': {'required': False}, 'c': {'optional': False, 'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullFn_5(self):
        request = [{}, {'fn.test': {'value': {'objNullFn': {'a': {'required': False}, 'b': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullFn{b}.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullFn_6(self):
        request = [{}, {'fn.test': {'value': {'objNullFn': {'a': {'required': False}, 'b': {'required': False, 'a': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullFn{b}.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullFn_7(self):
        request = [{}, {'fn.test': {'value': {'objNullFn': {'a': {'required': False}, 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullFn{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullFn_8(self):
        request = [{}, {'fn.test': {'value': {'objNullFn': {'a': {'required': False}, 'b': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullFn{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullFn_9(self):
        request = [{}, {'fn.test': {'value': {'objNullFn': {'a': {'required': False}, 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullFn{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullFn_10(self):
        request = [{}, {'fn.test': {'value': {'objNullFn': {'a': {'required': False}, 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullFn{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullFn_11(self):
        request = [{}, {'fn.test': {'value': {'objNullFn': {'a': {'required': False}, 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullFn{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullFn_12(self):
        request = [{'ok': {'value': {'objNullFn': {'a': {'required': False}, 'b': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullFn{b}.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullFn_13(self):
        request = [{'ok': {'value': {'objNullFn': {'a': {'required': False}, 'b': {'required': False, 'a': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullFn{b}.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullFn_14(self):
        request = [{'ok': {'value': {'objNullFn': {'a': {'required': False}, 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullFn{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullFn_15(self):
        request = [{'ok': {'value': {'objNullFn': {'a': {'required': False}, 'b': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullFn{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullFn_16(self):
        request = [{'ok': {'value': {'objNullFn': {'a': {'required': False}, 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullFn{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullFn_17(self):
        request = [{'ok': {'value': {'objNullFn': {'a': {'required': False}, 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullFn{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullFn_18(self):
        request = [{'ok': {'value': {'objNullFn': {'a': {'required': False}, 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullFn{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructFn_0(self):
        request = [{'ok': {'value': {'pStrFn': {'wrap': {'required': False}}}}}, {'fn.test': {'value': {'pStrFn': {'wrap': {'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrFn': {'wrap': {'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructFn_1(self):
        request = [{'ok': {'value': {'pStrFn': {'wrap': {'optional': False, 'required': False}}}}}, {'fn.test': {'value': {'pStrFn': {'wrap': {'optional': False, 'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrFn': {'wrap': {'optional': False, 'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructFn_2(self):
        request = [{}, {'fn.test': {'value': {'pStrFn': {'wrap': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrFn.wrap', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructFn_3(self):
        request = [{}, {'fn.test': {'value': {'pStrFn': {'wrap': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrFn.wrap.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructFn_4(self):
        request = [{}, {'fn.test': {'value': {'pStrFn': {'wrap': {'required': False, 'a': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrFn.wrap.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructFn_5(self):
        request = [{}, {'fn.test': {'value': {'pStrFn': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructFn_6(self):
        request = [{}, {'fn.test': {'value': {'pStrFn': {'wrap': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructFn_7(self):
        request = [{}, {'fn.test': {'value': {'pStrFn': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructFn_8(self):
        request = [{}, {'fn.test': {'value': {'pStrFn': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructFn_9(self):
        request = [{}, {'fn.test': {'value': {'pStrFn': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructFn_10(self):
        request = [{'ok': {'value': {'pStrFn': {'wrap': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrFn.wrap', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructFn_11(self):
        request = [{'ok': {'value': {'pStrFn': {'wrap': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrFn.wrap.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructFn_12(self):
        request = [{'ok': {'value': {'pStrFn': {'wrap': {'required': False, 'a': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrFn.wrap.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructFn_13(self):
        request = [{'ok': {'value': {'pStrFn': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructFn_14(self):
        request = [{'ok': {'value': {'pStrFn': {'wrap': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructFn_15(self):
        request = [{'ok': {'value': {'pStrFn': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructFn_16(self):
        request = [{'ok': {'value': {'pStrFn': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructFn_17(self):
        request = [{'ok': {'value': {'pStrFn': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullFn_0(self):
        request = [{'ok': {'value': {'pStrNullFn': {'wrap': None}}}}, {'fn.test': {'value': {'pStrNullFn': {'wrap': None}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullFn': {'wrap': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullFn_1(self):
        request = [{'ok': {'value': {'pStrNullFn': {'wrap': {'required': False}}}}}, {'fn.test': {'value': {'pStrNullFn': {'wrap': {'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullFn': {'wrap': {'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullFn_2(self):
        request = [{'ok': {'value': {'pStrNullFn': {'wrap': {'optional': False, 'required': False}}}}}, {'fn.test': {'value': {'pStrNullFn': {'wrap': {'optional': False, 'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullFn': {'wrap': {'optional': False, 'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullFn_3(self):
        request = [{}, {'fn.test': {'value': {'pStrNullFn': {'wrap': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullFn.wrap.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullFn_4(self):
        request = [{}, {'fn.test': {'value': {'pStrNullFn': {'wrap': {'required': False, 'a': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullFn.wrap.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullFn_5(self):
        request = [{}, {'fn.test': {'value': {'pStrNullFn': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullFn_6(self):
        request = [{}, {'fn.test': {'value': {'pStrNullFn': {'wrap': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullFn_7(self):
        request = [{}, {'fn.test': {'value': {'pStrNullFn': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullFn_8(self):
        request = [{}, {'fn.test': {'value': {'pStrNullFn': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullFn_9(self):
        request = [{}, {'fn.test': {'value': {'pStrNullFn': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullFn_10(self):
        request = [{'ok': {'value': {'pStrNullFn': {'wrap': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullFn.wrap.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullFn_11(self):
        request = [{'ok': {'value': {'pStrNullFn': {'wrap': {'required': False, 'a': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullFn.wrap.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullFn_12(self):
        request = [{'ok': {'value': {'pStrNullFn': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullFn_13(self):
        request = [{'ok': {'value': {'pStrNullFn': {'wrap': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullFn_14(self):
        request = [{'ok': {'value': {'pStrNullFn': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullFn_15(self):
        request = [{'ok': {'value': {'pStrNullFn': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullFn_16(self):
        request = [{'ok': {'value': {'pStrNullFn': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumFn_0(self):
        request = [{'ok': {'value': {'pEnumFn': {'one': {}}}}}, {'fn.test': {'value': {'pEnumFn': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumFn': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumFn_1(self):
        request = [{'ok': {'value': {'pEnumFn': {'two': {'ewrap': {'required': False}}}}}}, {'fn.test': {'value': {'pEnumFn': {'two': {'ewrap': {'required': False}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumFn': {'two': {'ewrap': {'required': False}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumFn_2(self):
        request = [{'ok': {'value': {'pEnumFn': {'two': {'ewrap': {'optional': False, 'required': False}}}}}}, {'fn.test': {'value': {'pEnumFn': {'two': {'ewrap': {'optional': False, 'required': False}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumFn': {'two': {'ewrap': {'optional': False, 'required': False}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumFn_3(self):
        request = [{}, {'fn.test': {'value': {'pEnumFn': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumFn.two.ewrap', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumFn_4(self):
        request = [{}, {'fn.test': {'value': {'pEnumFn': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumFn.two.ewrap.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumFn_5(self):
        request = [{}, {'fn.test': {'value': {'pEnumFn': {'two': {'ewrap': {'required': False, 'a': False}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumFn.two.ewrap.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumFn_6(self):
        request = [{}, {'fn.test': {'value': {'pEnumFn': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumFn_7(self):
        request = [{}, {'fn.test': {'value': {'pEnumFn': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumFn_8(self):
        request = [{}, {'fn.test': {'value': {'pEnumFn': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumFn_9(self):
        request = [{}, {'fn.test': {'value': {'pEnumFn': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumFn_10(self):
        request = [{}, {'fn.test': {'value': {'pEnumFn': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumFn_11(self):
        request = [{'ok': {'value': {'pEnumFn': {'two': {'ewrap': None}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumFn.two.ewrap', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumFn_12(self):
        request = [{'ok': {'value': {'pEnumFn': {'two': {'ewrap': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumFn.two.ewrap.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumFn_13(self):
        request = [{'ok': {'value': {'pEnumFn': {'two': {'ewrap': {'required': False, 'a': False}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumFn.two.ewrap.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumFn_14(self):
        request = [{'ok': {'value': {'pEnumFn': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumFn_15(self):
        request = [{'ok': {'value': {'pEnumFn': {'two': {'ewrap': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumFn_16(self):
        request = [{'ok': {'value': {'pEnumFn': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumFn_17(self):
        request = [{'ok': {'value': {'pEnumFn': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumFn_18(self):
        request = [{'ok': {'value': {'pEnumFn': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullFn_0(self):
        request = [{'ok': {'value': {'pEnumNullFn': {'one': {}}}}}, {'fn.test': {'value': {'pEnumNullFn': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullFn': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullFn_1(self):
        request = [{'ok': {'value': {'pEnumNullFn': {'two': {'ewrap': None}}}}}, {'fn.test': {'value': {'pEnumNullFn': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullFn': {'two': {'ewrap': None}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullFn_2(self):
        request = [{'ok': {'value': {'pEnumNullFn': {'two': {'ewrap': {'required': False}}}}}}, {'fn.test': {'value': {'pEnumNullFn': {'two': {'ewrap': {'required': False}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullFn': {'two': {'ewrap': {'required': False}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullFn_3(self):
        request = [{'ok': {'value': {'pEnumNullFn': {'two': {'ewrap': {'optional': False, 'required': False}}}}}}, {'fn.test': {'value': {'pEnumNullFn': {'two': {'ewrap': {'optional': False, 'required': False}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullFn': {'two': {'ewrap': {'optional': False, 'required': False}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullFn_4(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullFn': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullFn.two.ewrap.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullFn_5(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullFn': {'two': {'ewrap': {'required': False, 'a': False}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullFn.two.ewrap.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullFn_6(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullFn': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullFn_7(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullFn': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullFn_8(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullFn': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullFn_9(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullFn': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullFn_10(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullFn': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullFn_11(self):
        request = [{'ok': {'value': {'pEnumNullFn': {'two': {'ewrap': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullFn.two.ewrap.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullFn_12(self):
        request = [{'ok': {'value': {'pEnumNullFn': {'two': {'ewrap': {'required': False, 'a': False}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullFn.two.ewrap.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullFn_13(self):
        request = [{'ok': {'value': {'pEnumNullFn': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullFn_14(self):
        request = [{'ok': {'value': {'pEnumNullFn': {'two': {'ewrap': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullFn_15(self):
        request = [{'ok': {'value': {'pEnumNullFn': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullFn_16(self):
        request = [{'ok': {'value': {'pEnumNullFn': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullFn_17(self):
        request = [{'ok': {'value': {'pEnumNullFn': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Str_0(self):
        request = [{'ok': {'value': {'p2Str': {'wrap': False, 'nest': [0]}}}}, {'fn.test': {'value': {'p2Str': {'wrap': False, 'nest': [0]}}}}]
        expected_response = [{}, {'ok': {'value': {'p2Str': {'wrap': False, 'nest': [0]}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Str_1(self):
        request = [{'ok': {'value': {'p2Str': {'wrap': True, 'nest': [1]}}}}, {'fn.test': {'value': {'p2Str': {'wrap': True, 'nest': [1]}}}}]
        expected_response = [{}, {'ok': {'value': {'p2Str': {'wrap': True, 'nest': [1]}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Str_2(self):
        request = [{}, {'fn.test': {'value': {'p2Str': None}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Str', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Str_3(self):
        request = [{}, {'fn.test': {'value': {'p2Str': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Str', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Str_4(self):
        request = [{}, {'fn.test': {'value': {'p2Str': 0}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Str', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Str_5(self):
        request = [{}, {'fn.test': {'value': {'p2Str': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Str', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Str_6(self):
        request = [{}, {'fn.test': {'value': {'p2Str': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Str', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Str_7(self):
        request = [{}, {'fn.test': {'value': {'p2Str': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Str', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Str_8(self):
        request = [{}, {'fn.test': {'value': {'p2Str': {'wrap': 0, 'nest': [0]}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Str_9(self):
        request = [{}, {'fn.test': {'value': {'p2Str': {'wrap': '', 'nest': [0]}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Str_10(self):
        request = [{}, {'fn.test': {'value': {'p2Str': {'wrap': [], 'nest': [0]}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Str_11(self):
        request = [{}, {'fn.test': {'value': {'p2Str': {'wrap': {}, 'nest': [0]}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Str_12(self):
        request = [{}, {'fn.test': {'value': {'p2Str': {'wrap': False, 'nest': [0, False]}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Str_13(self):
        request = [{}, {'fn.test': {'value': {'p2Str': {'wrap': False, 'nest': [0, 0.1]}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Str_14(self):
        request = [{}, {'fn.test': {'value': {'p2Str': {'wrap': False, 'nest': [0, '']}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Str_15(self):
        request = [{}, {'fn.test': {'value': {'p2Str': {'wrap': False, 'nest': [0, []]}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Str_16(self):
        request = [{}, {'fn.test': {'value': {'p2Str': {'wrap': False, 'nest': [0, {}]}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Str_17(self):
        request = [{'ok': {'value': {'p2Str': None}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Str', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Str_18(self):
        request = [{'ok': {'value': {'p2Str': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Str', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Str_19(self):
        request = [{'ok': {'value': {'p2Str': 0}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Str', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Str_20(self):
        request = [{'ok': {'value': {'p2Str': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Str', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Str_21(self):
        request = [{'ok': {'value': {'p2Str': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Str', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Str_22(self):
        request = [{'ok': {'value': {'p2Str': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Str', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Str_23(self):
        request = [{'ok': {'value': {'p2Str': {'wrap': 0, 'nest': [0]}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Str_24(self):
        request = [{'ok': {'value': {'p2Str': {'wrap': '', 'nest': [0]}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Str_25(self):
        request = [{'ok': {'value': {'p2Str': {'wrap': [], 'nest': [0]}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Str_26(self):
        request = [{'ok': {'value': {'p2Str': {'wrap': {}, 'nest': [0]}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Str_27(self):
        request = [{'ok': {'value': {'p2Str': {'wrap': False, 'nest': [0, False]}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Str_28(self):
        request = [{'ok': {'value': {'p2Str': {'wrap': False, 'nest': [0, 0.1]}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Str_29(self):
        request = [{'ok': {'value': {'p2Str': {'wrap': False, 'nest': [0, '']}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Str_30(self):
        request = [{'ok': {'value': {'p2Str': {'wrap': False, 'nest': [0, []]}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Str_31(self):
        request = [{'ok': {'value': {'p2Str': {'wrap': False, 'nest': [0, {}]}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Str_0(self):
        request = [{'ok': {'value': {'nullP2Str': None}}}, {'fn.test': {'value': {'nullP2Str': None}}}]
        expected_response = [{}, {'ok': {'value': {'nullP2Str': None}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Str_1(self):
        request = [{'ok': {'value': {'nullP2Str': {'wrap': False, 'nest': [0]}}}}, {'fn.test': {'value': {'nullP2Str': {'wrap': False, 'nest': [0]}}}}]
        expected_response = [{}, {'ok': {'value': {'nullP2Str': {'wrap': False, 'nest': [0]}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Str_2(self):
        request = [{'ok': {'value': {'nullP2Str': {'wrap': True, 'nest': [1]}}}}, {'fn.test': {'value': {'nullP2Str': {'wrap': True, 'nest': [1]}}}}]
        expected_response = [{}, {'ok': {'value': {'nullP2Str': {'wrap': True, 'nest': [1]}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Str_3(self):
        request = [{}, {'fn.test': {'value': {'nullP2Str': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Str', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Str_4(self):
        request = [{}, {'fn.test': {'value': {'nullP2Str': 0}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Str', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Str_5(self):
        request = [{}, {'fn.test': {'value': {'nullP2Str': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Str', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Str_6(self):
        request = [{}, {'fn.test': {'value': {'nullP2Str': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Str', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Str_7(self):
        request = [{}, {'fn.test': {'value': {'nullP2Str': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Str', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Str_8(self):
        request = [{}, {'fn.test': {'value': {'nullP2Str': {'wrap': 0, 'nest': [0]}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Str_9(self):
        request = [{}, {'fn.test': {'value': {'nullP2Str': {'wrap': '', 'nest': [0]}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Str_10(self):
        request = [{}, {'fn.test': {'value': {'nullP2Str': {'wrap': [], 'nest': [0]}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Str_11(self):
        request = [{}, {'fn.test': {'value': {'nullP2Str': {'wrap': {}, 'nest': [0]}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Str_12(self):
        request = [{}, {'fn.test': {'value': {'nullP2Str': {'wrap': False, 'nest': [0, False]}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Str_13(self):
        request = [{}, {'fn.test': {'value': {'nullP2Str': {'wrap': False, 'nest': [0, 0.1]}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Str_14(self):
        request = [{}, {'fn.test': {'value': {'nullP2Str': {'wrap': False, 'nest': [0, '']}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Str_15(self):
        request = [{}, {'fn.test': {'value': {'nullP2Str': {'wrap': False, 'nest': [0, []]}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Str_16(self):
        request = [{}, {'fn.test': {'value': {'nullP2Str': {'wrap': False, 'nest': [0, {}]}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Str_17(self):
        request = [{'ok': {'value': {'nullP2Str': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Str', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Str_18(self):
        request = [{'ok': {'value': {'nullP2Str': 0}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Str', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Str_19(self):
        request = [{'ok': {'value': {'nullP2Str': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Str', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Str_20(self):
        request = [{'ok': {'value': {'nullP2Str': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Str', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Str_21(self):
        request = [{'ok': {'value': {'nullP2Str': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Str', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Str_22(self):
        request = [{'ok': {'value': {'nullP2Str': {'wrap': 0, 'nest': [0]}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Str_23(self):
        request = [{'ok': {'value': {'nullP2Str': {'wrap': '', 'nest': [0]}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Str_24(self):
        request = [{'ok': {'value': {'nullP2Str': {'wrap': [], 'nest': [0]}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Str_25(self):
        request = [{'ok': {'value': {'nullP2Str': {'wrap': {}, 'nest': [0]}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Str_26(self):
        request = [{'ok': {'value': {'nullP2Str': {'wrap': False, 'nest': [0, False]}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Str_27(self):
        request = [{'ok': {'value': {'nullP2Str': {'wrap': False, 'nest': [0, 0.1]}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Str_28(self):
        request = [{'ok': {'value': {'nullP2Str': {'wrap': False, 'nest': [0, '']}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Str_29(self):
        request = [{'ok': {'value': {'nullP2Str': {'wrap': False, 'nest': [0, []]}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Str_30(self):
        request = [{'ok': {'value': {'nullP2Str': {'wrap': False, 'nest': [0, {}]}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Str_0(self):
        request = [{'ok': {'value': {'arrP2Str': []}}}, {'fn.test': {'value': {'arrP2Str': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrP2Str': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Str_1(self):
        request = [{'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}]}}}, {'fn.test': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Str_2(self):
        request = [{'ok': {'value': {'arrP2Str': [{'wrap': True, 'nest': [1]}]}}}, {'fn.test': {'value': {'arrP2Str': [{'wrap': True, 'nest': [1]}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrP2Str': [{'wrap': True, 'nest': [1]}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Str_3(self):
        request = [{'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': True, 'nest': [1]}]}}}, {'fn.test': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': True, 'nest': [1]}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': True, 'nest': [1]}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Str_4(self):
        request = [{}, {'fn.test': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, None]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Str[1]', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Str_5(self):
        request = [{}, {'fn.test': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Str_6(self):
        request = [{}, {'fn.test': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, 0]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Str_7(self):
        request = [{}, {'fn.test': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Str_8(self):
        request = [{}, {'fn.test': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Str_9(self):
        request = [{}, {'fn.test': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Str_10(self):
        request = [{}, {'fn.test': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': 0, 'nest': [0]}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Str[1].wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Str_11(self):
        request = [{}, {'fn.test': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': '', 'nest': [0]}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Str[1].wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Str_12(self):
        request = [{}, {'fn.test': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': [], 'nest': [0]}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Str[1].wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Str_13(self):
        request = [{}, {'fn.test': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': {}, 'nest': [0]}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Str[1].wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Str_14(self):
        request = [{}, {'fn.test': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, False]}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Str_15(self):
        request = [{}, {'fn.test': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, 0.1]}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Str_16(self):
        request = [{}, {'fn.test': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, '']}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Str_17(self):
        request = [{}, {'fn.test': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, []]}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Str_18(self):
        request = [{}, {'fn.test': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, {}]}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Str_19(self):
        request = [{'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, None]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Str[1]', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Str_20(self):
        request = [{'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Str_21(self):
        request = [{'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, 0]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Str_22(self):
        request = [{'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Str_23(self):
        request = [{'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Str_24(self):
        request = [{'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Str_25(self):
        request = [{'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': 0, 'nest': [0]}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Str[1].wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Str_26(self):
        request = [{'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': '', 'nest': [0]}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Str[1].wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Str_27(self):
        request = [{'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': [], 'nest': [0]}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Str[1].wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Str_28(self):
        request = [{'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': {}, 'nest': [0]}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Str[1].wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Str_29(self):
        request = [{'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, False]}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Str_30(self):
        request = [{'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, 0.1]}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Str_31(self):
        request = [{'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, '']}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Str_32(self):
        request = [{'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, []]}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Str_33(self):
        request = [{'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, {}]}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Str_0(self):
        request = [{'ok': {'value': {'arrNullP2Str': []}}}, {'fn.test': {'value': {'arrNullP2Str': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullP2Str': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Str_1(self):
        request = [{'ok': {'value': {'arrNullP2Str': [None]}}}, {'fn.test': {'value': {'arrNullP2Str': [None]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullP2Str': [None]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Str_2(self):
        request = [{'ok': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}]}}}, {'fn.test': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Str_3(self):
        request = [{'ok': {'value': {'arrNullP2Str': [{'wrap': True, 'nest': [1]}]}}}, {'fn.test': {'value': {'arrNullP2Str': [{'wrap': True, 'nest': [1]}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullP2Str': [{'wrap': True, 'nest': [1]}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Str_4(self):
        request = [{'ok': {'value': {'arrNullP2Str': [None, {'wrap': False, 'nest': [0]}, {'wrap': True, 'nest': [1]}]}}}, {'fn.test': {'value': {'arrNullP2Str': [None, {'wrap': False, 'nest': [0]}, {'wrap': True, 'nest': [1]}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullP2Str': [None, {'wrap': False, 'nest': [0]}, {'wrap': True, 'nest': [1]}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Str_5(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Str_6(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, 0]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Str_7(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Str_8(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Str_9(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Str_10(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': 0, 'nest': [0]}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Str[1].wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Str_11(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': '', 'nest': [0]}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Str[1].wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Str_12(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': [], 'nest': [0]}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Str[1].wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Str_13(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': {}, 'nest': [0]}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Str[1].wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Str_14(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, False]}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Str_15(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, 0.1]}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Str_16(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, '']}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Str_17(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, []]}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Str_18(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, {}]}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Str_19(self):
        request = [{'ok': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Str_20(self):
        request = [{'ok': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, 0]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Str_21(self):
        request = [{'ok': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Str_22(self):
        request = [{'ok': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Str_23(self):
        request = [{'ok': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Str_24(self):
        request = [{'ok': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': 0, 'nest': [0]}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Str[1].wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Str_25(self):
        request = [{'ok': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': '', 'nest': [0]}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Str[1].wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Str_26(self):
        request = [{'ok': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': [], 'nest': [0]}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Str[1].wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Str_27(self):
        request = [{'ok': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': {}, 'nest': [0]}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Str[1].wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Str_28(self):
        request = [{'ok': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, False]}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Str_29(self):
        request = [{'ok': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, 0.1]}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Str_30(self):
        request = [{'ok': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, '']}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Str_31(self):
        request = [{'ok': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, []]}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Str_32(self):
        request = [{'ok': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, {}]}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Str_0(self):
        request = [{'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}}}}}, {'fn.test': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}}}}}]
        expected_response = [{}, {'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Str_1(self):
        request = [{'ok': {'value': {'objP2Str': {'a': {'wrap': True, 'nest': [1]}}}}}, {'fn.test': {'value': {'objP2Str': {'a': {'wrap': True, 'nest': [1]}}}}}]
        expected_response = [{}, {'ok': {'value': {'objP2Str': {'a': {'wrap': True, 'nest': [1]}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Str_2(self):
        request = [{'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': True, 'nest': [1]}}}}}, {'fn.test': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': True, 'nest': [1]}}}}}]
        expected_response = [{}, {'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': True, 'nest': [1]}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Str_3(self):
        request = [{}, {'fn.test': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Str{b}', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Str_4(self):
        request = [{}, {'fn.test': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Str_5(self):
        request = [{}, {'fn.test': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Str_6(self):
        request = [{}, {'fn.test': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Str_7(self):
        request = [{}, {'fn.test': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Str_8(self):
        request = [{}, {'fn.test': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Str_9(self):
        request = [{}, {'fn.test': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': 0, 'nest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Str{b}.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Str_10(self):
        request = [{}, {'fn.test': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': '', 'nest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Str{b}.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Str_11(self):
        request = [{}, {'fn.test': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': [], 'nest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Str{b}.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Str_12(self):
        request = [{}, {'fn.test': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': {}, 'nest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Str{b}.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Str_13(self):
        request = [{}, {'fn.test': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, False]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Str_14(self):
        request = [{}, {'fn.test': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, 0.1]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Str_15(self):
        request = [{}, {'fn.test': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, '']}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Str_16(self):
        request = [{}, {'fn.test': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, []]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Str_17(self):
        request = [{}, {'fn.test': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, {}]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Str_18(self):
        request = [{'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Str{b}', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Str_19(self):
        request = [{'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Str_20(self):
        request = [{'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Str_21(self):
        request = [{'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Str_22(self):
        request = [{'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Str_23(self):
        request = [{'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Str_24(self):
        request = [{'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': 0, 'nest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Str{b}.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Str_25(self):
        request = [{'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': '', 'nest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Str{b}.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Str_26(self):
        request = [{'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': [], 'nest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Str{b}.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Str_27(self):
        request = [{'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': {}, 'nest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Str{b}.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Str_28(self):
        request = [{'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, False]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Str_29(self):
        request = [{'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, 0.1]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Str_30(self):
        request = [{'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, '']}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Str_31(self):
        request = [{'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, []]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Str_32(self):
        request = [{'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, {}]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Str_0(self):
        request = [{'ok': {'value': {'objNullP2Str': {'a': None}}}}, {'fn.test': {'value': {'objNullP2Str': {'a': None}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullP2Str': {'a': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Str_1(self):
        request = [{'ok': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}}}}}, {'fn.test': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Str_2(self):
        request = [{'ok': {'value': {'objNullP2Str': {'a': {'wrap': True, 'nest': [1]}}}}}, {'fn.test': {'value': {'objNullP2Str': {'a': {'wrap': True, 'nest': [1]}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullP2Str': {'a': {'wrap': True, 'nest': [1]}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Str_3(self):
        request = [{'ok': {'value': {'objNullP2Str': {'a': None, 'b': {'wrap': False, 'nest': [0]}, 'c': {'wrap': True, 'nest': [1]}}}}}, {'fn.test': {'value': {'objNullP2Str': {'a': None, 'b': {'wrap': False, 'nest': [0]}, 'c': {'wrap': True, 'nest': [1]}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullP2Str': {'a': None, 'b': {'wrap': False, 'nest': [0]}, 'c': {'wrap': True, 'nest': [1]}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Str_4(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Str_5(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Str_6(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Str_7(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Str_8(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Str_9(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': 0, 'nest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Str{b}.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Str_10(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': '', 'nest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Str{b}.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Str_11(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': [], 'nest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Str{b}.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Str_12(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': {}, 'nest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Str{b}.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Str_13(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, False]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Str_14(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, 0.1]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Str_15(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, '']}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Str_16(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, []]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Str_17(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, {}]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Str_18(self):
        request = [{'ok': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Str_19(self):
        request = [{'ok': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Str_20(self):
        request = [{'ok': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Str_21(self):
        request = [{'ok': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Str_22(self):
        request = [{'ok': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Str_23(self):
        request = [{'ok': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': 0, 'nest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Str{b}.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Str_24(self):
        request = [{'ok': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': '', 'nest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Str{b}.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Str_25(self):
        request = [{'ok': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': [], 'nest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Str{b}.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Str_26(self):
        request = [{'ok': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': {}, 'nest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Str{b}.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Str_27(self):
        request = [{'ok': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, False]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Str_28(self):
        request = [{'ok': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, 0.1]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Str_29(self):
        request = [{'ok': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, '']}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Str_30(self):
        request = [{'ok': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, []]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Str_31(self):
        request = [{'ok': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, {}]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Str_0(self):
        request = [{'ok': {'value': {'pStrP2Str': {'wrap': {'wrap': False, 'nest': [0]}}}}}, {'fn.test': {'value': {'pStrP2Str': {'wrap': {'wrap': False, 'nest': [0]}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrP2Str': {'wrap': {'wrap': False, 'nest': [0]}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Str_1(self):
        request = [{'ok': {'value': {'pStrP2Str': {'wrap': {'wrap': True, 'nest': [1]}}}}}, {'fn.test': {'value': {'pStrP2Str': {'wrap': {'wrap': True, 'nest': [1]}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrP2Str': {'wrap': {'wrap': True, 'nest': [1]}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Str_2(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Str': {'wrap': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Str.wrap', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Str_3(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Str': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Str_4(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Str': {'wrap': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Str_5(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Str': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Str_6(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Str': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Str_7(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Str': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Str_8(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Str': {'wrap': {'wrap': 0, 'nest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Str.wrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Str_9(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Str': {'wrap': {'wrap': '', 'nest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Str.wrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Str_10(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Str': {'wrap': {'wrap': [], 'nest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Str.wrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Str_11(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Str': {'wrap': {'wrap': {}, 'nest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Str.wrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Str_12(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Str': {'wrap': {'wrap': False, 'nest': [0, False]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Str_13(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Str': {'wrap': {'wrap': False, 'nest': [0, 0.1]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Str_14(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Str': {'wrap': {'wrap': False, 'nest': [0, '']}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Str_15(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Str': {'wrap': {'wrap': False, 'nest': [0, []]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Str_16(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Str': {'wrap': {'wrap': False, 'nest': [0, {}]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Str_17(self):
        request = [{'ok': {'value': {'pStrP2Str': {'wrap': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Str.wrap', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Str_18(self):
        request = [{'ok': {'value': {'pStrP2Str': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Str_19(self):
        request = [{'ok': {'value': {'pStrP2Str': {'wrap': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Str_20(self):
        request = [{'ok': {'value': {'pStrP2Str': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Str_21(self):
        request = [{'ok': {'value': {'pStrP2Str': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Str_22(self):
        request = [{'ok': {'value': {'pStrP2Str': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Str_23(self):
        request = [{'ok': {'value': {'pStrP2Str': {'wrap': {'wrap': 0, 'nest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Str.wrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Str_24(self):
        request = [{'ok': {'value': {'pStrP2Str': {'wrap': {'wrap': '', 'nest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Str.wrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Str_25(self):
        request = [{'ok': {'value': {'pStrP2Str': {'wrap': {'wrap': [], 'nest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Str.wrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Str_26(self):
        request = [{'ok': {'value': {'pStrP2Str': {'wrap': {'wrap': {}, 'nest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Str.wrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Str_27(self):
        request = [{'ok': {'value': {'pStrP2Str': {'wrap': {'wrap': False, 'nest': [0, False]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Str_28(self):
        request = [{'ok': {'value': {'pStrP2Str': {'wrap': {'wrap': False, 'nest': [0, 0.1]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Str_29(self):
        request = [{'ok': {'value': {'pStrP2Str': {'wrap': {'wrap': False, 'nest': [0, '']}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Str_30(self):
        request = [{'ok': {'value': {'pStrP2Str': {'wrap': {'wrap': False, 'nest': [0, []]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Str_31(self):
        request = [{'ok': {'value': {'pStrP2Str': {'wrap': {'wrap': False, 'nest': [0, {}]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Str_0(self):
        request = [{'ok': {'value': {'pStrNullP2Str': {'wrap': None}}}}, {'fn.test': {'value': {'pStrNullP2Str': {'wrap': None}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullP2Str': {'wrap': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Str_1(self):
        request = [{'ok': {'value': {'pStrNullP2Str': {'wrap': {'wrap': False, 'nest': [0]}}}}}, {'fn.test': {'value': {'pStrNullP2Str': {'wrap': {'wrap': False, 'nest': [0]}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullP2Str': {'wrap': {'wrap': False, 'nest': [0]}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Str_2(self):
        request = [{'ok': {'value': {'pStrNullP2Str': {'wrap': {'wrap': True, 'nest': [1]}}}}}, {'fn.test': {'value': {'pStrNullP2Str': {'wrap': {'wrap': True, 'nest': [1]}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullP2Str': {'wrap': {'wrap': True, 'nest': [1]}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Str_3(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Str': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Str_4(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Str': {'wrap': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Str_5(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Str': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Str_6(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Str': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Str_7(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Str': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Str_8(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Str': {'wrap': {'wrap': 0, 'nest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Str.wrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Str_9(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Str': {'wrap': {'wrap': '', 'nest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Str.wrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Str_10(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Str': {'wrap': {'wrap': [], 'nest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Str.wrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Str_11(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Str': {'wrap': {'wrap': {}, 'nest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Str.wrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Str_12(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Str': {'wrap': {'wrap': False, 'nest': [0, False]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Str_13(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Str': {'wrap': {'wrap': False, 'nest': [0, 0.1]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Str_14(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Str': {'wrap': {'wrap': False, 'nest': [0, '']}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Str_15(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Str': {'wrap': {'wrap': False, 'nest': [0, []]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Str_16(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Str': {'wrap': {'wrap': False, 'nest': [0, {}]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Str_17(self):
        request = [{'ok': {'value': {'pStrNullP2Str': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Str_18(self):
        request = [{'ok': {'value': {'pStrNullP2Str': {'wrap': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Str_19(self):
        request = [{'ok': {'value': {'pStrNullP2Str': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Str_20(self):
        request = [{'ok': {'value': {'pStrNullP2Str': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Str_21(self):
        request = [{'ok': {'value': {'pStrNullP2Str': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Str_22(self):
        request = [{'ok': {'value': {'pStrNullP2Str': {'wrap': {'wrap': 0, 'nest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Str.wrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Str_23(self):
        request = [{'ok': {'value': {'pStrNullP2Str': {'wrap': {'wrap': '', 'nest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Str.wrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Str_24(self):
        request = [{'ok': {'value': {'pStrNullP2Str': {'wrap': {'wrap': [], 'nest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Str.wrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Str_25(self):
        request = [{'ok': {'value': {'pStrNullP2Str': {'wrap': {'wrap': {}, 'nest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Str.wrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Str_26(self):
        request = [{'ok': {'value': {'pStrNullP2Str': {'wrap': {'wrap': False, 'nest': [0, False]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Str_27(self):
        request = [{'ok': {'value': {'pStrNullP2Str': {'wrap': {'wrap': False, 'nest': [0, 0.1]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Str_28(self):
        request = [{'ok': {'value': {'pStrNullP2Str': {'wrap': {'wrap': False, 'nest': [0, '']}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Str_29(self):
        request = [{'ok': {'value': {'pStrNullP2Str': {'wrap': {'wrap': False, 'nest': [0, []]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Str_30(self):
        request = [{'ok': {'value': {'pStrNullP2Str': {'wrap': {'wrap': False, 'nest': [0, {}]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Str_0(self):
        request = [{'ok': {'value': {'pEnumP2Str': {'one': {}}}}}, {'fn.test': {'value': {'pEnumP2Str': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumP2Str': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Str_1(self):
        request = [{'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0]}}}}}}, {'fn.test': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0]}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0]}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Str_2(self):
        request = [{'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': True, 'nest': [1]}}}}}}, {'fn.test': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': True, 'nest': [1]}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': True, 'nest': [1]}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Str_3(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Str': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Str.two.ewrap', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Str_4(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Str': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Str_5(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Str': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Str_6(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Str': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Str_7(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Str': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Str_8(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Str': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Str_9(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': 0, 'nest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Str.two.ewrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Str_10(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': '', 'nest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Str.two.ewrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Str_11(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': [], 'nest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Str.two.ewrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Str_12(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': {}, 'nest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Str.two.ewrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Str_13(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, False]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Str_14(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, 0.1]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Str_15(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, '']}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Str_16(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, []]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Str_17(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, {}]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Str_18(self):
        request = [{'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': None}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Str.two.ewrap', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Str_19(self):
        request = [{'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Str_20(self):
        request = [{'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Str_21(self):
        request = [{'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Str_22(self):
        request = [{'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Str_23(self):
        request = [{'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Str_24(self):
        request = [{'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': 0, 'nest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Str.two.ewrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Str_25(self):
        request = [{'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': '', 'nest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Str.two.ewrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Str_26(self):
        request = [{'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': [], 'nest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Str.two.ewrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Str_27(self):
        request = [{'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': {}, 'nest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Str.two.ewrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Str_28(self):
        request = [{'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, False]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Str_29(self):
        request = [{'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, 0.1]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Str_30(self):
        request = [{'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, '']}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Str_31(self):
        request = [{'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, []]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Str_32(self):
        request = [{'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, {}]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Str_0(self):
        request = [{'ok': {'value': {'pEnumNullP2Str': {'one': {}}}}}, {'fn.test': {'value': {'pEnumNullP2Str': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullP2Str': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Str_1(self):
        request = [{'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': None}}}}}, {'fn.test': {'value': {'pEnumNullP2Str': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': None}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Str_2(self):
        request = [{'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0]}}}}}}, {'fn.test': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0]}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0]}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Str_3(self):
        request = [{'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': True, 'nest': [1]}}}}}}, {'fn.test': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': True, 'nest': [1]}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': True, 'nest': [1]}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Str_4(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Str': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Str_5(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Str': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Str_6(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Str': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Str_7(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Str': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Str_8(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Str': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Str_9(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': 0, 'nest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Str.two.ewrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Str_10(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': '', 'nest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Str.two.ewrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Str_11(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': [], 'nest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Str.two.ewrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Str_12(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': {}, 'nest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Str.two.ewrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Str_13(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, False]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Str_14(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, 0.1]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Str_15(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, '']}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Str_16(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, []]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Str_17(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, {}]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Str_18(self):
        request = [{'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Str_19(self):
        request = [{'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Str_20(self):
        request = [{'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Str_21(self):
        request = [{'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Str_22(self):
        request = [{'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Str_23(self):
        request = [{'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': 0, 'nest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Str.two.ewrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Str_24(self):
        request = [{'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': '', 'nest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Str.two.ewrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Str_25(self):
        request = [{'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': [], 'nest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Str.two.ewrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Str_26(self):
        request = [{'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': {}, 'nest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Str.two.ewrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Str_27(self):
        request = [{'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, False]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Str_28(self):
        request = [{'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, 0.1]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Str_29(self):
        request = [{'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, '']}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Str_30(self):
        request = [{'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, []]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Str_31(self):
        request = [{'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, {}]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Enum_0(self):
        request = [{'ok': {'value': {'p2Enum': {'two': {'ewrap': False, 'enest': [0]}}}}}, {'fn.test': {'value': {'p2Enum': {'two': {'ewrap': False, 'enest': [0]}}}}}]
        expected_response = [{}, {'ok': {'value': {'p2Enum': {'two': {'ewrap': False, 'enest': [0]}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Enum_1(self):
        request = [{'ok': {'value': {'p2Enum': {'two': {'ewrap': True, 'enest': [1]}}}}}, {'fn.test': {'value': {'p2Enum': {'two': {'ewrap': True, 'enest': [1]}}}}}]
        expected_response = [{}, {'ok': {'value': {'p2Enum': {'two': {'ewrap': True, 'enest': [1]}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Enum_2(self):
        request = [{}, {'fn.test': {'value': {'p2Enum': None}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Enum', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Enum_3(self):
        request = [{}, {'fn.test': {'value': {'p2Enum': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Enum', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Enum_4(self):
        request = [{}, {'fn.test': {'value': {'p2Enum': 0}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Enum', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Enum_5(self):
        request = [{}, {'fn.test': {'value': {'p2Enum': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Enum', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Enum_6(self):
        request = [{}, {'fn.test': {'value': {'p2Enum': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Enum', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Enum_7(self):
        request = [{}, {'fn.test': {'value': {'p2Enum': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Enum', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Enum_8(self):
        request = [{}, {'fn.test': {'value': {'p2Enum': {'two': {'ewrap': 0, 'enest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Enum_9(self):
        request = [{}, {'fn.test': {'value': {'p2Enum': {'two': {'ewrap': '', 'enest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Enum_10(self):
        request = [{}, {'fn.test': {'value': {'p2Enum': {'two': {'ewrap': [], 'enest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Enum_11(self):
        request = [{}, {'fn.test': {'value': {'p2Enum': {'two': {'ewrap': {}, 'enest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Enum_12(self):
        request = [{}, {'fn.test': {'value': {'p2Enum': {'two': {'ewrap': False, 'enest': [0, False]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Enum_13(self):
        request = [{}, {'fn.test': {'value': {'p2Enum': {'two': {'ewrap': False, 'enest': [0, 0.1]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Enum_14(self):
        request = [{}, {'fn.test': {'value': {'p2Enum': {'two': {'ewrap': False, 'enest': [0, '']}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Enum_15(self):
        request = [{}, {'fn.test': {'value': {'p2Enum': {'two': {'ewrap': False, 'enest': [0, []]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Enum_16(self):
        request = [{}, {'fn.test': {'value': {'p2Enum': {'two': {'ewrap': False, 'enest': [0, {}]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Enum_17(self):
        request = [{'ok': {'value': {'p2Enum': None}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Enum', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Enum_18(self):
        request = [{'ok': {'value': {'p2Enum': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Enum', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Enum_19(self):
        request = [{'ok': {'value': {'p2Enum': 0}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Enum', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Enum_20(self):
        request = [{'ok': {'value': {'p2Enum': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Enum', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Enum_21(self):
        request = [{'ok': {'value': {'p2Enum': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Enum', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Enum_22(self):
        request = [{'ok': {'value': {'p2Enum': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Enum', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Enum_23(self):
        request = [{'ok': {'value': {'p2Enum': {'two': {'ewrap': 0, 'enest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Enum_24(self):
        request = [{'ok': {'value': {'p2Enum': {'two': {'ewrap': '', 'enest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Enum_25(self):
        request = [{'ok': {'value': {'p2Enum': {'two': {'ewrap': [], 'enest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Enum_26(self):
        request = [{'ok': {'value': {'p2Enum': {'two': {'ewrap': {}, 'enest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Enum_27(self):
        request = [{'ok': {'value': {'p2Enum': {'two': {'ewrap': False, 'enest': [0, False]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Enum_28(self):
        request = [{'ok': {'value': {'p2Enum': {'two': {'ewrap': False, 'enest': [0, 0.1]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Enum_29(self):
        request = [{'ok': {'value': {'p2Enum': {'two': {'ewrap': False, 'enest': [0, '']}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Enum_30(self):
        request = [{'ok': {'value': {'p2Enum': {'two': {'ewrap': False, 'enest': [0, []]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testP2Enum_31(self):
        request = [{'ok': {'value': {'p2Enum': {'two': {'ewrap': False, 'enest': [0, {}]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Enum_0(self):
        request = [{'ok': {'value': {'nullP2Enum': None}}}, {'fn.test': {'value': {'nullP2Enum': None}}}]
        expected_response = [{}, {'ok': {'value': {'nullP2Enum': None}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Enum_1(self):
        request = [{'ok': {'value': {'nullP2Enum': {'two': {'ewrap': False, 'enest': [0]}}}}}, {'fn.test': {'value': {'nullP2Enum': {'two': {'ewrap': False, 'enest': [0]}}}}}]
        expected_response = [{}, {'ok': {'value': {'nullP2Enum': {'two': {'ewrap': False, 'enest': [0]}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Enum_2(self):
        request = [{'ok': {'value': {'nullP2Enum': {'two': {'ewrap': True, 'enest': [1]}}}}}, {'fn.test': {'value': {'nullP2Enum': {'two': {'ewrap': True, 'enest': [1]}}}}}]
        expected_response = [{}, {'ok': {'value': {'nullP2Enum': {'two': {'ewrap': True, 'enest': [1]}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Enum_3(self):
        request = [{}, {'fn.test': {'value': {'nullP2Enum': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Enum', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Enum_4(self):
        request = [{}, {'fn.test': {'value': {'nullP2Enum': 0}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Enum', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Enum_5(self):
        request = [{}, {'fn.test': {'value': {'nullP2Enum': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Enum', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Enum_6(self):
        request = [{}, {'fn.test': {'value': {'nullP2Enum': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Enum', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Enum_7(self):
        request = [{}, {'fn.test': {'value': {'nullP2Enum': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Enum', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Enum_8(self):
        request = [{}, {'fn.test': {'value': {'nullP2Enum': {'two': {'ewrap': 0, 'enest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Enum_9(self):
        request = [{}, {'fn.test': {'value': {'nullP2Enum': {'two': {'ewrap': '', 'enest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Enum_10(self):
        request = [{}, {'fn.test': {'value': {'nullP2Enum': {'two': {'ewrap': [], 'enest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Enum_11(self):
        request = [{}, {'fn.test': {'value': {'nullP2Enum': {'two': {'ewrap': {}, 'enest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Enum_12(self):
        request = [{}, {'fn.test': {'value': {'nullP2Enum': {'two': {'ewrap': False, 'enest': [0, False]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Enum_13(self):
        request = [{}, {'fn.test': {'value': {'nullP2Enum': {'two': {'ewrap': False, 'enest': [0, 0.1]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Enum_14(self):
        request = [{}, {'fn.test': {'value': {'nullP2Enum': {'two': {'ewrap': False, 'enest': [0, '']}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Enum_15(self):
        request = [{}, {'fn.test': {'value': {'nullP2Enum': {'two': {'ewrap': False, 'enest': [0, []]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Enum_16(self):
        request = [{}, {'fn.test': {'value': {'nullP2Enum': {'two': {'ewrap': False, 'enest': [0, {}]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Enum_17(self):
        request = [{'ok': {'value': {'nullP2Enum': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Enum', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Enum_18(self):
        request = [{'ok': {'value': {'nullP2Enum': 0}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Enum', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Enum_19(self):
        request = [{'ok': {'value': {'nullP2Enum': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Enum', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Enum_20(self):
        request = [{'ok': {'value': {'nullP2Enum': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Enum', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Enum_21(self):
        request = [{'ok': {'value': {'nullP2Enum': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Enum', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Enum_22(self):
        request = [{'ok': {'value': {'nullP2Enum': {'two': {'ewrap': 0, 'enest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Enum_23(self):
        request = [{'ok': {'value': {'nullP2Enum': {'two': {'ewrap': '', 'enest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Enum_24(self):
        request = [{'ok': {'value': {'nullP2Enum': {'two': {'ewrap': [], 'enest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Enum_25(self):
        request = [{'ok': {'value': {'nullP2Enum': {'two': {'ewrap': {}, 'enest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Enum_26(self):
        request = [{'ok': {'value': {'nullP2Enum': {'two': {'ewrap': False, 'enest': [0, False]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Enum_27(self):
        request = [{'ok': {'value': {'nullP2Enum': {'two': {'ewrap': False, 'enest': [0, 0.1]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Enum_28(self):
        request = [{'ok': {'value': {'nullP2Enum': {'two': {'ewrap': False, 'enest': [0, '']}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Enum_29(self):
        request = [{'ok': {'value': {'nullP2Enum': {'two': {'ewrap': False, 'enest': [0, []]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testNullableP2Enum_30(self):
        request = [{'ok': {'value': {'nullP2Enum': {'two': {'ewrap': False, 'enest': [0, {}]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Enum_0(self):
        request = [{'ok': {'value': {'arrP2Enum': []}}}, {'fn.test': {'value': {'arrP2Enum': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrP2Enum': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Enum_1(self):
        request = [{'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}]}}}, {'fn.test': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Enum_2(self):
        request = [{'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': True, 'enest': [1]}}]}}}, {'fn.test': {'value': {'arrP2Enum': [{'two': {'ewrap': True, 'enest': [1]}}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': True, 'enest': [1]}}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Enum_3(self):
        request = [{'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': True, 'enest': [1]}}]}}}, {'fn.test': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': True, 'enest': [1]}}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': True, 'enest': [1]}}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Enum_4(self):
        request = [{}, {'fn.test': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, None]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Enum[1]', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Enum_5(self):
        request = [{}, {'fn.test': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Enum_6(self):
        request = [{}, {'fn.test': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, 0]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Enum_7(self):
        request = [{}, {'fn.test': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Enum_8(self):
        request = [{}, {'fn.test': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Enum_9(self):
        request = [{}, {'fn.test': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Enum_10(self):
        request = [{}, {'fn.test': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': 0, 'enest': [0]}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Enum[1].two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Enum_11(self):
        request = [{}, {'fn.test': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': '', 'enest': [0]}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Enum[1].two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Enum_12(self):
        request = [{}, {'fn.test': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': [], 'enest': [0]}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Enum[1].two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Enum_13(self):
        request = [{}, {'fn.test': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': {}, 'enest': [0]}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Enum[1].two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Enum_14(self):
        request = [{}, {'fn.test': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, False]}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Enum_15(self):
        request = [{}, {'fn.test': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, 0.1]}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Enum_16(self):
        request = [{}, {'fn.test': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, '']}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Enum_17(self):
        request = [{}, {'fn.test': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, []]}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Enum_18(self):
        request = [{}, {'fn.test': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, {}]}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Enum_19(self):
        request = [{'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, None]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Enum[1]', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Enum_20(self):
        request = [{'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Enum_21(self):
        request = [{'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, 0]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Enum_22(self):
        request = [{'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Enum_23(self):
        request = [{'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Enum_24(self):
        request = [{'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Enum_25(self):
        request = [{'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': 0, 'enest': [0]}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Enum[1].two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Enum_26(self):
        request = [{'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': '', 'enest': [0]}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Enum[1].two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Enum_27(self):
        request = [{'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': [], 'enest': [0]}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Enum[1].two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Enum_28(self):
        request = [{'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': {}, 'enest': [0]}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Enum[1].two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Enum_29(self):
        request = [{'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, False]}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Enum_30(self):
        request = [{'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, 0.1]}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Enum_31(self):
        request = [{'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, '']}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Enum_32(self):
        request = [{'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, []]}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayP2Enum_33(self):
        request = [{'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, {}]}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Enum_0(self):
        request = [{'ok': {'value': {'arrNullP2Enum': []}}}, {'fn.test': {'value': {'arrNullP2Enum': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullP2Enum': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Enum_1(self):
        request = [{'ok': {'value': {'arrNullP2Enum': [None]}}}, {'fn.test': {'value': {'arrNullP2Enum': [None]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullP2Enum': [None]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Enum_2(self):
        request = [{'ok': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}]}}}, {'fn.test': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Enum_3(self):
        request = [{'ok': {'value': {'arrNullP2Enum': [{'two': {'ewrap': True, 'enest': [1]}}]}}}, {'fn.test': {'value': {'arrNullP2Enum': [{'two': {'ewrap': True, 'enest': [1]}}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullP2Enum': [{'two': {'ewrap': True, 'enest': [1]}}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Enum_4(self):
        request = [{'ok': {'value': {'arrNullP2Enum': [None, {'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': True, 'enest': [1]}}]}}}, {'fn.test': {'value': {'arrNullP2Enum': [None, {'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': True, 'enest': [1]}}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullP2Enum': [None, {'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': True, 'enest': [1]}}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Enum_5(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Enum_6(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, 0]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Enum_7(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Enum_8(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Enum_9(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Enum_10(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': 0, 'enest': [0]}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Enum[1].two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Enum_11(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': '', 'enest': [0]}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Enum[1].two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Enum_12(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': [], 'enest': [0]}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Enum[1].two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Enum_13(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': {}, 'enest': [0]}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Enum[1].two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Enum_14(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, False]}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Enum_15(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, 0.1]}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Enum_16(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, '']}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Enum_17(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, []]}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Enum_18(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, {}]}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Enum_19(self):
        request = [{'ok': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Enum_20(self):
        request = [{'ok': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, 0]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Enum_21(self):
        request = [{'ok': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Enum_22(self):
        request = [{'ok': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Enum_23(self):
        request = [{'ok': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Enum_24(self):
        request = [{'ok': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': 0, 'enest': [0]}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Enum[1].two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Enum_25(self):
        request = [{'ok': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': '', 'enest': [0]}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Enum[1].two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Enum_26(self):
        request = [{'ok': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': [], 'enest': [0]}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Enum[1].two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Enum_27(self):
        request = [{'ok': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': {}, 'enest': [0]}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Enum[1].two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Enum_28(self):
        request = [{'ok': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, False]}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Enum_29(self):
        request = [{'ok': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, 0.1]}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Enum_30(self):
        request = [{'ok': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, '']}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Enum_31(self):
        request = [{'ok': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, []]}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testArrayNullP2Enum_32(self):
        request = [{'ok': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, {}]}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Enum_0(self):
        request = [{'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}}}}}, {'fn.test': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}}}}}]
        expected_response = [{}, {'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Enum_1(self):
        request = [{'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': True, 'enest': [1]}}}}}}, {'fn.test': {'value': {'objP2Enum': {'a': {'two': {'ewrap': True, 'enest': [1]}}}}}}]
        expected_response = [{}, {'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': True, 'enest': [1]}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Enum_2(self):
        request = [{'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': True, 'enest': [1]}}}}}}, {'fn.test': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': True, 'enest': [1]}}}}}}]
        expected_response = [{}, {'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': True, 'enest': [1]}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Enum_3(self):
        request = [{}, {'fn.test': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Enum{b}', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Enum_4(self):
        request = [{}, {'fn.test': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Enum_5(self):
        request = [{}, {'fn.test': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Enum_6(self):
        request = [{}, {'fn.test': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Enum_7(self):
        request = [{}, {'fn.test': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Enum_8(self):
        request = [{}, {'fn.test': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Enum_9(self):
        request = [{}, {'fn.test': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': 0, 'enest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Enum{b}.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Enum_10(self):
        request = [{}, {'fn.test': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': '', 'enest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Enum{b}.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Enum_11(self):
        request = [{}, {'fn.test': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': [], 'enest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Enum{b}.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Enum_12(self):
        request = [{}, {'fn.test': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': {}, 'enest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Enum{b}.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Enum_13(self):
        request = [{}, {'fn.test': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, False]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Enum_14(self):
        request = [{}, {'fn.test': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, 0.1]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Enum_15(self):
        request = [{}, {'fn.test': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, '']}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Enum_16(self):
        request = [{}, {'fn.test': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, []]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Enum_17(self):
        request = [{}, {'fn.test': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, {}]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Enum_18(self):
        request = [{'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Enum{b}', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Enum_19(self):
        request = [{'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Enum_20(self):
        request = [{'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Enum_21(self):
        request = [{'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Enum_22(self):
        request = [{'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Enum_23(self):
        request = [{'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Enum_24(self):
        request = [{'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': 0, 'enest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Enum{b}.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Enum_25(self):
        request = [{'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': '', 'enest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Enum{b}.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Enum_26(self):
        request = [{'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': [], 'enest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Enum{b}.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Enum_27(self):
        request = [{'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': {}, 'enest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Enum{b}.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Enum_28(self):
        request = [{'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, False]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Enum_29(self):
        request = [{'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, 0.1]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Enum_30(self):
        request = [{'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, '']}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Enum_31(self):
        request = [{'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, []]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectP2Enum_32(self):
        request = [{'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, {}]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Enum_0(self):
        request = [{'ok': {'value': {'objNullP2Enum': {'a': None}}}}, {'fn.test': {'value': {'objNullP2Enum': {'a': None}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullP2Enum': {'a': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Enum_1(self):
        request = [{'ok': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}}}}}, {'fn.test': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Enum_2(self):
        request = [{'ok': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': True, 'enest': [1]}}}}}}, {'fn.test': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': True, 'enest': [1]}}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': True, 'enest': [1]}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Enum_3(self):
        request = [{'ok': {'value': {'objNullP2Enum': {'a': None, 'b': {'two': {'ewrap': False, 'enest': [0]}}, 'c': {'two': {'ewrap': True, 'enest': [1]}}}}}}, {'fn.test': {'value': {'objNullP2Enum': {'a': None, 'b': {'two': {'ewrap': False, 'enest': [0]}}, 'c': {'two': {'ewrap': True, 'enest': [1]}}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullP2Enum': {'a': None, 'b': {'two': {'ewrap': False, 'enest': [0]}}, 'c': {'two': {'ewrap': True, 'enest': [1]}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Enum_4(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Enum_5(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Enum_6(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Enum_7(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Enum_8(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Enum_9(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': 0, 'enest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Enum{b}.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Enum_10(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': '', 'enest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Enum{b}.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Enum_11(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': [], 'enest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Enum{b}.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Enum_12(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': {}, 'enest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Enum{b}.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Enum_13(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, False]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Enum_14(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, 0.1]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Enum_15(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, '']}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Enum_16(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, []]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Enum_17(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, {}]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Enum_18(self):
        request = [{'ok': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Enum_19(self):
        request = [{'ok': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Enum_20(self):
        request = [{'ok': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Enum_21(self):
        request = [{'ok': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Enum_22(self):
        request = [{'ok': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Enum_23(self):
        request = [{'ok': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': 0, 'enest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Enum{b}.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Enum_24(self):
        request = [{'ok': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': '', 'enest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Enum{b}.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Enum_25(self):
        request = [{'ok': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': [], 'enest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Enum{b}.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Enum_26(self):
        request = [{'ok': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': {}, 'enest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Enum{b}.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Enum_27(self):
        request = [{'ok': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, False]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Enum_28(self):
        request = [{'ok': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, 0.1]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Enum_29(self):
        request = [{'ok': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, '']}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Enum_30(self):
        request = [{'ok': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, []]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testObjectNullP2Enum_31(self):
        request = [{'ok': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, {}]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Enum_0(self):
        request = [{'ok': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0]}}}}}}, {'fn.test': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0]}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0]}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Enum_1(self):
        request = [{'ok': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': True, 'enest': [1]}}}}}}, {'fn.test': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': True, 'enest': [1]}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': True, 'enest': [1]}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Enum_2(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Enum': {'wrap': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Enum.wrap', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Enum_3(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Enum': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Enum_4(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Enum': {'wrap': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Enum_5(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Enum': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Enum_6(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Enum': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Enum_7(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Enum': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Enum_8(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': 0, 'enest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Enum.wrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Enum_9(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': '', 'enest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Enum.wrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Enum_10(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': [], 'enest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Enum.wrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Enum_11(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': {}, 'enest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Enum.wrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Enum_12(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, False]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Enum_13(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, 0.1]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Enum_14(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, '']}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Enum_15(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, []]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Enum_16(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, {}]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Enum_17(self):
        request = [{'ok': {'value': {'pStrP2Enum': {'wrap': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Enum.wrap', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Enum_18(self):
        request = [{'ok': {'value': {'pStrP2Enum': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Enum_19(self):
        request = [{'ok': {'value': {'pStrP2Enum': {'wrap': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Enum_20(self):
        request = [{'ok': {'value': {'pStrP2Enum': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Enum_21(self):
        request = [{'ok': {'value': {'pStrP2Enum': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Enum_22(self):
        request = [{'ok': {'value': {'pStrP2Enum': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Enum_23(self):
        request = [{'ok': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': 0, 'enest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Enum.wrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Enum_24(self):
        request = [{'ok': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': '', 'enest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Enum.wrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Enum_25(self):
        request = [{'ok': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': [], 'enest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Enum.wrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Enum_26(self):
        request = [{'ok': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': {}, 'enest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Enum.wrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Enum_27(self):
        request = [{'ok': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, False]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Enum_28(self):
        request = [{'ok': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, 0.1]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Enum_29(self):
        request = [{'ok': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, '']}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Enum_30(self):
        request = [{'ok': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, []]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructP2Enum_31(self):
        request = [{'ok': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, {}]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Enum_0(self):
        request = [{'ok': {'value': {'pStrNullP2Enum': {'wrap': None}}}}, {'fn.test': {'value': {'pStrNullP2Enum': {'wrap': None}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullP2Enum': {'wrap': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Enum_1(self):
        request = [{'ok': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0]}}}}}}, {'fn.test': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0]}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0]}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Enum_2(self):
        request = [{'ok': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': True, 'enest': [1]}}}}}}, {'fn.test': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': True, 'enest': [1]}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': True, 'enest': [1]}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Enum_3(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Enum': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Enum_4(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Enum': {'wrap': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Enum_5(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Enum': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Enum_6(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Enum': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Enum_7(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Enum': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Enum_8(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': 0, 'enest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Enum.wrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Enum_9(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': '', 'enest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Enum.wrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Enum_10(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': [], 'enest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Enum.wrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Enum_11(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': {}, 'enest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Enum.wrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Enum_12(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, False]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Enum_13(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, 0.1]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Enum_14(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, '']}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Enum_15(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, []]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Enum_16(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, {}]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Enum_17(self):
        request = [{'ok': {'value': {'pStrNullP2Enum': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Enum_18(self):
        request = [{'ok': {'value': {'pStrNullP2Enum': {'wrap': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Enum_19(self):
        request = [{'ok': {'value': {'pStrNullP2Enum': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Enum_20(self):
        request = [{'ok': {'value': {'pStrNullP2Enum': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Enum_21(self):
        request = [{'ok': {'value': {'pStrNullP2Enum': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Enum_22(self):
        request = [{'ok': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': 0, 'enest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Enum.wrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Enum_23(self):
        request = [{'ok': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': '', 'enest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Enum.wrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Enum_24(self):
        request = [{'ok': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': [], 'enest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Enum.wrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Enum_25(self):
        request = [{'ok': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': {}, 'enest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Enum.wrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Enum_26(self):
        request = [{'ok': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, False]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Enum_27(self):
        request = [{'ok': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, 0.1]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Enum_28(self):
        request = [{'ok': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, '']}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Enum_29(self):
        request = [{'ok': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, []]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPStructNullP2Enum_30(self):
        request = [{'ok': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, {}]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Enum_0(self):
        request = [{'ok': {'value': {'pEnumP2Enum': {'one': {}}}}}, {'fn.test': {'value': {'pEnumP2Enum': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumP2Enum': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Enum_1(self):
        request = [{'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0]}}}}}}}, {'fn.test': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0]}}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0]}}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Enum_2(self):
        request = [{'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': True, 'enest': [1]}}}}}}}, {'fn.test': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': True, 'enest': [1]}}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': True, 'enest': [1]}}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Enum_3(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Enum': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Enum.two.ewrap', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Enum_4(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Enum': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Enum_5(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Enum': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Enum_6(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Enum': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Enum_7(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Enum': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Enum_8(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Enum': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Enum_9(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': 0, 'enest': [0]}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Enum.two.ewrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Enum_10(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': '', 'enest': [0]}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Enum.two.ewrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Enum_11(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': [], 'enest': [0]}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Enum.two.ewrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Enum_12(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': {}, 'enest': [0]}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Enum.two.ewrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Enum_13(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, False]}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Enum_14(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, 0.1]}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Enum_15(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, '']}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Enum_16(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, []]}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Enum_17(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, {}]}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Enum_18(self):
        request = [{'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': None}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Enum.two.ewrap', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Enum_19(self):
        request = [{'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Enum_20(self):
        request = [{'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Enum_21(self):
        request = [{'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Enum_22(self):
        request = [{'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Enum_23(self):
        request = [{'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Enum_24(self):
        request = [{'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': 0, 'enest': [0]}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Enum.two.ewrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Enum_25(self):
        request = [{'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': '', 'enest': [0]}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Enum.two.ewrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Enum_26(self):
        request = [{'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': [], 'enest': [0]}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Enum.two.ewrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Enum_27(self):
        request = [{'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': {}, 'enest': [0]}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Enum.two.ewrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Enum_28(self):
        request = [{'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, False]}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Enum_29(self):
        request = [{'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, 0.1]}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Enum_30(self):
        request = [{'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, '']}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Enum_31(self):
        request = [{'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, []]}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumP2Enum_32(self):
        request = [{'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, {}]}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Enum_0(self):
        request = [{'ok': {'value': {'pEnumNullP2Enum': {'one': {}}}}}, {'fn.test': {'value': {'pEnumNullP2Enum': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullP2Enum': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Enum_1(self):
        request = [{'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': None}}}}}, {'fn.test': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': None}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Enum_2(self):
        request = [{'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0]}}}}}}}, {'fn.test': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0]}}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0]}}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Enum_3(self):
        request = [{'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': True, 'enest': [1]}}}}}}}, {'fn.test': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': True, 'enest': [1]}}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': True, 'enest': [1]}}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Enum_4(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Enum_5(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Enum_6(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Enum_7(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Enum_8(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Enum_9(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': 0, 'enest': [0]}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Enum.two.ewrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Enum_10(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': '', 'enest': [0]}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Enum.two.ewrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Enum_11(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': [], 'enest': [0]}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Enum.two.ewrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Enum_12(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': {}, 'enest': [0]}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Enum.two.ewrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Enum_13(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, False]}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Enum_14(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, 0.1]}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Enum_15(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, '']}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Enum_16(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, []]}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Enum_17(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, {}]}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Enum_18(self):
        request = [{'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Enum_19(self):
        request = [{'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Enum_20(self):
        request = [{'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Enum_21(self):
        request = [{'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Enum_22(self):
        request = [{'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Enum_23(self):
        request = [{'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': 0, 'enest': [0]}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Enum.two.ewrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Enum_24(self):
        request = [{'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': '', 'enest': [0]}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Enum.two.ewrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Enum_25(self):
        request = [{'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': [], 'enest': [0]}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Enum.two.ewrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Enum_26(self):
        request = [{'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': {}, 'enest': [0]}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Enum.two.ewrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Enum_27(self):
        request = [{'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, False]}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Enum_28(self):
        request = [{'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, 0.1]}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Enum_29(self):
        request = [{'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, '']}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Enum_30(self):
        request = [{'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, []]}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPEnumNullP2Enum_31(self):
        request = [{'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, {}]}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPdStr_0(self):
        request = [{'ok': {'value': {'pdStr': {'dwrap': {'wrap': False}}}}}, {'fn.test': {'value': {'pdStr': {'dwrap': {'wrap': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'pdStr': {'dwrap': {'wrap': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testPing_0(self):
        request = [{}, {'fn._ping': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testCallId_0(self):
        request = [{'_id': 'abcd'}, {'fn._ping': {}}]
        expected_response = [{'_id': 'abcd'}, {'ok': {}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testCallId_1(self):
        request = [{'_id': 1234}, {'fn._ping': {}}]
        expected_response = [{'_id': 1234}, {'ok': {}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testUnknownFunction_0(self):
        request = [{}, {'fn.notFound': {}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.notFound', 'reason': {'FunctionUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testErrors_0(self):
        request = [{'result': {'errorExample': {'property': 'a'}}}, {'fn.test': {}}]
        expected_response = [{}, {'errorExample': {'property': 'a'}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testErrors_1(self):
        request = [{'result': {'errorExample': {'wrong': 'a'}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'errorExample.property', 'reason': {'RequiredStructFieldMissing': {}}}, {'path': 'errorExample.wrong', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testErrors_2(self):
        request = [{'result': {'errorUnknown': {'property': 'a'}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'errorUnknown', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testSelectFields_0(self):
        request = [{'_sel': {'struct.ExStruct': ['optional']}, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'ok': {'value': {'struct': {'optional': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testSelectFields_1(self):
        request = [{'_sel': {'struct.ExStruct': ['optional']}, 'ok': {'value': {'struct': {'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'ok': {'value': {'struct': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testSelectFields_2(self):
        request = [{'_sel': {'struct.ExStruct': ['optional', 'required']}, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'ok': {'value': {'struct': {'optional': False, 'required': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testSelectFields_3(self):
        request = [{'_sel': {'struct.ExStruct': ['optional', 'required']}, 'ok': {'value': {'struct': {'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'ok': {'value': {'struct': {'required': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testSelectFields_4(self):
        request = [{'_sel': {'struct.ExStruct': []}, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'ok': {'value': {'struct': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testSelectFields_5(self):
        request = [{'_sel': {'struct.ExStruct': []}, 'ok': {'value': {'struct': {'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'ok': {'value': {'struct': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testSelectFields_6(self):
        request = [{'_sel': {'->.ok': []}, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testSelectFields_7(self):
        request = [{'_sel': {'fn.example': ['optional']}, 'ok': {'value': {'fn': {'required': True, 'optional': True}}}}, {'fn.test': {}}]
        expected_response = [{}, {'ok': {'value': {'fn': {'optional': True}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testSelectFields_8(self):
        request = [{'_sel': {'struct.ExStruct': ['optional']}, 'ok': {'value': {'arrStruct': [{'required': False}, {'optional': False, 'required': False}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'ok': {'value': {'arrStruct': [{}, {'optional': False}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testSelectFields_9(self):
        request = [{'_sel': {'struct.ExStruct': ['optional']}, 'ok': {'value': {'objStruct': {'a': {'required': False}, 'b': {'optional': False, 'required': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'ok': {'value': {'objStruct': {'a': {}, 'b': {'optional': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testSelectFields_10(self):
        request = [{'_sel': False, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_sel}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testSelectFields_11(self):
        request = [{'_sel': 0, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_sel}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testSelectFields_12(self):
        request = [{'_sel': '', 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_sel}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testSelectFields_13(self):
        request = [{'_sel': [], 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_sel}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testSelectFields_14(self):
        request = [{'_sel': {'': []}, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_sel}{}', 'reason': {'SelectHeaderKeyMustBeStructReference': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testSelectFields_15(self):
        request = [{'_sel': {'notStruct': []}, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_sel}{notStruct}', 'reason': {'SelectHeaderKeyMustBeStructReference': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testSelectFields_16(self):
        request = [{'_sel': {'struct.Unknown': []}, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_sel}{struct.Unknown}', 'reason': {'StructNameUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testSelectFields_17(self):
        request = [{'_sel': {'struct.ExStruct': False}, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_sel}{struct.ExStruct}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testSelectFields_18(self):
        request = [{'_sel': {'struct.ExStruct': 0}, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_sel}{struct.ExStruct}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testSelectFields_19(self):
        request = [{'_sel': {'struct.ExStruct': ''}, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_sel}{struct.ExStruct}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testSelectFields_20(self):
        request = [{'_sel': {'struct.ExStruct': {}}, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_sel}{struct.ExStruct}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testSelectFields_21(self):
        request = [{'_sel': {'struct.ExStruct': [False]}, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_sel}{struct.ExStruct}[0]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testSelectFields_22(self):
        request = [{'_sel': {'struct.ExStruct': [0]}, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_sel}{struct.ExStruct}[0]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testSelectFields_23(self):
        request = [{'_sel': {'struct.ExStruct': [[]]}, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_sel}{struct.ExStruct}[0]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testSelectFields_24(self):
        request = [{'_sel': {'struct.ExStruct': [{}]}, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_sel}{struct.ExStruct}[0]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testSelectFields_25(self):
        request = [{'_sel': {'struct.ExStruct': ['unknownField']}, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_sel}{struct.ExStruct}[0]', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testSelectFields_26(self):
        request = [{'_sel': {'struct.ExStruct': ['']}, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_sel}{struct.ExStruct}[0]', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testUnsafe_0(self):
        request = [{'_unsafe': True, 'result': {'ok': {'value': {'bool': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'ok': {'value': {'bool': 0}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testUnsafe_1(self):
        request = [{'_unsafe': True, 'result': {'errorExample': {'wrong': 'a'}}}, {'fn.test': {}}]
        expected_response = [{}, {'errorExample': {'wrong': 'a'}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_testApplicationFailure_0(self):
        request = [{'throw': True}, {'fn.test': {}}]
        expected_response = [{}, {'_errorUnknown': {}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)

    def test_api_0(self):
        request = [{}, {'fn._api': {}}]
        expected_response = [{}, {'ok': {'api': [{'///': [' This is the example schema. It is focussed on outlining type edge cases for use in tests. ', '                                                                                           ', ' As a reminder:                                                                            ', ' - ! means optional field                                                                  ', ' - ? means nullable type                                                                   '], 'info.Example': {}}, {'///': ' A struct value demonstrating all common type permutations. ', 'struct.Value': {'bool!': ['boolean'], 'nullBool!': ['boolean?'], 'arrBool!': ['array', ['boolean']], 'arrNullBool!': ['array', ['boolean?']], 'objBool!': ['object', ['boolean']], 'objNullBool!': ['object', ['boolean?']], 'pStrBool!': ['struct<1>.PStr', ['boolean']], 'pStrNullBool!': ['struct<1>.PStr', ['boolean?']], 'pEnumBool!': ['enum<1>.PEnum', ['boolean']], 'pEnumNullBool!': ['enum<1>.PEnum', ['boolean?']], 'int!': ['integer'], 'nullInt!': ['integer?'], 'arrInt!': ['array', ['integer']], 'arrNullInt!': ['array', ['integer?']], 'objInt!': ['object', ['integer']], 'objNullInt!': ['object', ['integer?']], 'pStrInt!': ['struct<1>.PStr', ['integer']], 'pStrNullInt!': ['struct<1>.PStr', ['integer?']], 'pEnumInt!': ['enum<1>.PEnum', ['integer']], 'pEnumNullInt!': ['enum<1>.PEnum', ['integer?']], 'num!': ['number'], 'nullNum!': ['number?'], 'arrNum!': ['array', ['number']], 'arrNullNum!': ['array', ['number?']], 'objNum!': ['object', ['number']], 'objNullNum!': ['object', ['number?']], 'pStrNum!': ['struct<1>.PStr', ['number']], 'pStrNullNum!': ['struct<1>.PStr', ['number?']], 'pEnumNum!': ['enum<1>.PEnum', ['number']], 'pEnumNullNum!': ['enum<1>.PEnum', ['number?']], 'str!': ['string'], 'nullStr!': ['string?'], 'arrStr!': ['array', ['string']], 'arrNullStr!': ['array', ['string?']], 'objStr!': ['object', ['string']], 'objNullStr!': ['object', ['string?']], 'pStrStr!': ['struct<1>.PStr', ['string']], 'pStrNullStr!': ['struct<1>.PStr', ['string?']], 'pEnumStr!': ['enum<1>.PEnum', ['string']], 'pEnumNullStr!': ['enum<1>.PEnum', ['string?']], 'arr!': ['array', ['any']], 'nullArr!': ['array?', ['any']], 'arrArr!': ['array', ['array', ['any']]], 'arrNullArr!': ['array', ['array?', ['any']]], 'objArr!': ['object', ['array', ['any']]], 'objNullArr!': ['object', ['array?', ['any']]], 'pStrArr!': ['struct<1>.PStr', ['array', ['any']]], 'pStrNullArr!': ['struct<1>.PStr', ['array?', ['any']]], 'pEnumArr!': ['enum<1>.PEnum', ['array', ['any']]], 'pEnumNullArr!': ['enum<1>.PEnum', ['array?', ['any']]], 'obj!': ['object', ['any']], 'nullObj!': ['object?', ['any']], 'arrObj!': ['array', ['object', ['any']]], 'arrNullObj!': ['array', ['object?', ['any']]], 'objObj!': ['object', ['object', ['any']]], 'objNullObj!': ['object', ['object?', ['any']]], 'pStrObj!': ['struct<1>.PStr', ['object', ['any']]], 'pStrNullObj!': ['struct<1>.PStr', ['object?', ['any']]], 'pEnumObj!': ['enum<1>.PEnum', ['object', ['any']]], 'pEnumNullObj!': ['enum<1>.PEnum', ['object?', ['any']]], 'any!': ['any'], 'nullAny!': ['any?'], 'arrAny!': ['array', ['any']], 'arrNullAny!': ['array', ['any?']], 'objAny!': ['object', ['any']], 'objNullAny!': ['object', ['any?']], 'pStrAny!': ['struct<1>.PStr', ['any']], 'pStrNullAny!': ['struct<1>.PStr', ['any?']], 'pEnumAny!': ['enum<1>.PEnum', ['any']], 'pEnumNullAny!': ['enum<1>.PEnum', ['any?']], 'struct!': ['struct.ExStruct'], 'nullStruct!': ['struct.ExStruct?'], 'arrStruct!': ['array', ['struct.ExStruct']], 'arrNullStruct!': ['array', ['struct.ExStruct?']], 'objStruct!': ['object', ['struct.ExStruct']], 'objNullStruct!': ['object', ['struct.ExStruct?']], 'pStrStruct!': ['struct<1>.PStr', ['struct.ExStruct']], 'pStrNullStruct!': ['struct<1>.PStr', ['struct.ExStruct?']], 'pEnumStruct!': ['enum<1>.PEnum', ['struct.ExStruct']], 'pEnumNullStruct!': ['enum<1>.PEnum', ['struct.ExStruct?']], 'enum!': ['enum.ExEnum'], 'nullEnum!': ['enum.ExEnum?'], 'arrEnum!': ['array', ['enum.ExEnum']], 'arrNullEnum!': ['array', ['enum.ExEnum?']], 'objEnum!': ['object', ['enum.ExEnum']], 'objNullEnum!': ['object', ['enum.ExEnum?']], 'pStrEnum!': ['struct<1>.PStr', ['enum.ExEnum']], 'pStrNullEnum!': ['struct<1>.PStr', ['enum.ExEnum?']], 'pEnumEnum!': ['enum<1>.PEnum', ['enum.ExEnum']], 'pEnumNullEnum!': ['enum<1>.PEnum', ['enum.ExEnum?']], 'fn!': ['fn.example'], 'nullFn!': ['fn.example?'], 'arrFn!': ['array', ['fn.example']], 'arrNullFn!': ['array', ['fn.example?']], 'objFn!': ['object', ['fn.example']], 'objNullFn!': ['object', ['fn.example?']], 'pStrFn!': ['struct<1>.PStr', ['fn.example']], 'pStrNullFn!': ['struct<1>.PStr', ['fn.example?']], 'pEnumFn!': ['enum<1>.PEnum', ['fn.example']], 'pEnumNullFn!': ['enum<1>.PEnum', ['fn.example?']], 'p2Str!': ['struct<2>.P2Str', ['boolean'], ['integer']], 'nullP2Str!': ['struct<2>.P2Str?', ['boolean'], ['integer']], 'arrP2Str!': ['array', ['struct<2>.P2Str', ['boolean'], ['integer']]], 'arrNullP2Str!': ['array', ['struct<2>.P2Str?', ['boolean'], ['integer']]], 'objP2Str!': ['object', ['struct<2>.P2Str', ['boolean'], ['integer']]], 'objNullP2Str!': ['object', ['struct<2>.P2Str?', ['boolean'], ['integer']]], 'pStrP2Str!': ['struct<1>.PStr', ['struct<2>.P2Str', ['boolean'], ['integer']]], 'pStrNullP2Str!': ['struct<1>.PStr', ['struct<2>.P2Str?', ['boolean'], ['integer']]], 'pEnumP2Str!': ['enum<1>.PEnum', ['struct<2>.P2Str', ['boolean'], ['integer']]], 'pEnumNullP2Str!': ['enum<1>.PEnum', ['struct<2>.P2Str?', ['boolean'], ['integer']]], 'p2Enum!': ['enum<2>.P2Enum', ['boolean'], ['integer']], 'nullP2Enum!': ['enum<2>.P2Enum?', ['boolean'], ['integer']], 'arrP2Enum!': ['array', ['enum<2>.P2Enum', ['boolean'], ['integer']]], 'arrNullP2Enum!': ['array', ['enum<2>.P2Enum?', ['boolean'], ['integer']]], 'objP2Enum!': ['object', ['enum<2>.P2Enum', ['boolean'], ['integer']]], 'objNullP2Enum!': ['object', ['enum<2>.P2Enum?', ['boolean'], ['integer']]], 'pStrP2Enum!': ['struct<1>.PStr', ['enum<2>.P2Enum', ['boolean'], ['integer']]], 'pStrNullP2Enum!': ['struct<1>.PStr', ['enum<2>.P2Enum?', ['boolean'], ['integer']]], 'pEnumP2Enum!': ['enum<1>.PEnum', ['enum<2>.P2Enum', ['boolean'], ['integer']]], 'pEnumNullP2Enum!': ['enum<1>.PEnum', ['enum<2>.P2Enum?', ['boolean'], ['integer']]], 'pdStr!': ['struct<1>.PdStr', ['struct<1>.PStr', ['boolean']]]}}, {'///': [' The main struct example.                                                                ', '                                                                                         ', ' The [required] field must be supplied. The optional field does not need to be supplied. '], 'struct.ExStruct': {'required': ['boolean'], 'optional!': ['boolean']}}, {'enum.ExEnum': {'one': {}, 'two': {'required': ['boolean'], 'optional!': ['boolean']}}}, {'struct<1>.PStr': {'wrap': ['T.0']}}, {'struct<1>.PdStr': {'dwrap': ['struct<1>.PStr', ['boolean']]}}, {'struct<2>.P2Str': {'wrap': ['T.0'], 'nest': ['array', ['T.1']]}}, {'enum<1>.PEnum': {'one': {}, 'two': {'ewrap': ['T.0']}}}, {'enum<2>.P2Enum': {'one': {}, 'two': {'ewrap': ['T.0'], 'enest': ['array', ['T.1']]}}}, {'///': 'An example function.', 'fn.example': {'required': ['boolean'], 'optional!': ['boolean']}, '->': {'ok': {}}}, {'fn.test': {'value!': ['struct.Value']}, '->': {'ok': {'value!': ['struct.Value']}, 'errorExample': {'property': ['string']}}}, {'///': ' Ping the server. ', 'fn._ping': {}, '->': {'ok': {}}}, {'///': ' Get the jAPI `schema` of this server. ', 'fn._api': {}, '->': {'ok': {'api': ['array', ['object', ['any']]]}}}, {'///': ' A placeholder function when the requested function is unknown. ', 'fn._unknown': {}, '->': {'ok': {}}}, {'///': ' A type. ', 'enum._Type': {'Boolean': {}, 'Integer': {}, 'Number': {}, 'String': {}, 'Array': {}, 'Object': {}, 'Unknown': {}}}, {'///': ' A reason for the validation failure in the body. ', 'enum._BodyValidationFailureReason': {'TypeUnexpected': {'expected': ['enum._Type'], 'actual': ['enum._Type']}, 'NullDisallowed': {}, 'StructFieldUnknown': {}, 'RequiredStructFieldMissing': {}, 'NumberOutOfRange': {}, 'ZeroOrManyEnumFieldsDisallowed': {}, 'EnumFieldUnknown': {}, 'ExtensionValidationFailure': {'message': ['string']}, 'FunctionUnknown': {}}}, {'///': ' A reason for the validation failure in the header. ', 'enum._HeaderValidationFailureReason': {'TypeUnexpected': {'expected': ['enum._Type'], 'actual': ['enum._Type']}, 'SelectHeaderKeyMustBeStructReference': {}, 'StructNameUnknown': {}, 'StructFieldUnknown': {}}}, {'///': ' A validation failure located at a `path` explained by a `reason`. ', 'struct._BodyValidationFailure': {'path': ['string'], 'reason': ['enum._BodyValidationFailureReason']}}, {'///': ' A validation failure located at a `path` explained by a `reason`. ', 'struct._HeaderValidationFailure': {'path': ['string'], 'reason': ['enum._HeaderValidationFailureReason']}}, {'///': [' All functions may return a validation error:                                                             ', ' - `_errorInvalidRequestHeaders`: The Headers on the Request is invalid as outlined by a list of `cases`. ', ' - `_errorInvalidRequestBody`: The Body on the Request is invalid as outlined by a list of `cases`.       ', ' - `_errorInvalidResponseBody`: The Body that the Server attempted to put on the Response is invalid as   ', '     outlined by a list of `cases.                                                                        ', ' - `_errorParseFailure`: The Request could not be parsed as a jAPI Message.                               '], 'trait._Validated': {'fn._?*': {}, '->': {'_errorUnknown': {}, '_errorInvalidRequestHeaders': {'cases': ['array', ['struct._HeaderValidationFailure']]}, '_errorInvalidRequestBody': {'cases': ['array', ['struct._BodyValidationFailure']]}, '_errorInvalidResponseBody': {'cases': ['array', ['struct._BodyValidationFailure']]}, '_errorParseFailure': {'reasons': ['array', ['string']]}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results)


class BinaryTestCases(unittest.TestCase):
                              
    @classmethod
    def setUpClass(cls):
        initial_list = [0] * 10000
        cls.backdoor_results = ShareableList(initial_list)
        cls.process = multiprocessing.Process(target=backdoor_handler, args=(path, cls.backdoor_results,))
        cls.process.start()                                            
        
        cls.server = server.start('../../test/binary/binary.japi.json')
    
    @classmethod
    def tearDownClass(cls):
        cls.backdoor_results.shm.close()
        cls.backdoor_results.shm.unlink()
        cls.process.terminate()
        cls.process.join()
        cls.server.terminate()
        cls.server.wait()
                              
                        

    def test_bin_0(self):
        request = b'\x92\x81\xa4_bin\x91\xd2\x00\x00\x00\x00\x81\x00\x80'
        expected_response = [{}, {'_errorParseFailure': {'reasons': ['IncompatibleBinaryEncoding']}}]
        verify_case(self, request, expected_response, path)

    def test_bin_1(self):
        request = b'\x80'
        expected_response = [{}, {'_errorParseFailure': {'reasons': ['InvalidJson']}}]
        verify_case(self, request, expected_response, path)

    def test_bin_2(self):
        request = b'\x92\x81\xa4_bin\x91\xd2\xaeY\xec^\x81\x1f\x80'
        expected_response = b'\x92\x81\xa4_bin\x91\xd2\xaeY\xec^\x81#\x80'
        verify_case(self, request, expected_response, path)

    def test_bin_3(self):
        request = b'\x92\x81\xa4_bin\x91\xd2\xaeY\xec^\x81\x7f\x80'
        expected_response = [{}, {'_errorParseFailure': {'reasons': ['BinaryDecodeFailure']}}]
        verify_case(self, request, expected_response, path)

    def test_bin_4(self):
        request = b'false'
        expected_response = [{}, {'_errorParseFailure': {'reasons': ['MessageMustBeArrayWithTwoElements']}}]
        verify_case(self, request, expected_response, path)

    def test_bin_5(self):
        request = b'""'
        expected_response = [{}, {'_errorParseFailure': {'reasons': ['MessageMustBeArrayWithTwoElements']}}]
        verify_case(self, request, expected_response, path)

    def test_bin_6(self):
        request = b'{}'
        expected_response = [{}, {'_errorParseFailure': {'reasons': ['MessageMustBeArrayWithTwoElements']}}]
        verify_case(self, request, expected_response, path)

    def test_bin_7(self):
        request = [{}, {}]
        expected_response = [{}, {'_errorParseFailure': {'reasons': ['BodyMustBeUnionType']}}]
        verify_case(self, request, expected_response, path)

    def test_bin_8(self):
        request = [False, {'fn._ping': {}}]
        expected_response = [{}, {'_errorParseFailure': {'reasons': ['HeadersMustBeObject']}}]
        verify_case(self, request, expected_response, path)

    def test_bin_9(self):
        request = [0, {'fn._ping': {}}]
        expected_response = [{}, {'_errorParseFailure': {'reasons': ['HeadersMustBeObject']}}]
        verify_case(self, request, expected_response, path)

    def test_bin_10(self):
        request = ['', {'fn._ping': {}}]
        expected_response = [{}, {'_errorParseFailure': {'reasons': ['HeadersMustBeObject']}}]
        verify_case(self, request, expected_response, path)

    def test_bin_11(self):
        request = [[], {'fn._ping': {}}]
        expected_response = [{}, {'_errorParseFailure': {'reasons': ['HeadersMustBeObject']}}]
        verify_case(self, request, expected_response, path)

    def test_bin_12(self):
        request = [{}, False]
        expected_response = [{}, {'_errorParseFailure': {'reasons': ['BodyMustBeObject']}}]
        verify_case(self, request, expected_response, path)

    def test_bin_13(self):
        request = [{}, 0]
        expected_response = [{}, {'_errorParseFailure': {'reasons': ['BodyMustBeObject']}}]
        verify_case(self, request, expected_response, path)

    def test_bin_14(self):
        request = [{}, '']
        expected_response = [{}, {'_errorParseFailure': {'reasons': ['BodyMustBeObject']}}]
        verify_case(self, request, expected_response, path)

    def test_bin_15(self):
        request = [{}, []]
        expected_response = [{}, {'_errorParseFailure': {'reasons': ['BodyMustBeObject']}}]
        verify_case(self, request, expected_response, path)

    def test_bin_16(self):
        request = [{'_bin': False}, {'fn._ping': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_bin}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_bin_17(self):
        request = [{'_bin': 0}, {'fn._ping': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_bin}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_bin_18(self):
        request = [{'_bin': ''}, {'fn._ping': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_bin}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_bin_19(self):
        request = [{'_bin': {}}, {'fn._ping': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_bin}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_bin_20(self):
        request = [{'_bin': [False]}, {'fn._ping': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_bin}[0]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_bin_21(self):
        request = [{'_bin': [0.1]}, {'fn._ping': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_bin}[0]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_bin_22(self):
        request = [{'_bin': ['']}, {'fn._ping': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_bin}[0]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_bin_23(self):
        request = [{'_bin': [[]]}, {'fn._ping': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_bin}[0]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_bin_24(self):
        request = [{'_bin': [{}]}, {'fn._ping': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_bin}[0]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path)


class MockTestCases(unittest.TestCase):
                              
    @classmethod
    def setUpClass(cls):
        cls.server = mock_server.start('../../test/example.japi.json')
    
    @classmethod
    def tearDownClass(cls):
        cls.server.terminate()
        cls.server.wait()
                              
                        

    def test_emptyPartialMatchStub(self):

        request = [{}, {'fn._clearStubs': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._clearCalls': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {}}]
        expected_response = [{}, {'_errorNoMatchingStub': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._createStub': {'stub': {'fn.test': {}, '->': {'ok': {}}}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

    def test_partialMatchStub(self):

        request = [{}, {'fn._clearStubs': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._clearCalls': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'int': 1}}}]
        expected_response = [{}, {'_errorNoMatchingStub': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'int': 1, 'str': 'a'}}}]
        expected_response = [{}, {'_errorNoMatchingStub': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._createStub': {'stub': {'fn.test': {'value': {'int': 1}}, '->': {'ok': {'value': {'bool': True}}}}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {}}]
        expected_response = [{}, {'_errorNoMatchingStub': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'int': 0}}}]
        expected_response = [{}, {'_errorNoMatchingStub': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'int': 1}}}]
        expected_response = [{}, {'ok': {'value': {'bool': True}}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'int': 1, 'str': 'a'}}}]
        expected_response = [{}, {'ok': {'value': {'bool': True}}}]
        verify_case(self, request, expected_response, path)

    def test_multiplePartialMatchStub(self):

        request = [{}, {'fn._clearStubs': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._clearCalls': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'int': 1}}}]
        expected_response = [{}, {'_errorNoMatchingStub': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'int': 1, 'str': 'a'}}}]
        expected_response = [{}, {'_errorNoMatchingStub': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'int': 0, 'str': 'a'}}}]
        expected_response = [{}, {'_errorNoMatchingStub': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'int': 1, 'str': 'b'}}}]
        expected_response = [{}, {'_errorNoMatchingStub': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'bool': False, 'int': 1, 'str': 'a'}}}]
        expected_response = [{}, {'_errorNoMatchingStub': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._createStub': {'stub': {'fn.test': {'value': {'int': 1}}, '->': {'ok': {'value': {'bool': True}}}}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._createStub': {'stub': {'fn.test': {'value': {'str': 'a'}}, '->': {'ok': {'value': {'bool': False}}}}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._createStub': {'stub': {'fn.example': {}, '->': {'ok': {}}}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {}}]
        expected_response = [{}, {'_errorNoMatchingStub': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'int': 0}}}]
        expected_response = [{}, {'_errorNoMatchingStub': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'int': 1}}}]
        expected_response = [{}, {'ok': {'value': {'bool': True}}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'int': 1, 'str': 'a'}}}]
        expected_response = [{}, {'ok': {'value': {'bool': False}}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'int': 0, 'str': 'a'}}}]
        expected_response = [{}, {'ok': {'value': {'bool': False}}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'int': 1, 'str': 'b'}}}]
        expected_response = [{}, {'ok': {'value': {'bool': True}}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'bool': False, 'int': 1, 'str': 'a'}}}]
        expected_response = [{}, {'ok': {'value': {'bool': False}}}]
        verify_case(self, request, expected_response, path)

    def test_multipleNestedPartialMatchStub(self):

        request = [{}, {'fn._clearStubs': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._clearCalls': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'int': 1}}}]
        expected_response = [{}, {'_errorNoMatchingStub': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'int': 1, 'str': 'a'}}}]
        expected_response = [{}, {'_errorNoMatchingStub': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'int': 0, 'str': 'a'}}}]
        expected_response = [{}, {'_errorNoMatchingStub': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'int': 1, 'str': 'b'}}}]
        expected_response = [{}, {'_errorNoMatchingStub': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'bool': False, 'int': 1, 'str': 'a'}}}]
        expected_response = [{}, {'_errorNoMatchingStub': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._createStub': {'stub': {'fn.test': {'value': {'struct': {'optional': True}}}, '->': {'ok': {'value': {'bool': True}}}}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._createStub': {'stub': {'fn.test': {'value': {'struct': {'required': True}}}, '->': {'ok': {'value': {'bool': False}}}}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._createStub': {'stub': {'fn.example': {}, '->': {'ok': {}}}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {}}]
        expected_response = [{}, {'_errorNoMatchingStub': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'struct': {'optional': False, 'required': False}}}}]
        expected_response = [{}, {'_errorNoMatchingStub': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'struct': {'optional': True, 'required': False}}}}]
        expected_response = [{}, {'ok': {'value': {'bool': True}}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'struct': {'optional': True, 'required': True}}}}]
        expected_response = [{}, {'ok': {'value': {'bool': False}}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'struct': {'optional': False, 'required': True}}}}]
        expected_response = [{}, {'ok': {'value': {'bool': False}}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'struct': {'optional': True, 'required': False}, 'str': 'b'}}}]
        expected_response = [{}, {'ok': {'value': {'bool': True}}}]
        verify_case(self, request, expected_response, path)

    def test_multipleReallyNestedPartialMatchStub(self):

        request = [{}, {'fn._clearStubs': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._clearCalls': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'int': 1}}}]
        expected_response = [{}, {'_errorNoMatchingStub': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'int': 1, 'str': 'a'}}}]
        expected_response = [{}, {'_errorNoMatchingStub': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'int': 0, 'str': 'a'}}}]
        expected_response = [{}, {'_errorNoMatchingStub': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'int': 1, 'str': 'b'}}}]
        expected_response = [{}, {'_errorNoMatchingStub': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'bool': False, 'int': 1, 'str': 'a'}}}]
        expected_response = [{}, {'_errorNoMatchingStub': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._createStub': {'stub': {'fn.test': {'value': {'arrStruct': [{'optional': True}]}}, '->': {'ok': {'value': {'bool': True}}}}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._createStub': {'stub': {'fn.test': {'value': {'arrStruct': [{'required': True}]}}, '->': {'ok': {'value': {'bool': False}}}}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._createStub': {'stub': {'fn.example': {}, '->': {'ok': {}}}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {}}]
        expected_response = [{}, {'_errorNoMatchingStub': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'arrStruct': [{'required': False}, {'optional': False, 'required': False}]}}}]
        expected_response = [{}, {'_errorNoMatchingStub': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'arrStruct': [{'required': False}, {'optional': True, 'required': False}]}}}]
        expected_response = [{}, {'ok': {'value': {'bool': True}}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'arrStruct': [{'required': False}, {'optional': True, 'required': True}]}}}]
        expected_response = [{}, {'ok': {'value': {'bool': False}}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'arrStruct': [{'required': False}, {'optional': False, 'required': True}]}}}]
        expected_response = [{}, {'ok': {'value': {'bool': False}}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'arrStruct': [{'required': False}, {'optional': True, 'required': False}], 'str': 'b'}}}]
        expected_response = [{}, {'ok': {'value': {'bool': True}}}]
        verify_case(self, request, expected_response, path)

    def test_strictMatchStub(self):

        request = [{}, {'fn._clearStubs': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._clearCalls': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'int': 1}}}]
        expected_response = [{}, {'_errorNoMatchingStub': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._createStub': {'stub': {'fn.test': {'value': {'int': 1}}, '->': {'ok': {'value': {'bool': True}}}}, 'strictMatch': True}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {}}]
        expected_response = [{}, {'_errorNoMatchingStub': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'int': 0}}}]
        expected_response = [{}, {'_errorNoMatchingStub': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'int': 1}}}]
        expected_response = [{}, {'ok': {'value': {'bool': True}}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'int': 1, 'str': 'a'}}}]
        expected_response = [{}, {'_errorNoMatchingStub': {}}]
        verify_case(self, request, expected_response, path)

    def test_multipleStrictMatchStub(self):

        request = [{}, {'fn._clearStubs': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._clearCalls': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'int': 1}}}]
        expected_response = [{}, {'_errorNoMatchingStub': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'str': 'a'}}}]
        expected_response = [{}, {'_errorNoMatchingStub': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._createStub': {'stub': {'fn.test': {'value': {'int': 1}}, '->': {'ok': {'value': {'bool': True}}}}, 'strictMatch': True}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._createStub': {'stub': {'fn.test': {'value': {'str': 'a'}}, '->': {'ok': {'value': {'bool': False}}}}, 'strictMatch': True}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {}}]
        expected_response = [{}, {'_errorNoMatchingStub': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'int': 0}}}]
        expected_response = [{}, {'_errorNoMatchingStub': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'int': 1}}}]
        expected_response = [{}, {'ok': {'value': {'bool': True}}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'int': 1, 'str': 'a'}}}]
        expected_response = [{}, {'_errorNoMatchingStub': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'str': 'a'}}}]
        expected_response = [{}, {'ok': {'value': {'bool': False}}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'int': 0, 'str': 'a'}}}]
        expected_response = [{}, {'_errorNoMatchingStub': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'int': 1, 'str': 'b'}}}]
        expected_response = [{}, {'_errorNoMatchingStub': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'bool': False, 'int': 1, 'str': 'a'}}}]
        expected_response = [{}, {'_errorNoMatchingStub': {}}]
        verify_case(self, request, expected_response, path)

    def test_mixedPartialStrictMatchStub(self):

        request = [{}, {'fn._clearStubs': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._clearCalls': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'int': 1}}}]
        expected_response = [{}, {'_errorNoMatchingStub': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'int': 1, 'str': 'a'}}}]
        expected_response = [{}, {'_errorNoMatchingStub': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'int': 1, 'str': 'b'}}}]
        expected_response = [{}, {'_errorNoMatchingStub': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'bool': False, 'int': 1, 'str': 'a'}}}]
        expected_response = [{}, {'_errorNoMatchingStub': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._createStub': {'stub': {'fn.test': {'value': {'int': 1}}, '->': {'ok': {'value': {'bool': True}}}}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._createStub': {'stub': {'fn.test': {'value': {'int': 1, 'str': 'a'}}, '->': {'ok': {'value': {'bool': False}}}}, 'strictMatch': True}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {}}]
        expected_response = [{}, {'_errorNoMatchingStub': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'int': 0}}}]
        expected_response = [{}, {'_errorNoMatchingStub': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'int': 1}}}]
        expected_response = [{}, {'ok': {'value': {'bool': True}}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'int': 1, 'str': 'a'}}}]
        expected_response = [{}, {'ok': {'value': {'bool': False}}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'int': 0, 'str': 'a'}}}]
        expected_response = [{}, {'_errorNoMatchingStub': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'int': 1, 'str': 'b'}}}]
        expected_response = [{}, {'ok': {'value': {'bool': True}}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'bool': False, 'int': 1, 'str': 'a'}}}]
        expected_response = [{}, {'ok': {'value': {'bool': True}}}]
        verify_case(self, request, expected_response, path)

    def test_mixedStrictPartialMatchStub(self):

        request = [{}, {'fn._clearStubs': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._clearCalls': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'int': 1}}}]
        expected_response = [{}, {'_errorNoMatchingStub': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'int': 1, 'str': 'a'}}}]
        expected_response = [{}, {'_errorNoMatchingStub': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'int': 1, 'str': 'b'}}}]
        expected_response = [{}, {'_errorNoMatchingStub': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'bool': False, 'int': 1, 'str': 'a'}}}]
        expected_response = [{}, {'_errorNoMatchingStub': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._createStub': {'stub': {'fn.test': {'value': {'int': 1, 'str': 'a'}}, '->': {'ok': {'value': {'bool': False}}}}, 'strictMatch': True}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._createStub': {'stub': {'fn.test': {'value': {'int': 1}}, '->': {'ok': {'value': {'bool': True}}}}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {}}]
        expected_response = [{}, {'_errorNoMatchingStub': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'int': 0}}}]
        expected_response = [{}, {'_errorNoMatchingStub': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'int': 1}}}]
        expected_response = [{}, {'ok': {'value': {'bool': True}}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'int': 1, 'str': 'a'}}}]
        expected_response = [{}, {'ok': {'value': {'bool': True}}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'int': 0, 'str': 'a'}}}]
        expected_response = [{}, {'_errorNoMatchingStub': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'int': 1, 'str': 'b'}}}]
        expected_response = [{}, {'ok': {'value': {'bool': True}}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'bool': False, 'int': 1, 'str': 'a'}}}]
        expected_response = [{}, {'ok': {'value': {'bool': True}}}]
        verify_case(self, request, expected_response, path)

    def test_clearStubs(self):

        request = [{}, {'fn._clearStubs': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._clearCalls': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {}}]
        expected_response = [{}, {'_errorNoMatchingStub': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._createStub': {'stub': {'fn.test': {}, '->': {'ok': {}}}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._clearStubs': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {}}]
        expected_response = [{}, {'_errorNoMatchingStub': {}}]
        verify_case(self, request, expected_response, path)

    def test_generation(self):

        request = [{}, {'fn._clearStubs': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._clearCalls': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{'_mockEnableGeneratedStub': True}, {'fn.test': {}}]
        expected_response = [{}, {'ok': {'value': {'arrArr': [[794471793, 'L+Uz1w'], []], 'arrFn': [], 'arrInt': [996984527, 1157490780], 'arrNullEnum': [{'two': {'required': False}}], 'arrNullFn': [{'optional': False, 'required': True}], 'arrNullInt': [], 'arrNullP2Enum': [{'two': {'enest': [837716109, 1513704002], 'ewrap': False}}, None], 'arrNullP2Str': [{'nest': [1787378757, 1328144282], 'wrap': False}], 'arrNullStr': [], 'arrNullStruct': [{'optional': True, 'required': False}], 'arrP2Enum': [], 'arrStruct': [{'required': False}], 'fn': {'required': False}, 'int': 342738416, 'nullAny': None, 'nullArr': None, 'nullFn': {'required': False}, 'nullNum': None, 'nullObj': None, 'nullP2Str': {'nest': [1070152012, 350928277], 'wrap': False}, 'nullStr': None, 'nullStruct': None, 'num': 0.41169920729372433, 'objBool': {'Vg2zTg': True, 'cLONfA': True}, 'objEnum': {'XNsgvQ': {'one': {}}, 'fmoFaA': {'two': {'optional': False, 'required': True}}}, 'objNullArr': {'SPhqCg': [867900630, 106931780], 'ULNNrA': None}, 'objNullBool': {}, 'objNullFn': {}, 'objNullInt': {'P7rgaw': None, 'dft53A': 1418160570}, 'objNum': {'SvfamQ': 0.31723206103436735}, 'objObj': {'I+KHVQ': {'Xvi6Ww': 'S5FD0Q'}}, 'objP2Enum': {'X5OWpA': {'two': {'enest': [], 'ewrap': True}}}, 'objP2Str': {'Ac5eDg': {'nest': [1458640444], 'wrap': True}}, 'objStr': {'A9daKA': 'IxnDQQ'}, 'objStruct': {}, 'p2Str': {'nest': [107290051], 'wrap': False}, 'pEnumAny': {'one': {}}, 'pEnumFn': {'two': {'ewrap': {'optional': True, 'required': True}}}, 'pEnumNullArr': {'one': {}}, 'pEnumNullBool': {'one': {}}, 'pEnumNullInt': {'one': {}}, 'pEnumNullObj': {'two': {'ewrap': {}}}, 'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'enest': [], 'ewrap': False}}}}, 'pEnumNullP2Str': {'two': {'ewrap': {'nest': [689679052], 'wrap': False}}}, 'pEnumStr': {'two': {'ewrap': 'a6/Ggg'}}, 'pStrAny': {'wrap': 865585358}, 'pStrArr': {'wrap': []}, 'pStrEnum': {'wrap': {'two': {'optional': True, 'required': False}}}, 'pStrFn': {'wrap': {'optional': True, 'required': True}}, 'pStrInt': {'wrap': 519516928}, 'pStrNullAny': {'wrap': 'ORx/LA'}, 'pStrNullArr': {'wrap': []}, 'pStrNullNum': {'wrap': 0.348971671961984}, 'pStrNullObj': {'wrap': None}, 'pStrNullP2Enum': {'wrap': {'two': {'enest': [], 'ewrap': True}}}, 'pStrNullStr': {'wrap': None}, 'pStrNullStruct': {'wrap': {'optional': False, 'required': False}}, 'pStrObj': {'wrap': {'Fbh2GQ': 1633783999, 'I18DjA': False}}, 'pStrP2Enum': {'wrap': {'one': {}}}, 'pStrP2Str': {'wrap': {'nest': [1034606775], 'wrap': False}}, 'pdStr': {'dwrap': {'wrap': True}}}}}]
        verify_case(self, request, expected_response, path)

        request = [{'_mockEnableGeneratedStub': True}, {'fn.test': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{'_mockEnableGeneratedStub': True}, {'fn.test': {}}]
        expected_response = [{}, {'ok': {'value': {'arrEnum': [{'one': {}}, {'two': {'required': False}}], 'arrNullArr': [None, None], 'arrNullBool': [None, False], 'arrNullObj': [{}, {'a56N+g': 629192200}], 'arrNullP2Str': [{'nest': [17621586, 1021151523], 'wrap': True}, None], 'arrNullStruct': [], 'arrNum': [0.27416063514685657], 'arrStr': [], 'arrStruct': [], 'fn': {'optional': True, 'required': False}, 'int': 1125421402, 'nullStr': 'O1c+Xw', 'obj': {'G7SaVw': True, 'Kb4rmA': True}, 'objAny': {'R/J9Tw': 1605435877, 'YNLVsA': True}, 'objArr': {'OV+qyA': [False, True]}, 'objInt': {}, 'objNullArr': {'HkLQag': ['bLWJNg'], 'bt4QNw': None}, 'objNullFn': {'U+OTCQ': None}, 'objNullNum': {'EE2aQQ': None, 'R+goGg': 0.26713475720539054}, 'objNullObj': {'XSrLyg': {'C5j6BA': 1518930466, 'dZCVsQ': 1647834647}, 'dpiZfQ': {'A6l5QA': 30364094, 'ZyHiHw': 409369397}}, 'objNullP2Enum': {'FfW7eg': None, 'P/NJ6Q': {'two': {'enest': [], 'ewrap': False}}}, 'objNullStruct': {'A4qXoA': {'required': True}, 'S7DsNA': {'required': False}}, 'objNum': {}, 'objP2Enum': {'bobAkQ': {'one': {}}, 'drpL9w': {'one': {}}}, 'objP2Str': {'Dj2wkw': {'nest': [], 'wrap': True}, 'PhTzzg': {'nest': [1232732668, 2054541445], 'wrap': True}}, 'objStr': {}, 'objStruct': {}, 'p2Str': {'nest': [], 'wrap': False}, 'pEnumArr': {'two': {'ewrap': ['bD/iLA']}}, 'pEnumEnum': {'two': {'ewrap': {'one': {}}}}, 'pEnumNullFn': {'one': {}}, 'pEnumNullInt': {'one': {}}, 'pEnumNullNum': {'one': {}}, 'pEnumNullObj': {'one': {}}, 'pEnumNullP2Enum': {'one': {}}, 'pEnumNullP2Str': {'one': {}}, 'pEnumNullStr': {'one': {}}, 'pEnumNum': {'two': {'ewrap': 0.39889448629729785}}, 'pEnumP2Enum': {'two': {'ewrap': {'one': {}}}}, 'pEnumP2Str': {'one': {}}, 'pEnumStruct': {'two': {'ewrap': {'optional': True, 'required': False}}}, 'pStrArr': {'wrap': []}, 'pStrFn': {'wrap': {'optional': True, 'required': True}}, 'pStrInt': {'wrap': 540659403}, 'pStrNullAny': {'wrap': None}, 'pStrNullArr': {'wrap': ['VuE98g', True]}, 'pStrNullBool': {'wrap': None}, 'pStrNullEnum': {'wrap': None}, 'pStrNullInt': {'wrap': None}, 'pStrNullNum': {'wrap': 0.3774721242707453}, 'pStrNullObj': {'wrap': None}, 'pStrNullP2Enum': {'wrap': None}, 'pStrObj': {'wrap': {}}, 'pStrStruct': {'wrap': {'optional': True, 'required': False}}, 'struct': {'required': True}}}}]
        verify_case(self, request, expected_response, path)

        request = [{'_mockEnableGeneratedStub': True}, {'fn.test': {}}]
        expected_response = [{}, {'ok': {'value': {'arrEnum': [], 'arrFn': [{'required': False}], 'arrNullBool': [False, False], 'arrNullEnum': [None], 'arrNullFn': [{'optional': True, 'required': True}, None], 'arrNullObj': [], 'arrNullStr': [], 'arrNum': [], 'arrP2Enum': [{'one': {}}, {'two': {'enest': [557925161], 'ewrap': True}}], 'arrStr': ['NOQfug', 'Sqheaw'], 'arrStruct': [{'optional': False, 'required': False}, {'optional': False, 'required': False}], 'enum': {'one': {}}, 'nullArr': None, 'nullBool': True, 'nullFn': None, 'nullNum': None, 'nullP2Str': {'nest': [252052250], 'wrap': True}, 'nullStruct': None, 'num': 0.21166269900731877, 'objAny': {}, 'objInt': {'SCzDWA': 1285827761, 'UPVmyg': 134905915}, 'objNullAny': {'E6wFIg': False, 'Ola9BA': None}, 'objNullFn': {'KKikIQ': {'optional': True, 'required': False}, 'RJfuKw': None}, 'objNullInt': {}, 'objNullP2Enum': {'dHNwzA': None}, 'objNullStruct': {'IFy8gg': {'optional': True, 'required': True}, 'VQ0m9g': {'required': True}}, 'objP2Str': {'UHfSPQ': {'nest': [], 'wrap': False}, 'e+sU6A': {'nest': [480983462, 484200423], 'wrap': False}}, 'pEnumArr': {'one': {}}, 'pEnumFn': {'one': {}}, 'pEnumNullAny': {'two': {'ewrap': 85279280}}, 'pEnumNullArr': {'one': {}}, 'pEnumNullInt': {'two': {'ewrap': None}}, 'pEnumNullNum': {'one': {}}, 'pEnumNullObj': {'one': {}}, 'pEnumNullP2Enum': {'one': {}}, 'pEnumNullP2Str': {'one': {}}, 'pEnumNullStr': {'one': {}}, 'pEnumNullStruct': {'one': {}}, 'pEnumP2Enum': {'one': {}}, 'pEnumP2Str': {'one': {}}, 'pStrAny': {'wrap': 1896941395}, 'pStrBool': {'wrap': False}, 'pStrEnum': {'wrap': {'one': {}}}, 'pStrFn': {'wrap': {'optional': True, 'required': True}}, 'pStrInt': {'wrap': 1954937958}, 'pStrNullArr': {'wrap': None}, 'pStrNullBool': {'wrap': True}, 'pStrNullFn': {'wrap': {'optional': True, 'required': False}}, 'pStrNullInt': {'wrap': None}, 'pStrNullNum': {'wrap': None}, 'pStrNullObj': {'wrap': {}}, 'pStrNullP2Enum': {'wrap': None}, 'pStrNullStruct': {'wrap': None}, 'pStrNum': {'wrap': 0.4077925467799474}, 'pStrP2Enum': {'wrap': {'one': {}}}, 'pStrP2Str': {'wrap': {'nest': [478943623, 1557672116], 'wrap': True}}, 'pStrStruct': {'wrap': {'required': True}}, 'pdStr': {'dwrap': {'wrap': False}}, 'struct': {'required': True}}}}]
        verify_case(self, request, expected_response, path)

        request = [{'_mockEnableGeneratedStub': True}, {'fn.test': {}}]
        expected_response = [{}, {'ok': {'value': {'arrArr': [['PnZVUA'], [True]], 'arrBool': [], 'arrEnum': [], 'arrFn': [{'optional': True, 'required': False}], 'arrNullArr': [], 'arrNullBool': [None], 'arrNullEnum': [{'two': {'optional': True, 'required': True}}], 'arrNullInt': [None, None], 'arrNullNum': [None], 'arrNum': [], 'arrP2Enum': [{'two': {'enest': [1516883683], 'ewrap': True}}, {'two': {'enest': [], 'ewrap': True}}], 'int': 502328887, 'nullAny': None, 'nullArr': [], 'nullBool': False, 'nullEnum': None, 'nullFn': None, 'nullInt': None, 'nullNum': None, 'nullObj': None, 'nullP2Enum': {'one': {}}, 'nullP2Str': None, 'objAny': {}, 'objBool': {}, 'objEnum': {'MpsAIg': {'two': {'required': True}}, 'NIz8bg': {'two': {'required': False}}}, 'objNullAny': {'QCQrRg': None, 'UwXyNA': None}, 'objNullArr': {}, 'objNullBool': {}, 'objNullEnum': {}, 'objNullFn': {}, 'objNullInt': {'S5XguA': None}, 'objNullObj': {'c0zizQ': None}, 'objNullP2Enum': {}, 'objStr': {'UlrEpg': 'dvR+5w'}, 'objStruct': {'AJMMOQ': {'optional': True, 'required': False}, 'Rd6FMg': {'required': True}}, 'p2Enum': {'one': {}}, 'p2Str': {'nest': [], 'wrap': False}, 'pEnumAny': {'two': {'ewrap': 259509165}}, 'pEnumBool': {'one': {}}, 'pEnumEnum': {'one': {}}, 'pEnumFn': {'one': {}}, 'pEnumNullAny': {'two': {'ewrap': 'cxmOBg'}}, 'pEnumNullBool': {'two': {'ewrap': True}}, 'pEnumNullEnum': {'two': {'ewrap': None}}, 'pEnumNullInt': {'two': {'ewrap': 1688860379}}, 'pEnumNullNum': {'two': {'ewrap': None}}, 'pEnumNullP2Enum': {'two': {'ewrap': None}}, 'pEnumNullStr': {'two': {'ewrap': 'Uh8Urw'}}, 'pEnumNullStruct': {'two': {'ewrap': None}}, 'pEnumObj': {'two': {'ewrap': {'L7Wz8g': 'dsZ4wA', 'Ujbqpw': True}}}, 'pEnumP2Str': {'two': {'ewrap': {'nest': [], 'wrap': True}}}, 'pEnumStruct': {'one': {}}, 'pStrArr': {'wrap': []}, 'pStrBool': {'wrap': True}, 'pStrFn': {'wrap': {'required': True}}, 'pStrInt': {'wrap': 1877251727}, 'pStrNullArr': {'wrap': None}, 'pStrNullBool': {'wrap': True}, 'pStrNullFn': {'wrap': {'optional': True, 'required': False}}, 'pStrNullInt': {'wrap': None}, 'pStrNullP2Enum': {'wrap': {'one': {}}}, 'pStrNullP2Str': {'wrap': None}, 'pStrP2Enum': {'wrap': {'one': {}}}, 'pStrStruct': {'wrap': {'required': False}}, 'struct': {'required': True}}}}]
        verify_case(self, request, expected_response, path)

    def test_emptyPartialMatchVerify(self):

        request = [{}, {'fn._clearStubs': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._clearCalls': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._createStub': {'stub': {'fn.test': {}, '->': {'ok': {}}}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verify': {'call': {'fn.test': {}}}}]
        expected_response = [{}, {'errorVerificationFailure': {'reason': {'tooFewMatchingCalls': {'allCalls': [], 'found': 0, 'wanted': {'atLeast': {'times': 1}}}}}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verify': {'call': {'fn.test': {}}, 'count': {'exact': {'times': 1}}}}]
        expected_response = [{}, {'errorVerificationFailure': {'reason': {'tooFewMatchingCalls': {'allCalls': [], 'found': 0, 'wanted': {'exact': {'times': 1}}}}}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verify': {'call': {'fn.test': {}}, 'count': {'atLeast': {'times': 1}}}}]
        expected_response = [{}, {'errorVerificationFailure': {'reason': {'tooFewMatchingCalls': {'allCalls': [], 'wanted': {'atLeast': {'times': 1}}, 'found': 0}}}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verify': {'call': {'fn.test': {}}, 'count': {'atMost': {'times': 0}}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verifyNoMoreInteractions': {}}]
        expected_response = [{}, {'errorVerificationFailure': {'additionalUnverifiedCalls': [{'fn.test': {}}]}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verify': {'call': {'fn.test': {}}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verifyNoMoreInteractions': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verify': {'call': {'fn.test': {}}, 'count': {'exact': {'times': 1}}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verify': {'call': {'fn.test': {}}, 'count': {'atLeast': {'times': 1}}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verify': {'call': {'fn.test': {}}, 'count': {'atLeast': {'times': 2}}}}]
        expected_response = [{}, {'errorVerificationFailure': {'reason': {'tooFewMatchingCalls': {'allCalls': [{'fn.test': {}}], 'found': 1, 'wanted': {'atLeast': {'times': 2}}}}}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verify': {'call': {'fn.test': {}}, 'count': {'atMost': {'times': 1}}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verify': {'call': {'fn.test': {}}, 'count': {'atMost': {'times': 0}}}}]
        expected_response = [{}, {'errorVerificationFailure': {'reason': {'tooManyMatchingCalls': {'wanted': {'atMost': {'times': 0}}, 'allCalls': [{'fn.test': {}}], 'found': 1}}}}]
        verify_case(self, request, expected_response, path)

    def test_partialMatchVerify(self):

        request = [{}, {'fn._clearStubs': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._clearCalls': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._createStub': {'stub': {'fn.test': {'value': {'int': 0}}, '->': {'ok': {'value': {'bool': True}}}}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verify': {'call': {'fn.test': {'value': {'int': 0}}}}}]
        expected_response = [{}, {'errorVerificationFailure': {'reason': {'tooFewMatchingCalls': {'found': 0, 'allCalls': [], 'wanted': {'atLeast': {'times': 1}}}}}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'int': 0, 'str': 'a'}}}]
        expected_response = [{}, {'ok': {'value': {'bool': True}}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verifyNoMoreInteractions': {}}]
        expected_response = [{}, {'errorVerificationFailure': {'additionalUnverifiedCalls': [{'fn.test': {'value': {'int': 0, 'str': 'a'}}}]}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verify': {'call': {'fn.test': {'value': {'int': 0}}}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verifyNoMoreInteractions': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verify': {'call': {'fn.test': {'value': {'int': 0}}}, 'count': {'exact': {'times': 1}}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verify': {'call': {'fn.test': {'value': {'int': 0}}}, 'count': {'atLeast': {'times': 1}}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verify': {'call': {'fn.test': {'value': {'int': 0}}}, 'count': {'atMost': {'times': 0}}}}]
        expected_response = [{}, {'errorVerificationFailure': {'reason': {'tooManyMatchingCalls': {'wanted': {'atMost': {'times': 0}}, 'allCalls': [{'fn.test': {'value': {'int': 0, 'str': 'a'}}}], 'found': 1}}}}]
        verify_case(self, request, expected_response, path)

    def test_multiplePartialMatchVerify(self):

        request = [{}, {'fn._clearStubs': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._clearCalls': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._createStub': {'stub': {'fn.test': {}, '->': {'ok': {}}}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verify': {'call': {'fn.test': {'value': {'int': 0}}}}}]
        expected_response = [{}, {'errorVerificationFailure': {'reason': {'tooFewMatchingCalls': {'found': 0, 'allCalls': [], 'wanted': {'atLeast': {'times': 1}}}}}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'int': 0, 'bool': True}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'int': 0, 'str': 'a'}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'int': 1}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verifyNoMoreInteractions': {}}]
        expected_response = [{}, {'errorVerificationFailure': {'additionalUnverifiedCalls': [{'fn.test': {'value': {'int': 0, 'bool': True}}}, {'fn.test': {'value': {'int': 0, 'str': 'a'}}}, {'fn.test': {'value': {'int': 1}}}]}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verify': {'call': {'fn.test': {'value': {'int': 0}}}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verifyNoMoreInteractions': {}}]
        expected_response = [{}, {'errorVerificationFailure': {'additionalUnverifiedCalls': [{'fn.test': {'value': {'int': 1}}}]}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verify': {'call': {'fn.test': {}}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verifyNoMoreInteractions': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verify': {'call': {'fn.test': {'value': {'int': 0}}}, 'count': {'exact': {'times': 1}}}}]
        expected_response = [{}, {'errorVerificationFailure': {'reason': {'tooManyMatchingCalls': {'wanted': {'exact': {'times': 1}}, 'allCalls': [{'fn.test': {'value': {'int': 0, 'bool': True}}}, {'fn.test': {'value': {'int': 0, 'str': 'a'}}}, {'fn.test': {'value': {'int': 1}}}], 'found': 2}}}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verify': {'call': {'fn.test': {'value': {'int': 0}}}, 'count': {'exact': {'times': 2}}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verify': {'call': {'fn.test': {'value': {'int': 0}}}, 'count': {'exact': {'times': 3}}}}]
        expected_response = [{}, {'errorVerificationFailure': {'reason': {'tooFewMatchingCalls': {'wanted': {'exact': {'times': 3}}, 'allCalls': [{'fn.test': {'value': {'int': 0, 'bool': True}}}, {'fn.test': {'value': {'int': 0, 'str': 'a'}}}, {'fn.test': {'value': {'int': 1}}}], 'found': 2}}}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verify': {'call': {'fn.test': {'value': {'int': 0}}}, 'count': {'atLeast': {'times': 1}}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verify': {'call': {'fn.test': {'value': {'int': 0}}}, 'count': {'atMost': {'times': 1}}}}]
        expected_response = [{}, {'errorVerificationFailure': {'reason': {'tooManyMatchingCalls': {'wanted': {'atMost': {'times': 1}}, 'allCalls': [{'fn.test': {'value': {'int': 0, 'bool': True}}}, {'fn.test': {'value': {'int': 0, 'str': 'a'}}}, {'fn.test': {'value': {'int': 1}}}], 'found': 2}}}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verify': {'call': {'fn.test': {'value': {'int': 0}}}, 'count': {'atMost': {'times': 2}}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

    def test_strictMatchVerify(self):

        request = [{}, {'fn._clearStubs': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._clearCalls': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._createStub': {'stub': {'fn.test': {}, '->': {'ok': {}}}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verify': {'call': {'fn.test': {'value': {'int': 0}}}, 'strictMatch': True}}]
        expected_response = [{}, {'errorVerificationFailure': {'reason': {'tooFewMatchingCalls': {'found': 0, 'allCalls': [], 'wanted': {'atLeast': {'times': 1}}}}}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'int': 0}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verifyNoMoreInteractions': {}}]
        expected_response = [{}, {'errorVerificationFailure': {'additionalUnverifiedCalls': [{'fn.test': {'value': {'int': 0}}}]}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verify': {'call': {'fn.test': {'value': {'int': 0}}}, 'strictMatch': True}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verifyNoMoreInteractions': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verify': {'call': {'fn.test': {'value': {'int': 1}}}, 'strictMatch': True}}]
        expected_response = [{}, {'errorVerificationFailure': {'reason': {'tooFewMatchingCalls': {'found': 0, 'allCalls': [{'fn.test': {'value': {'int': 0}}}], 'wanted': {'atLeast': {'times': 1}}}}}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verify': {'call': {'fn.test': {'value': {'int': 0, 'str': 'a'}}}, 'strictMatch': True}}]
        expected_response = [{}, {'errorVerificationFailure': {'reason': {'tooFewMatchingCalls': {'found': 0, 'allCalls': [{'fn.test': {'value': {'int': 0}}}], 'wanted': {'atLeast': {'times': 1}}}}}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verify': {'call': {'fn.test': {'value': {'int': 0}}}, 'strictMatch': True, 'count': {'exact': {'times': 0}}}}]
        expected_response = [{}, {'errorVerificationFailure': {'reason': {'tooManyMatchingCalls': {'wanted': {'exact': {'times': 0}}, 'allCalls': [{'fn.test': {'value': {'int': 0}}}], 'found': 1}}}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verify': {'call': {'fn.test': {'value': {'int': 0}}}, 'strictMatch': True, 'count': {'exact': {'times': 2}}}}]
        expected_response = [{}, {'errorVerificationFailure': {'reason': {'tooFewMatchingCalls': {'wanted': {'exact': {'times': 2}}, 'allCalls': [{'fn.test': {'value': {'int': 0}}}], 'found': 1}}}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verify': {'call': {'fn.test': {'value': {'int': 0}}}, 'strictMatch': True, 'count': {'exact': {'times': 1}}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verify': {'call': {'fn.test': {'value': {'int': 0}}}, 'strictMatch': True, 'count': {'atLeast': {'times': 2}}}}]
        expected_response = [{}, {'errorVerificationFailure': {'reason': {'tooFewMatchingCalls': {'wanted': {'atLeast': {'times': 2}}, 'allCalls': [{'fn.test': {'value': {'int': 0}}}], 'found': 1}}}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verify': {'call': {'fn.test': {'value': {'int': 0}}}, 'strictMatch': True, 'count': {'atLeast': {'times': 1}}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verify': {'call': {'fn.test': {'value': {'int': 0}}}, 'strictMatch': True, 'count': {'atMost': {'times': 1}}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

    def test_multipleStrictMatchVerify(self):

        request = [{}, {'fn._clearStubs': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._clearCalls': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._createStub': {'stub': {'fn.test': {}, '->': {'ok': {}}}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verify': {'call': {'fn.test': {'value': {'int': 0}}}, 'strictMatch': True}}]
        expected_response = [{}, {'errorVerificationFailure': {'reason': {'tooFewMatchingCalls': {'found': 0, 'allCalls': [], 'wanted': {'atLeast': {'times': 1}}}}}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'int': 0}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'int': 0, 'str': 'a'}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verifyNoMoreInteractions': {}}]
        expected_response = [{}, {'errorVerificationFailure': {'additionalUnverifiedCalls': [{'fn.test': {'value': {'int': 0}}}, {'fn.test': {'value': {'int': 0, 'str': 'a'}}}]}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verify': {'call': {'fn.test': {'value': {'int': 0}}}, 'strictMatch': True}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verifyNoMoreInteractions': {}}]
        expected_response = [{}, {'errorVerificationFailure': {'additionalUnverifiedCalls': [{'fn.test': {'value': {'int': 0, 'str': 'a'}}}]}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verify': {'call': {'fn.test': {}}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verifyNoMoreInteractions': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verify': {'call': {'fn.test': {'value': {'int': 1}}}, 'strictMatch': True}}]
        expected_response = [{}, {'errorVerificationFailure': {'reason': {'tooFewMatchingCalls': {'found': 0, 'allCalls': [{'fn.test': {'value': {'int': 0}}}, {'fn.test': {'value': {'int': 0, 'str': 'a'}}}], 'wanted': {'atLeast': {'times': 1}}}}}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verify': {'call': {'fn.test': {'value': {'int': 0, 'str': 'b'}}}, 'strictMatch': True}}]
        expected_response = [{}, {'errorVerificationFailure': {'reason': {'tooFewMatchingCalls': {'found': 0, 'allCalls': [{'fn.test': {'value': {'int': 0}}}, {'fn.test': {'value': {'int': 0, 'str': 'a'}}}], 'wanted': {'atLeast': {'times': 1}}}}}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verify': {'call': {'fn.test': {'value': {'int': 0}}}, 'strictMatch': True, 'count': {'exact': {'times': 0}}}}]
        expected_response = [{}, {'errorVerificationFailure': {'reason': {'tooManyMatchingCalls': {'wanted': {'exact': {'times': 0}}, 'allCalls': [{'fn.test': {'value': {'int': 0}}}, {'fn.test': {'value': {'int': 0, 'str': 'a'}}}], 'found': 1}}}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verify': {'call': {'fn.test': {'value': {'int': 0}}}, 'strictMatch': True, 'count': {'exact': {'times': 2}}}}]
        expected_response = [{}, {'errorVerificationFailure': {'reason': {'tooFewMatchingCalls': {'wanted': {'exact': {'times': 2}}, 'allCalls': [{'fn.test': {'value': {'int': 0}}}, {'fn.test': {'value': {'int': 0, 'str': 'a'}}}], 'found': 1}}}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verify': {'call': {'fn.test': {'value': {'int': 0}}}, 'strictMatch': True, 'count': {'exact': {'times': 1}}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verify': {'call': {'fn.test': {'value': {'int': 0}}}, 'strictMatch': True, 'count': {'atLeast': {'times': 2}}}}]
        expected_response = [{}, {'errorVerificationFailure': {'reason': {'tooFewMatchingCalls': {'wanted': {'atLeast': {'times': 2}}, 'allCalls': [{'fn.test': {'value': {'int': 0}}}, {'fn.test': {'value': {'int': 0, 'str': 'a'}}}], 'found': 1}}}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verify': {'call': {'fn.test': {'value': {'int': 0}}}, 'strictMatch': True, 'count': {'atLeast': {'times': 1}}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verify': {'call': {'fn.test': {'value': {'int': 0}}}, 'strictMatch': True, 'count': {'atMost': {'times': 1}}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

    def test_multipleNestedPartialMatchVerify(self):

        request = [{}, {'fn._clearStubs': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._clearCalls': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._createStub': {'stub': {'fn.test': {}, '->': {'ok': {}}}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verify': {'call': {'fn.test': {'value': {'int': 0}}}}}]
        expected_response = [{}, {'errorVerificationFailure': {'reason': {'tooFewMatchingCalls': {'found': 0, 'allCalls': [], 'wanted': {'atLeast': {'times': 1}}}}}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'struct': {'required': True}}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'struct': {'required': True, 'optional': True}}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verifyNoMoreInteractions': {}}]
        expected_response = [{}, {'errorVerificationFailure': {'additionalUnverifiedCalls': [{'fn.test': {'value': {'struct': {'required': True}}}}, {'fn.test': {'value': {'struct': {'required': True, 'optional': True}}}}]}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verify': {'call': {'fn.test': {'value': {'struct': {'optional': True}}}}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verifyNoMoreInteractions': {}}]
        expected_response = [{}, {'errorVerificationFailure': {'additionalUnverifiedCalls': [{'fn.test': {'value': {'struct': {'required': True}}}}]}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verify': {'call': {'fn.test': {}}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verifyNoMoreInteractions': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verify': {'call': {'fn.test': {'value': {'struct': {'optional': True}}}}, 'count': {'exact': {'times': 1}}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

    def test_multipleReallyNestedPartialMatchVerify(self):

        request = [{}, {'fn._clearStubs': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._clearCalls': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._createStub': {'stub': {'fn.test': {}, '->': {'ok': {}}}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verify': {'call': {'fn.test': {'value': {'int': 0}}}}}]
        expected_response = [{}, {'errorVerificationFailure': {'reason': {'tooFewMatchingCalls': {'found': 0, 'allCalls': [], 'wanted': {'atLeast': {'times': 1}}}}}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'arrStruct': [{'required': False}, {'required': True}]}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {'value': {'arrStruct': [{'required': False}, {'required': True, 'optional': True}]}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verify': {'call': {'fn.test': {'value': {'arrStruct': [{'optional': True}]}}}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verifyNoMoreInteractions': {}}]
        expected_response = [{}, {'errorVerificationFailure': {'additionalUnverifiedCalls': [{'fn.test': {'value': {'arrStruct': [{'required': False}, {'required': True}]}}}]}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verify': {'call': {'fn.test': {}}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verifyNoMoreInteractions': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verify': {'call': {'fn.test': {'value': {'arrStruct': [{'optional': True}]}}}, 'count': {'exact': {'times': 1}}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

    def test_clearCalls(self):

        request = [{}, {'fn._clearStubs': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._clearCalls': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._createStub': {'stub': {'fn.test': {}, '->': {'ok': {}}}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verify': {'call': {'fn.test': {}}}}]
        expected_response = [{}, {'errorVerificationFailure': {'reason': {'tooFewMatchingCalls': {'found': 0, 'allCalls': [], 'wanted': {'atLeast': {'times': 1}}}}}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verify': {'call': {'fn.test': {}}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._clearCalls': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._verify': {'call': {'fn.test': {}}}}]
        expected_response = [{}, {'errorVerificationFailure': {'reason': {'tooFewMatchingCalls': {'found': 0, 'allCalls': [], 'wanted': {'atLeast': {'times': 1}}}}}}]
        verify_case(self, request, expected_response, path)

    def test_resultSuppliesMissingRequiredFields(self):

        request = [{}, {'fn._clearStubs': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._clearCalls': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {}}]
        expected_response = [{}, {'_errorNoMatchingStub': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._createStub': {'stub': {'fn.test': {}, '->': {'ok': {'value': {'bool': True, 'struct': {'optional': True}}}}}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {}}]
        expected_response = [{}, {'ok': {'value': {'bool': True, 'struct': {'optional': True, 'required': False}}}}]
        verify_case(self, request, expected_response, path)

    def test_resultWithStartingValue(self):

        request = [{}, {'fn._clearStubs': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._clearCalls': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {}}]
        expected_response = [{}, {'_errorNoMatchingStub': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn._createStub': {'stub': {'fn.test': {}, '->': {'ok': {'value': {'bool': False, 'int': 0, 'num': 0.1, 'str': '', 'arrBool': [False], 'objBool': {'a': False}, 'struct': {'required': False}, 'enum': {'two': {'required': False}}, 'fn': {'required': False}}}}}}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path)

        request = [{}, {'fn.test': {}}]
        expected_response = [{}, {'ok': {'value': {'bool': False, 'int': 0, 'num': 0.1, 'str': '', 'arrBool': [False], 'objBool': {'a': False}, 'struct': {'required': False}, 'enum': {'two': {'required': False}}, 'fn': {'required': False}}}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubArg_0(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {'wrong': False}, '->': {'ok': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.fn.test.wrong', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubArg_1(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {'value': {'wrong': False}}, '->': {'ok': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.fn.test.value.wrong', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubArg_2(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {'value': {'bool': None}}, '->': {'ok': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.fn.test.value.bool', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubArg_3(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {'value': {'bool': 0}}, '->': {'ok': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.fn.test.value.bool', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubArg_4(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {'value': {'bool': ''}}, '->': {'ok': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.fn.test.value.bool', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubArg_5(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {'value': {'bool': []}}, '->': {'ok': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.fn.test.value.bool', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubArg_6(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {'value': {'bool': {}}}, '->': {'ok': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.fn.test.value.bool', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubArg_7(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {'value': {'int': None}}, '->': {'ok': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.fn.test.value.int', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubArg_8(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {'value': {'int': False}}, '->': {'ok': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.fn.test.value.int', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubArg_9(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {'value': {'int': 0.1}}, '->': {'ok': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.fn.test.value.int', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubArg_10(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {'value': {'int': ''}}, '->': {'ok': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.fn.test.value.int', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubArg_11(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {'value': {'int': []}}, '->': {'ok': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.fn.test.value.int', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubArg_12(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {'value': {'int': {}}}, '->': {'ok': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.fn.test.value.int', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubArg_13(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {'value': {'num': None}}, '->': {'ok': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.fn.test.value.num', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubArg_14(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {'value': {'num': False}}, '->': {'ok': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.fn.test.value.num', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubArg_15(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {'value': {'num': ''}}, '->': {'ok': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.fn.test.value.num', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubArg_16(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {'value': {'num': []}}, '->': {'ok': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.fn.test.value.num', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubArg_17(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {'value': {'num': {}}}, '->': {'ok': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.fn.test.value.num', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubArg_18(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {'value': {'str': None}}, '->': {'ok': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.fn.test.value.str', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubArg_19(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {'value': {'str': False}}, '->': {'ok': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.fn.test.value.str', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubArg_20(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {'value': {'str': 0}}, '->': {'ok': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.fn.test.value.str', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubArg_21(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {'value': {'str': []}}, '->': {'ok': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.fn.test.value.str', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubArg_22(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {'value': {'str': {}}}, '->': {'ok': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.fn.test.value.str', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubArg_23(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {'value': {'arrBool': None}}, '->': {'ok': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.fn.test.value.arrBool', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubArg_24(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {'value': {'arrBool': False}}, '->': {'ok': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.fn.test.value.arrBool', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubArg_25(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {'value': {'arrBool': 0}}, '->': {'ok': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.fn.test.value.arrBool', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubArg_26(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {'value': {'arrBool': ''}}, '->': {'ok': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.fn.test.value.arrBool', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubArg_27(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {'value': {'arrBool': {}}}, '->': {'ok': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.fn.test.value.arrBool', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubArg_28(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {'value': {'arrBool': [0]}}, '->': {'ok': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.fn.test.value.arrBool[0]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubArg_29(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {'value': {'arrBool': ['']}}, '->': {'ok': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.fn.test.value.arrBool[0]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubArg_30(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {'value': {'arrBool': [[]]}}, '->': {'ok': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.fn.test.value.arrBool[0]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubArg_31(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {'value': {'arrBool': [{}]}}, '->': {'ok': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.fn.test.value.arrBool[0]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubArg_32(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {'value': {'objBool': None}}, '->': {'ok': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.fn.test.value.objBool', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubArg_33(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {'value': {'objBool': False}}, '->': {'ok': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.fn.test.value.objBool', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubArg_34(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {'value': {'objBool': 0}}, '->': {'ok': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.fn.test.value.objBool', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubArg_35(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {'value': {'objBool': ''}}, '->': {'ok': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.fn.test.value.objBool', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubArg_36(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {'value': {'objBool': []}}, '->': {'ok': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.fn.test.value.objBool', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubArg_37(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {'value': {'objBool': {'a': 0}}}, '->': {'ok': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.fn.test.value.objBool{a}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubArg_38(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {'value': {'objBool': {'a': ''}}}, '->': {'ok': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.fn.test.value.objBool{a}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubArg_39(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {'value': {'objBool': {'a': []}}}, '->': {'ok': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.fn.test.value.objBool{a}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubArg_40(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {'value': {'objBool': {'a': {}}}}, '->': {'ok': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.fn.test.value.objBool{a}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubResult_0(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {}, '->': {'wrong': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.->.wrong', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubResult_1(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {}, '->': {'ok': {'value': {'wrong': False}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.->.ok.value.wrong', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubResult_2(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {}, '->': {'ok': {'value': {'bool': None}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.->.ok.value.bool', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubResult_3(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {}, '->': {'ok': {'value': {'bool': 0}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.->.ok.value.bool', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubResult_4(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {}, '->': {'ok': {'value': {'bool': ''}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.->.ok.value.bool', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubResult_5(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {}, '->': {'ok': {'value': {'bool': []}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.->.ok.value.bool', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubResult_6(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {}, '->': {'ok': {'value': {'bool': {}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.->.ok.value.bool', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubResult_7(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {}, '->': {'ok': {'value': {'int': None}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.->.ok.value.int', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubResult_8(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {}, '->': {'ok': {'value': {'int': False}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.->.ok.value.int', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubResult_9(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {}, '->': {'ok': {'value': {'int': 0.1}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.->.ok.value.int', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubResult_10(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {}, '->': {'ok': {'value': {'int': ''}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.->.ok.value.int', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubResult_11(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {}, '->': {'ok': {'value': {'int': []}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.->.ok.value.int', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubResult_12(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {}, '->': {'ok': {'value': {'int': {}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.->.ok.value.int', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubResult_13(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {}, '->': {'ok': {'value': {'num': None}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.->.ok.value.num', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubResult_14(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {}, '->': {'ok': {'value': {'num': False}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.->.ok.value.num', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubResult_15(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {}, '->': {'ok': {'value': {'num': ''}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.->.ok.value.num', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubResult_16(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {}, '->': {'ok': {'value': {'num': []}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.->.ok.value.num', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubResult_17(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {}, '->': {'ok': {'value': {'num': {}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.->.ok.value.num', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubResult_18(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {}, '->': {'ok': {'value': {'str': None}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.->.ok.value.str', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubResult_19(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {}, '->': {'ok': {'value': {'str': False}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.->.ok.value.str', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubResult_20(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {}, '->': {'ok': {'value': {'str': 0}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.->.ok.value.str', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubResult_21(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {}, '->': {'ok': {'value': {'str': []}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.->.ok.value.str', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubResult_22(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {}, '->': {'ok': {'value': {'str': {}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.->.ok.value.str', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubResult_23(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {}, '->': {'ok': {'value': {'arrBool': None}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.->.ok.value.arrBool', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubResult_24(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {}, '->': {'ok': {'value': {'arrBool': False}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.->.ok.value.arrBool', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubResult_25(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {}, '->': {'ok': {'value': {'arrBool': 0}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.->.ok.value.arrBool', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubResult_26(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {}, '->': {'ok': {'value': {'arrBool': ''}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.->.ok.value.arrBool', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubResult_27(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {}, '->': {'ok': {'value': {'arrBool': {}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.->.ok.value.arrBool', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubResult_28(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {}, '->': {'ok': {'value': {'arrBool': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.->.ok.value.arrBool[0]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubResult_29(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {}, '->': {'ok': {'value': {'arrBool': ['']}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.->.ok.value.arrBool[0]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubResult_30(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {}, '->': {'ok': {'value': {'arrBool': [[]]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.->.ok.value.arrBool[0]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubResult_31(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {}, '->': {'ok': {'value': {'arrBool': [{}]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.->.ok.value.arrBool[0]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubResult_32(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {}, '->': {'ok': {'value': {'objBool': None}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.->.ok.value.objBool', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubResult_33(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {}, '->': {'ok': {'value': {'objBool': False}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.->.ok.value.objBool', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubResult_34(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {}, '->': {'ok': {'value': {'objBool': 0}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.->.ok.value.objBool', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubResult_35(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {}, '->': {'ok': {'value': {'objBool': ''}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.->.ok.value.objBool', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubResult_36(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {}, '->': {'ok': {'value': {'objBool': []}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.->.ok.value.objBool', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubResult_37(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {}, '->': {'ok': {'value': {'objBool': {'a': 0}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.->.ok.value.objBool{a}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubResult_38(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {}, '->': {'ok': {'value': {'objBool': {'a': ''}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.->.ok.value.objBool{a}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubResult_39(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {}, '->': {'ok': {'value': {'objBool': {'a': []}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.->.ok.value.objBool{a}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_invalidStubResult_40(self):
        request = [{}, {'fn._createStub': {'stub': {'fn.test': {}, '->': {'ok': {'value': {'objBool': {'a': {}}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn._createStub.stub.->.ok.value.objBool{a}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path)


class SchemaTestCases(unittest.TestCase):
                              
    @classmethod
    def setUpClass(cls):
        cls.server = schema_server.start('../../test/schema.japi.json')
    
    @classmethod
    def tearDownClass(cls):
        cls.server.terminate()
        cls.server.wait()
                              
                        

    def test_schema_0(self):
        request = [{}, {'fn.validateSchema': {'schema': [{'struct.Example': {}}, {'struct.Example': {}}]}}]
        expected_response = [{}, {'errorValidationFailure': {'cases': [{'path': '[1]', 'reason': {'DuplicateSchemaKey': {'schemaKey': 'struct.Example'}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_schema_1(self):
        request = [{}, {'fn.validateSchema': {'schema': [{'invalid.Example': {}}]}}]
        expected_response = [{}, {'errorValidationFailure': {'cases': [{'path': '[0]', 'reason': {'DefinitionMustHaveOneKeyMatchingRegex': {'regex': '^((fn|trait|info)|((struct|enum|ext)(<[0-2]>)?))\\..*'}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_schema_2(self):
        request = [{}, {'fn.validateSchema': {'schema': False}}]
        expected_response = [{}, {'errorValidationFailure': {'cases': [{'path': '(document-root)', 'reason': {'ArrayTypeRequired': {}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_schema_3(self):
        request = [{}, {'fn.validateSchema': {'schema': 0}}]
        expected_response = [{}, {'errorValidationFailure': {'cases': [{'path': '(document-root)', 'reason': {'ArrayTypeRequired': {}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_schema_4(self):
        request = [{}, {'fn.validateSchema': {'schema': ''}}]
        expected_response = [{}, {'errorValidationFailure': {'cases': [{'path': '(document-root)', 'reason': {'ArrayTypeRequired': {}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_schema_5(self):
        request = [{}, {'fn.validateSchema': {'schema': {}}}]
        expected_response = [{}, {'errorValidationFailure': {'cases': [{'path': '(document-root)', 'reason': {'ArrayTypeRequired': {}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_schema_6(self):
        request = [{}, {'fn.validateSchema': {'schema': [{'fn.example': {'arg1': ['boolean']}, '->': {'ok': {}}}, {'trait.Collide': {'fn.*': {'arg1': ['boolean']}, '->': {}}}]}}]
        expected_response = [{}, {'errorValidationFailure': {'cases': [{'path': '[1].trait.Collide.fn.*.arg1', 'reason': {'TraitArgumentFieldAlreadyInUseByFunction': {'fn': 'fn.example'}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_schema_7(self):
        request = [{}, {'fn.validateSchema': {'schema': [{'fn.example': {}, '->': {'ok': {}, 'err': {}}}, {'trait.Collide': {'fn.*': {}, '->': {'err': {}}}}]}}]
        expected_response = [{}, {'errorValidationFailure': {'cases': [{'path': '[1].trait.Collide.->.err', 'reason': {'TraitResultValueAlreadyInUseByFunction': {'fn': 'fn.example'}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_schema_8(self):
        request = [{}, {'fn.validateSchema': {'schema': [{'trait.Example': ['wrong']}]}}]
        expected_response = [{}, {'errorValidationFailure': {'cases': [{'path': '[0].trait.Example', 'reason': {'ObjectTypeRequired': {}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_schema_9(self):
        request = [{}, {'fn.validateSchema': {'schema': [{'trait.Example': {'fn._*': {}, '->': {}}}]}}]
        expected_response = [{}, {'errorValidationFailure': {'cases': [{'path': '[0].trait.Example', 'reason': {'InvalidTrait': {}}}]}}]
        verify_case(self, request, expected_response, path)

    def test_schema_10(self):
        request = [{}, {'fn.validateSchema': {'schema': [{'trait.Example': {'fn._?*': {}, '->': {}}}]}}]
        expected_response = [{}, {'errorValidationFailure': {'cases': [{'path': '[0].trait.Example', 'reason': {'TraitDefinitionCannotTargetInternalFunctions': {}}}]}}]
        verify_case(self, request, expected_response, path)


class ClientTestCases(unittest.TestCase):
                              
    @classmethod
    def setUpClass(cls):
        initial_list = [0] * 10000
        cls.backdoor_results = ShareableList(initial_list)
        cls.client_backdoor_results = ShareableList(initial_list)
        cls.process = multiprocessing.Process(target=backdoor_handler, args=(path, cls.backdoor_results))
        cls.process.start()
        cls.client_process = multiprocessing.Process(target=client_backdoor_handler, args=(path, cls.client_backdoor_results))
        cls.client_process.start()                                                                            
        
        cls.servers = client_server.start('../../test/example.japi.json')
    
    @classmethod
    def tearDownClass(cls):
        cls.backdoor_results.shm.close()
        cls.backdoor_results.shm.unlink()
        cls.client_backdoor_results.shm.close()
        cls.client_backdoor_results.shm.unlink()
        cls.process.terminate()
        cls.process.join()
        cls.client_process.terminate()
        cls.client_process.join()
        for server in cls.servers:
            server.terminate()
        for server in cls.servers:
            server.wait()

    def setUp(self):
        self.__class__.backdoor_results[0] += 1
        self.__class__.client_backdoor_results[0] += 1
                        
    
    def test_client_boolean_0(self):
        request = [{'ok': {'value': {'bool': False}}}, {'fn.test': {'value': {'bool': False}}}]
        expected_response = [{}, {'ok': {'value': {'bool': False}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_1(self):
        request = [{'ok': {'value': {'bool': True}}}, {'fn.test': {'value': {'bool': True}}}]
        expected_response = [{}, {'ok': {'value': {'bool': True}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_2(self):
        request = [{}, {'fn.test': {'value': {'bool': None}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.bool', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_3(self):
        request = [{}, {'fn.test': {'value': {'bool': 0}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.bool', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_4(self):
        request = [{}, {'fn.test': {'value': {'bool': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.bool', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_5(self):
        request = [{}, {'fn.test': {'value': {'bool': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.bool', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_6(self):
        request = [{}, {'fn.test': {'value': {'bool': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.bool', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_7(self):
        request = [{}, {'fn.test': {'value': {'bool': {}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.bool', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_8(self):
        request = [{'ok': {'value': {'bool': None}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.bool', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_9(self):
        request = [{'ok': {'value': {'bool': 0}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.bool', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_10(self):
        request = [{'ok': {'value': {'bool': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.bool', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_11(self):
        request = [{'ok': {'value': {'bool': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.bool', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_12(self):
        request = [{'ok': {'value': {'bool': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.bool', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_13(self):
        request = [{'ok': {'value': {'bool': {}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.bool', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_14(self):
        request = [{'ok': {'value': {'nullBool': None}}}, {'fn.test': {'value': {'nullBool': None}}}]
        expected_response = [{}, {'ok': {'value': {'nullBool': None}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_15(self):
        request = [{'ok': {'value': {'nullBool': False}}}, {'fn.test': {'value': {'nullBool': False}}}]
        expected_response = [{}, {'ok': {'value': {'nullBool': False}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_16(self):
        request = [{'ok': {'value': {'nullBool': True}}}, {'fn.test': {'value': {'nullBool': True}}}]
        expected_response = [{}, {'ok': {'value': {'nullBool': True}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_17(self):
        request = [{}, {'fn.test': {'value': {'nullBool': 0}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullBool', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_18(self):
        request = [{}, {'fn.test': {'value': {'nullBool': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullBool', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_19(self):
        request = [{}, {'fn.test': {'value': {'nullBool': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullBool', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_20(self):
        request = [{}, {'fn.test': {'value': {'nullBool': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullBool', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_21(self):
        request = [{}, {'fn.test': {'value': {'nullBool': {}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullBool', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_22(self):
        request = [{'ok': {'value': {'nullBool': 0}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullBool', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_23(self):
        request = [{'ok': {'value': {'nullBool': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullBool', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_24(self):
        request = [{'ok': {'value': {'nullBool': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullBool', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_25(self):
        request = [{'ok': {'value': {'nullBool': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullBool', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_26(self):
        request = [{'ok': {'value': {'nullBool': {}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullBool', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_27(self):
        request = [{'ok': {'value': {'arrBool': []}}}, {'fn.test': {'value': {'arrBool': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrBool': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_28(self):
        request = [{'ok': {'value': {'arrBool': [False]}}}, {'fn.test': {'value': {'arrBool': [False]}}}]
        expected_response = [{}, {'ok': {'value': {'arrBool': [False]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_29(self):
        request = [{'ok': {'value': {'arrBool': [True]}}}, {'fn.test': {'value': {'arrBool': [True]}}}]
        expected_response = [{}, {'ok': {'value': {'arrBool': [True]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_30(self):
        request = [{'ok': {'value': {'arrBool': [False, True]}}}, {'fn.test': {'value': {'arrBool': [False, True]}}}]
        expected_response = [{}, {'ok': {'value': {'arrBool': [False, True]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_31(self):
        request = [{}, {'fn.test': {'value': {'arrBool': [False, None]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrBool[1]', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_32(self):
        request = [{}, {'fn.test': {'value': {'arrBool': [False, 0]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrBool[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_33(self):
        request = [{}, {'fn.test': {'value': {'arrBool': [False, 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrBool[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_34(self):
        request = [{}, {'fn.test': {'value': {'arrBool': [False, '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrBool[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_35(self):
        request = [{}, {'fn.test': {'value': {'arrBool': [False, []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrBool[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_36(self):
        request = [{}, {'fn.test': {'value': {'arrBool': [False, {}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrBool[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_37(self):
        request = [{'ok': {'value': {'arrBool': [False, None]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrBool[1]', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_38(self):
        request = [{'ok': {'value': {'arrBool': [False, 0]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrBool[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_39(self):
        request = [{'ok': {'value': {'arrBool': [False, 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrBool[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_40(self):
        request = [{'ok': {'value': {'arrBool': [False, '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrBool[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_41(self):
        request = [{'ok': {'value': {'arrBool': [False, []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrBool[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_42(self):
        request = [{'ok': {'value': {'arrBool': [False, {}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrBool[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_43(self):
        request = [{'ok': {'value': {'arrNullBool': []}}}, {'fn.test': {'value': {'arrNullBool': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullBool': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_44(self):
        request = [{'ok': {'value': {'arrNullBool': [None]}}}, {'fn.test': {'value': {'arrNullBool': [None]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullBool': [None]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_45(self):
        request = [{'ok': {'value': {'arrNullBool': [False]}}}, {'fn.test': {'value': {'arrNullBool': [False]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullBool': [False]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_46(self):
        request = [{'ok': {'value': {'arrNullBool': [True]}}}, {'fn.test': {'value': {'arrNullBool': [True]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullBool': [True]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_47(self):
        request = [{'ok': {'value': {'arrNullBool': [None, False, True]}}}, {'fn.test': {'value': {'arrNullBool': [None, False, True]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullBool': [None, False, True]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_48(self):
        request = [{}, {'fn.test': {'value': {'arrNullBool': [False, 0]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullBool[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_49(self):
        request = [{}, {'fn.test': {'value': {'arrNullBool': [False, 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullBool[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_50(self):
        request = [{}, {'fn.test': {'value': {'arrNullBool': [False, '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullBool[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_51(self):
        request = [{}, {'fn.test': {'value': {'arrNullBool': [False, []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullBool[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_52(self):
        request = [{}, {'fn.test': {'value': {'arrNullBool': [False, {}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullBool[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_53(self):
        request = [{'ok': {'value': {'arrNullBool': [False, 0]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullBool[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_54(self):
        request = [{'ok': {'value': {'arrNullBool': [False, 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullBool[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_55(self):
        request = [{'ok': {'value': {'arrNullBool': [False, '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullBool[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_56(self):
        request = [{'ok': {'value': {'arrNullBool': [False, []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullBool[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_57(self):
        request = [{'ok': {'value': {'arrNullBool': [False, {}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullBool[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_58(self):
        request = [{'ok': {'value': {'objBool': {}}}}, {'fn.test': {'value': {'objBool': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objBool': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_59(self):
        request = [{'ok': {'value': {'objBool': {'a': False}}}}, {'fn.test': {'value': {'objBool': {'a': False}}}}]
        expected_response = [{}, {'ok': {'value': {'objBool': {'a': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_60(self):
        request = [{'ok': {'value': {'objBool': {'a': True}}}}, {'fn.test': {'value': {'objBool': {'a': True}}}}]
        expected_response = [{}, {'ok': {'value': {'objBool': {'a': True}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_61(self):
        request = [{'ok': {'value': {'objBool': {'a': False, 'b': True}}}}, {'fn.test': {'value': {'objBool': {'a': False, 'b': True}}}}]
        expected_response = [{}, {'ok': {'value': {'objBool': {'a': False, 'b': True}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_62(self):
        request = [{}, {'fn.test': {'value': {'objBool': {'a': False, 'b': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objBool{b}', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_63(self):
        request = [{}, {'fn.test': {'value': {'objBool': {'a': False, 'b': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objBool{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_64(self):
        request = [{}, {'fn.test': {'value': {'objBool': {'a': False, 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objBool{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_65(self):
        request = [{}, {'fn.test': {'value': {'objBool': {'a': False, 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objBool{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_66(self):
        request = [{}, {'fn.test': {'value': {'objBool': {'a': False, 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objBool{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_67(self):
        request = [{}, {'fn.test': {'value': {'objBool': {'a': False, 'b': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objBool{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_68(self):
        request = [{'ok': {'value': {'objBool': {'a': False, 'b': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objBool{b}', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_69(self):
        request = [{'ok': {'value': {'objBool': {'a': False, 'b': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objBool{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_70(self):
        request = [{'ok': {'value': {'objBool': {'a': False, 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objBool{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_71(self):
        request = [{'ok': {'value': {'objBool': {'a': False, 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objBool{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_72(self):
        request = [{'ok': {'value': {'objBool': {'a': False, 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objBool{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_73(self):
        request = [{'ok': {'value': {'objBool': {'a': False, 'b': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objBool{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_74(self):
        request = [{'ok': {'value': {'objNullBool': {}}}}, {'fn.test': {'value': {'objNullBool': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullBool': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_75(self):
        request = [{'ok': {'value': {'objNullBool': {'a': None}}}}, {'fn.test': {'value': {'objNullBool': {'a': None}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullBool': {'a': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_76(self):
        request = [{'ok': {'value': {'objNullBool': {'a': False}}}}, {'fn.test': {'value': {'objNullBool': {'a': False}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullBool': {'a': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_77(self):
        request = [{'ok': {'value': {'objNullBool': {'a': True}}}}, {'fn.test': {'value': {'objNullBool': {'a': True}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullBool': {'a': True}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_78(self):
        request = [{'ok': {'value': {'objNullBool': {'a': None, 'b': False, 'c': True}}}}, {'fn.test': {'value': {'objNullBool': {'a': None, 'b': False, 'c': True}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullBool': {'a': None, 'b': False, 'c': True}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_79(self):
        request = [{}, {'fn.test': {'value': {'objNullBool': {'a': False, 'b': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullBool{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_80(self):
        request = [{}, {'fn.test': {'value': {'objNullBool': {'a': False, 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullBool{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_81(self):
        request = [{}, {'fn.test': {'value': {'objNullBool': {'a': False, 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullBool{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_82(self):
        request = [{}, {'fn.test': {'value': {'objNullBool': {'a': False, 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullBool{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_83(self):
        request = [{}, {'fn.test': {'value': {'objNullBool': {'a': False, 'b': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullBool{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_84(self):
        request = [{'ok': {'value': {'objNullBool': {'a': False, 'b': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullBool{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_85(self):
        request = [{'ok': {'value': {'objNullBool': {'a': False, 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullBool{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_86(self):
        request = [{'ok': {'value': {'objNullBool': {'a': False, 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullBool{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_87(self):
        request = [{'ok': {'value': {'objNullBool': {'a': False, 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullBool{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_88(self):
        request = [{'ok': {'value': {'objNullBool': {'a': False, 'b': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullBool{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_89(self):
        request = [{'ok': {'value': {'pStrBool': {'wrap': False}}}}, {'fn.test': {'value': {'pStrBool': {'wrap': False}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrBool': {'wrap': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_90(self):
        request = [{'ok': {'value': {'pStrBool': {'wrap': True}}}}, {'fn.test': {'value': {'pStrBool': {'wrap': True}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrBool': {'wrap': True}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_91(self):
        request = [{}, {'fn.test': {'value': {'pStrBool': {'wrap': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_92(self):
        request = [{}, {'fn.test': {'value': {'pStrBool': {'wrap': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_93(self):
        request = [{}, {'fn.test': {'value': {'pStrBool': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_94(self):
        request = [{}, {'fn.test': {'value': {'pStrBool': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_95(self):
        request = [{}, {'fn.test': {'value': {'pStrBool': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_96(self):
        request = [{}, {'fn.test': {'value': {'pStrBool': {'wrap': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_97(self):
        request = [{'ok': {'value': {'pStrBool': {'wrap': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_98(self):
        request = [{'ok': {'value': {'pStrBool': {'wrap': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_99(self):
        request = [{'ok': {'value': {'pStrBool': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_100(self):
        request = [{'ok': {'value': {'pStrBool': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_101(self):
        request = [{'ok': {'value': {'pStrBool': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_102(self):
        request = [{'ok': {'value': {'pStrBool': {'wrap': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_103(self):
        request = [{'ok': {'value': {'pStrNullBool': {'wrap': None}}}}, {'fn.test': {'value': {'pStrNullBool': {'wrap': None}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullBool': {'wrap': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_104(self):
        request = [{'ok': {'value': {'pStrNullBool': {'wrap': False}}}}, {'fn.test': {'value': {'pStrNullBool': {'wrap': False}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullBool': {'wrap': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_105(self):
        request = [{'ok': {'value': {'pStrNullBool': {'wrap': True}}}}, {'fn.test': {'value': {'pStrNullBool': {'wrap': True}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullBool': {'wrap': True}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_106(self):
        request = [{}, {'fn.test': {'value': {'pStrNullBool': {'wrap': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_107(self):
        request = [{}, {'fn.test': {'value': {'pStrNullBool': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_108(self):
        request = [{}, {'fn.test': {'value': {'pStrNullBool': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_109(self):
        request = [{}, {'fn.test': {'value': {'pStrNullBool': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_110(self):
        request = [{}, {'fn.test': {'value': {'pStrNullBool': {'wrap': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_111(self):
        request = [{'ok': {'value': {'pStrNullBool': {'wrap': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_112(self):
        request = [{'ok': {'value': {'pStrNullBool': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_113(self):
        request = [{'ok': {'value': {'pStrNullBool': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_114(self):
        request = [{'ok': {'value': {'pStrNullBool': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_115(self):
        request = [{'ok': {'value': {'pStrNullBool': {'wrap': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_116(self):
        request = [{'ok': {'value': {'pEnumBool': {'one': {}}}}}, {'fn.test': {'value': {'pEnumBool': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumBool': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_117(self):
        request = [{'ok': {'value': {'pEnumBool': {'two': {'ewrap': False}}}}}, {'fn.test': {'value': {'pEnumBool': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumBool': {'two': {'ewrap': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_118(self):
        request = [{'ok': {'value': {'pEnumBool': {'two': {'ewrap': True}}}}}, {'fn.test': {'value': {'pEnumBool': {'two': {'ewrap': True}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumBool': {'two': {'ewrap': True}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_119(self):
        request = [{}, {'fn.test': {'value': {'pEnumBool': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_120(self):
        request = [{}, {'fn.test': {'value': {'pEnumBool': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_121(self):
        request = [{}, {'fn.test': {'value': {'pEnumBool': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_122(self):
        request = [{}, {'fn.test': {'value': {'pEnumBool': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_123(self):
        request = [{}, {'fn.test': {'value': {'pEnumBool': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_124(self):
        request = [{}, {'fn.test': {'value': {'pEnumBool': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_125(self):
        request = [{'ok': {'value': {'pEnumBool': {'two': {'ewrap': None}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_126(self):
        request = [{'ok': {'value': {'pEnumBool': {'two': {'ewrap': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_127(self):
        request = [{'ok': {'value': {'pEnumBool': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_128(self):
        request = [{'ok': {'value': {'pEnumBool': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_129(self):
        request = [{'ok': {'value': {'pEnumBool': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_130(self):
        request = [{'ok': {'value': {'pEnumBool': {'two': {'ewrap': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_131(self):
        request = [{'ok': {'value': {'pEnumNullBool': {'one': {}}}}}, {'fn.test': {'value': {'pEnumNullBool': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullBool': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_132(self):
        request = [{'ok': {'value': {'pEnumNullBool': {'two': {'ewrap': None}}}}}, {'fn.test': {'value': {'pEnumNullBool': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullBool': {'two': {'ewrap': None}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_133(self):
        request = [{'ok': {'value': {'pEnumNullBool': {'two': {'ewrap': False}}}}}, {'fn.test': {'value': {'pEnumNullBool': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullBool': {'two': {'ewrap': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_134(self):
        request = [{'ok': {'value': {'pEnumNullBool': {'two': {'ewrap': True}}}}}, {'fn.test': {'value': {'pEnumNullBool': {'two': {'ewrap': True}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullBool': {'two': {'ewrap': True}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_135(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullBool': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_136(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullBool': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_137(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullBool': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_138(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullBool': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_139(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullBool': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_140(self):
        request = [{'ok': {'value': {'pEnumNullBool': {'two': {'ewrap': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_141(self):
        request = [{'ok': {'value': {'pEnumNullBool': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_142(self):
        request = [{'ok': {'value': {'pEnumNullBool': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_143(self):
        request = [{'ok': {'value': {'pEnumNullBool': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_boolean_144(self):
        request = [{'ok': {'value': {'pEnumNullBool': {'two': {'ewrap': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_0(self):
        request = [{'ok': {'value': {'int': 0}}}, {'fn.test': {'value': {'int': 0}}}]
        expected_response = [{}, {'ok': {'value': {'int': 0}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_1(self):
        request = [{'ok': {'value': {'int': -1}}}, {'fn.test': {'value': {'int': -1}}}]
        expected_response = [{}, {'ok': {'value': {'int': -1}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_2(self):
        request = [{'ok': {'value': {'int': 1}}}, {'fn.test': {'value': {'int': 1}}}]
        expected_response = [{}, {'ok': {'value': {'int': 1}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_3(self):
        request = [{'ok': {'value': {'int': 9223372036854775807}}}, {'fn.test': {'value': {'int': 9223372036854775807}}}]
        expected_response = [{}, {'ok': {'value': {'int': 9223372036854775807}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_4(self):
        request = [{'ok': {'value': {'int': -9223372036854775808}}}, {'fn.test': {'value': {'int': -9223372036854775808}}}]
        expected_response = [{}, {'ok': {'value': {'int': -9223372036854775808}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_5(self):
        request = [{}, {'fn.test': {'value': {'int': 9223372036854775808}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.int', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_6(self):
        request = [{}, {'fn.test': {'value': {'int': -9223372036854775809}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.int', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_7(self):
        request = [{}, {'fn.test': {'value': {'int': None}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.int', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_8(self):
        request = [{}, {'fn.test': {'value': {'int': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.int', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_9(self):
        request = [{}, {'fn.test': {'value': {'int': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.int', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_10(self):
        request = [{}, {'fn.test': {'value': {'int': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.int', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_11(self):
        request = [{}, {'fn.test': {'value': {'int': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.int', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_12(self):
        request = [{}, {'fn.test': {'value': {'int': {}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.int', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_13(self):
        request = [{'ok': {'value': {'int': 9223372036854775808}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.int', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_14(self):
        request = [{'ok': {'value': {'int': -9223372036854775809}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.int', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_15(self):
        request = [{'ok': {'value': {'int': None}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.int', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_16(self):
        request = [{'ok': {'value': {'int': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.int', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_17(self):
        request = [{'ok': {'value': {'int': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.int', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_18(self):
        request = [{'ok': {'value': {'int': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.int', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_19(self):
        request = [{'ok': {'value': {'int': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.int', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_20(self):
        request = [{'ok': {'value': {'int': {}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.int', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_21(self):
        request = [{'ok': {'value': {'nullInt': None}}}, {'fn.test': {'value': {'nullInt': None}}}]
        expected_response = [{}, {'ok': {'value': {'nullInt': None}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_22(self):
        request = [{'ok': {'value': {'nullInt': 0}}}, {'fn.test': {'value': {'nullInt': 0}}}]
        expected_response = [{}, {'ok': {'value': {'nullInt': 0}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_23(self):
        request = [{'ok': {'value': {'nullInt': -1}}}, {'fn.test': {'value': {'nullInt': -1}}}]
        expected_response = [{}, {'ok': {'value': {'nullInt': -1}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_24(self):
        request = [{'ok': {'value': {'nullInt': 1}}}, {'fn.test': {'value': {'nullInt': 1}}}]
        expected_response = [{}, {'ok': {'value': {'nullInt': 1}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_25(self):
        request = [{'ok': {'value': {'nullInt': 9223372036854775807}}}, {'fn.test': {'value': {'nullInt': 9223372036854775807}}}]
        expected_response = [{}, {'ok': {'value': {'nullInt': 9223372036854775807}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_26(self):
        request = [{'ok': {'value': {'nullInt': -9223372036854775808}}}, {'fn.test': {'value': {'nullInt': -9223372036854775808}}}]
        expected_response = [{}, {'ok': {'value': {'nullInt': -9223372036854775808}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_27(self):
        request = [{}, {'fn.test': {'value': {'nullInt': 9223372036854775808}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullInt', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_28(self):
        request = [{}, {'fn.test': {'value': {'nullInt': -9223372036854775809}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullInt', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_29(self):
        request = [{}, {'fn.test': {'value': {'nullInt': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullInt', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_30(self):
        request = [{}, {'fn.test': {'value': {'nullInt': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullInt', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_31(self):
        request = [{}, {'fn.test': {'value': {'nullInt': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullInt', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_32(self):
        request = [{}, {'fn.test': {'value': {'nullInt': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullInt', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_33(self):
        request = [{}, {'fn.test': {'value': {'nullInt': {}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullInt', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_34(self):
        request = [{'ok': {'value': {'nullInt': 9223372036854775808}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullInt', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_35(self):
        request = [{'ok': {'value': {'nullInt': -9223372036854775809}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullInt', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_36(self):
        request = [{'ok': {'value': {'nullInt': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullInt', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_37(self):
        request = [{'ok': {'value': {'nullInt': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullInt', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_38(self):
        request = [{'ok': {'value': {'nullInt': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullInt', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_39(self):
        request = [{'ok': {'value': {'nullInt': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullInt', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_40(self):
        request = [{'ok': {'value': {'nullInt': {}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullInt', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_41(self):
        request = [{'ok': {'value': {'arrInt': []}}}, {'fn.test': {'value': {'arrInt': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrInt': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_42(self):
        request = [{'ok': {'value': {'arrInt': [0]}}}, {'fn.test': {'value': {'arrInt': [0]}}}]
        expected_response = [{}, {'ok': {'value': {'arrInt': [0]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_43(self):
        request = [{'ok': {'value': {'arrInt': [-1]}}}, {'fn.test': {'value': {'arrInt': [-1]}}}]
        expected_response = [{}, {'ok': {'value': {'arrInt': [-1]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_44(self):
        request = [{'ok': {'value': {'arrInt': [1]}}}, {'fn.test': {'value': {'arrInt': [1]}}}]
        expected_response = [{}, {'ok': {'value': {'arrInt': [1]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_45(self):
        request = [{'ok': {'value': {'arrInt': [9223372036854775807]}}}, {'fn.test': {'value': {'arrInt': [9223372036854775807]}}}]
        expected_response = [{}, {'ok': {'value': {'arrInt': [9223372036854775807]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_46(self):
        request = [{'ok': {'value': {'arrInt': [-9223372036854775808]}}}, {'fn.test': {'value': {'arrInt': [-9223372036854775808]}}}]
        expected_response = [{}, {'ok': {'value': {'arrInt': [-9223372036854775808]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_47(self):
        request = [{'ok': {'value': {'arrInt': [0, -1, 1, 9223372036854775807, -9223372036854775808]}}}, {'fn.test': {'value': {'arrInt': [0, -1, 1, 9223372036854775807, -9223372036854775808]}}}]
        expected_response = [{}, {'ok': {'value': {'arrInt': [0, -1, 1, 9223372036854775807, -9223372036854775808]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_48(self):
        request = [{}, {'fn.test': {'value': {'arrInt': [0, 9223372036854775808]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrInt[1]', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_49(self):
        request = [{}, {'fn.test': {'value': {'arrInt': [0, -9223372036854775809]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrInt[1]', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_50(self):
        request = [{}, {'fn.test': {'value': {'arrInt': [0, None]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrInt[1]', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_51(self):
        request = [{}, {'fn.test': {'value': {'arrInt': [0, False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrInt[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_52(self):
        request = [{}, {'fn.test': {'value': {'arrInt': [0, 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrInt[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_53(self):
        request = [{}, {'fn.test': {'value': {'arrInt': [0, '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrInt[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_54(self):
        request = [{}, {'fn.test': {'value': {'arrInt': [0, []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrInt[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_55(self):
        request = [{}, {'fn.test': {'value': {'arrInt': [0, {}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrInt[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_56(self):
        request = [{'ok': {'value': {'arrInt': [0, 9223372036854775808]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrInt[1]', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_57(self):
        request = [{'ok': {'value': {'arrInt': [0, -9223372036854775809]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrInt[1]', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_58(self):
        request = [{'ok': {'value': {'arrInt': [0, None]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrInt[1]', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_59(self):
        request = [{'ok': {'value': {'arrInt': [0, False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrInt[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_60(self):
        request = [{'ok': {'value': {'arrInt': [0, 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrInt[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_61(self):
        request = [{'ok': {'value': {'arrInt': [0, '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrInt[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_62(self):
        request = [{'ok': {'value': {'arrInt': [0, []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrInt[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_63(self):
        request = [{'ok': {'value': {'arrInt': [0, {}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrInt[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_64(self):
        request = [{'ok': {'value': {'arrNullInt': []}}}, {'fn.test': {'value': {'arrNullInt': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullInt': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_65(self):
        request = [{'ok': {'value': {'arrNullInt': [None]}}}, {'fn.test': {'value': {'arrNullInt': [None]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullInt': [None]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_66(self):
        request = [{'ok': {'value': {'arrNullInt': [0]}}}, {'fn.test': {'value': {'arrNullInt': [0]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullInt': [0]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_67(self):
        request = [{'ok': {'value': {'arrNullInt': [-1]}}}, {'fn.test': {'value': {'arrNullInt': [-1]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullInt': [-1]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_68(self):
        request = [{'ok': {'value': {'arrNullInt': [1]}}}, {'fn.test': {'value': {'arrNullInt': [1]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullInt': [1]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_69(self):
        request = [{'ok': {'value': {'arrNullInt': [9223372036854775807]}}}, {'fn.test': {'value': {'arrNullInt': [9223372036854775807]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullInt': [9223372036854775807]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_70(self):
        request = [{'ok': {'value': {'arrNullInt': [-9223372036854775808]}}}, {'fn.test': {'value': {'arrNullInt': [-9223372036854775808]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullInt': [-9223372036854775808]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_71(self):
        request = [{'ok': {'value': {'arrNullInt': [None, 0, -1, 1, 9223372036854775807, -9223372036854775808]}}}, {'fn.test': {'value': {'arrNullInt': [None, 0, -1, 1, 9223372036854775807, -9223372036854775808]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullInt': [None, 0, -1, 1, 9223372036854775807, -9223372036854775808]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_72(self):
        request = [{}, {'fn.test': {'value': {'arrNullInt': [0, 9223372036854775808]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullInt[1]', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_73(self):
        request = [{}, {'fn.test': {'value': {'arrNullInt': [0, -9223372036854775809]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullInt[1]', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_74(self):
        request = [{}, {'fn.test': {'value': {'arrNullInt': [0, False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullInt[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_75(self):
        request = [{}, {'fn.test': {'value': {'arrNullInt': [0, 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullInt[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_76(self):
        request = [{}, {'fn.test': {'value': {'arrNullInt': [0, '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullInt[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_77(self):
        request = [{}, {'fn.test': {'value': {'arrNullInt': [0, []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullInt[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_78(self):
        request = [{}, {'fn.test': {'value': {'arrNullInt': [0, {}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullInt[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_79(self):
        request = [{'ok': {'value': {'arrNullInt': [0, 9223372036854775808]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullInt[1]', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_80(self):
        request = [{'ok': {'value': {'arrNullInt': [0, -9223372036854775809]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullInt[1]', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_81(self):
        request = [{'ok': {'value': {'arrNullInt': [0, False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullInt[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_82(self):
        request = [{'ok': {'value': {'arrNullInt': [0, 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullInt[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_83(self):
        request = [{'ok': {'value': {'arrNullInt': [0, '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullInt[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_84(self):
        request = [{'ok': {'value': {'arrNullInt': [0, []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullInt[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_85(self):
        request = [{'ok': {'value': {'arrNullInt': [0, {}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullInt[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_86(self):
        request = [{'ok': {'value': {'objInt': {}}}}, {'fn.test': {'value': {'objInt': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objInt': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_87(self):
        request = [{'ok': {'value': {'objInt': {'a': 0}}}}, {'fn.test': {'value': {'objInt': {'a': 0}}}}]
        expected_response = [{}, {'ok': {'value': {'objInt': {'a': 0}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_88(self):
        request = [{'ok': {'value': {'objInt': {'a': -1}}}}, {'fn.test': {'value': {'objInt': {'a': -1}}}}]
        expected_response = [{}, {'ok': {'value': {'objInt': {'a': -1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_89(self):
        request = [{'ok': {'value': {'objInt': {'a': 1}}}}, {'fn.test': {'value': {'objInt': {'a': 1}}}}]
        expected_response = [{}, {'ok': {'value': {'objInt': {'a': 1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_90(self):
        request = [{'ok': {'value': {'objInt': {'a': 9223372036854775807}}}}, {'fn.test': {'value': {'objInt': {'a': 9223372036854775807}}}}]
        expected_response = [{}, {'ok': {'value': {'objInt': {'a': 9223372036854775807}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_91(self):
        request = [{'ok': {'value': {'objInt': {'a': -9223372036854775808}}}}, {'fn.test': {'value': {'objInt': {'a': -9223372036854775808}}}}]
        expected_response = [{}, {'ok': {'value': {'objInt': {'a': -9223372036854775808}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_92(self):
        request = [{'ok': {'value': {'objInt': {'a': 0, 'b': -1, 'c': 1, 'd': 9223372036854775807, 'e': -9223372036854775808}}}}, {'fn.test': {'value': {'objInt': {'a': 0, 'b': -1, 'c': 1, 'd': 9223372036854775807, 'e': -9223372036854775808}}}}]
        expected_response = [{}, {'ok': {'value': {'objInt': {'a': 0, 'b': -1, 'c': 1, 'd': 9223372036854775807, 'e': -9223372036854775808}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_93(self):
        request = [{}, {'fn.test': {'value': {'objInt': {'a': 0, 'b': 9223372036854775808}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objInt{b}', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_94(self):
        request = [{}, {'fn.test': {'value': {'objInt': {'a': 0, 'b': -9223372036854775809}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objInt{b}', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_95(self):
        request = [{}, {'fn.test': {'value': {'objInt': {'a': 0, 'b': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objInt{b}', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_96(self):
        request = [{}, {'fn.test': {'value': {'objInt': {'a': 0, 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objInt{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_97(self):
        request = [{}, {'fn.test': {'value': {'objInt': {'a': 0, 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objInt{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_98(self):
        request = [{}, {'fn.test': {'value': {'objInt': {'a': 0, 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objInt{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_99(self):
        request = [{}, {'fn.test': {'value': {'objInt': {'a': 0, 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objInt{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_100(self):
        request = [{}, {'fn.test': {'value': {'objInt': {'a': 0, 'b': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objInt{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_101(self):
        request = [{'ok': {'value': {'objInt': {'a': 0, 'b': 9223372036854775808}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objInt{b}', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_102(self):
        request = [{'ok': {'value': {'objInt': {'a': 0, 'b': -9223372036854775809}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objInt{b}', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_103(self):
        request = [{'ok': {'value': {'objInt': {'a': 0, 'b': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objInt{b}', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_104(self):
        request = [{'ok': {'value': {'objInt': {'a': 0, 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objInt{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_105(self):
        request = [{'ok': {'value': {'objInt': {'a': 0, 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objInt{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_106(self):
        request = [{'ok': {'value': {'objInt': {'a': 0, 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objInt{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_107(self):
        request = [{'ok': {'value': {'objInt': {'a': 0, 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objInt{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_108(self):
        request = [{'ok': {'value': {'objInt': {'a': 0, 'b': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objInt{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_109(self):
        request = [{'ok': {'value': {'objNullInt': {}}}}, {'fn.test': {'value': {'objNullInt': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullInt': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_110(self):
        request = [{'ok': {'value': {'objNullInt': {'a': None}}}}, {'fn.test': {'value': {'objNullInt': {'a': None}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullInt': {'a': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_111(self):
        request = [{'ok': {'value': {'objNullInt': {'a': 0}}}}, {'fn.test': {'value': {'objNullInt': {'a': 0}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullInt': {'a': 0}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_112(self):
        request = [{'ok': {'value': {'objNullInt': {'a': -1}}}}, {'fn.test': {'value': {'objNullInt': {'a': -1}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullInt': {'a': -1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_113(self):
        request = [{'ok': {'value': {'objNullInt': {'a': 1}}}}, {'fn.test': {'value': {'objNullInt': {'a': 1}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullInt': {'a': 1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_114(self):
        request = [{'ok': {'value': {'objNullInt': {'a': 9223372036854775807}}}}, {'fn.test': {'value': {'objNullInt': {'a': 9223372036854775807}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullInt': {'a': 9223372036854775807}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_115(self):
        request = [{'ok': {'value': {'objNullInt': {'a': -9223372036854775808}}}}, {'fn.test': {'value': {'objNullInt': {'a': -9223372036854775808}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullInt': {'a': -9223372036854775808}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_116(self):
        request = [{'ok': {'value': {'objNullInt': {'a': None, 'b': 0, 'c': -1, 'd': 1, 'e': 9223372036854775807, 'f': -9223372036854775808}}}}, {'fn.test': {'value': {'objNullInt': {'a': None, 'b': 0, 'c': -1, 'd': 1, 'e': 9223372036854775807, 'f': -9223372036854775808}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullInt': {'a': None, 'b': 0, 'c': -1, 'd': 1, 'e': 9223372036854775807, 'f': -9223372036854775808}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_117(self):
        request = [{}, {'fn.test': {'value': {'objNullInt': {'a': 0, 'b': 9223372036854775808}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullInt{b}', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_118(self):
        request = [{}, {'fn.test': {'value': {'objNullInt': {'a': 0, 'b': -9223372036854775809}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullInt{b}', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_119(self):
        request = [{}, {'fn.test': {'value': {'objNullInt': {'a': 0, 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullInt{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_120(self):
        request = [{}, {'fn.test': {'value': {'objNullInt': {'a': 0, 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullInt{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_121(self):
        request = [{}, {'fn.test': {'value': {'objNullInt': {'a': 0, 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullInt{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_122(self):
        request = [{}, {'fn.test': {'value': {'objNullInt': {'a': 0, 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullInt{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_123(self):
        request = [{}, {'fn.test': {'value': {'objNullInt': {'a': 0, 'b': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullInt{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_124(self):
        request = [{'ok': {'value': {'objNullInt': {'a': 0, 'b': 9223372036854775808}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullInt{b}', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_125(self):
        request = [{'ok': {'value': {'objNullInt': {'a': 0, 'b': -9223372036854775809}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullInt{b}', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_126(self):
        request = [{'ok': {'value': {'objNullInt': {'a': 0, 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullInt{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_127(self):
        request = [{'ok': {'value': {'objNullInt': {'a': 0, 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullInt{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_128(self):
        request = [{'ok': {'value': {'objNullInt': {'a': 0, 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullInt{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_129(self):
        request = [{'ok': {'value': {'objNullInt': {'a': 0, 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullInt{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_130(self):
        request = [{'ok': {'value': {'objNullInt': {'a': 0, 'b': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullInt{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_131(self):
        request = [{'ok': {'value': {'pStrInt': {'wrap': 0}}}}, {'fn.test': {'value': {'pStrInt': {'wrap': 0}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrInt': {'wrap': 0}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_132(self):
        request = [{'ok': {'value': {'pStrInt': {'wrap': -1}}}}, {'fn.test': {'value': {'pStrInt': {'wrap': -1}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrInt': {'wrap': -1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_133(self):
        request = [{'ok': {'value': {'pStrInt': {'wrap': 1}}}}, {'fn.test': {'value': {'pStrInt': {'wrap': 1}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrInt': {'wrap': 1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_134(self):
        request = [{'ok': {'value': {'pStrInt': {'wrap': 9223372036854775807}}}}, {'fn.test': {'value': {'pStrInt': {'wrap': 9223372036854775807}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrInt': {'wrap': 9223372036854775807}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_135(self):
        request = [{'ok': {'value': {'pStrInt': {'wrap': -9223372036854775808}}}}, {'fn.test': {'value': {'pStrInt': {'wrap': -9223372036854775808}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrInt': {'wrap': -9223372036854775808}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_136(self):
        request = [{}, {'fn.test': {'value': {'pStrInt': {'wrap': 9223372036854775808}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrInt.wrap', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_137(self):
        request = [{}, {'fn.test': {'value': {'pStrInt': {'wrap': -9223372036854775809}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrInt.wrap', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_138(self):
        request = [{}, {'fn.test': {'value': {'pStrInt': {'wrap': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_139(self):
        request = [{}, {'fn.test': {'value': {'pStrInt': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_140(self):
        request = [{}, {'fn.test': {'value': {'pStrInt': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_141(self):
        request = [{}, {'fn.test': {'value': {'pStrInt': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_142(self):
        request = [{}, {'fn.test': {'value': {'pStrInt': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_143(self):
        request = [{}, {'fn.test': {'value': {'pStrInt': {'wrap': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_144(self):
        request = [{'ok': {'value': {'pStrInt': {'wrap': 9223372036854775808}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrInt.wrap', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_145(self):
        request = [{'ok': {'value': {'pStrInt': {'wrap': -9223372036854775809}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrInt.wrap', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_146(self):
        request = [{'ok': {'value': {'pStrInt': {'wrap': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_147(self):
        request = [{'ok': {'value': {'pStrInt': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_148(self):
        request = [{'ok': {'value': {'pStrInt': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_149(self):
        request = [{'ok': {'value': {'pStrInt': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_150(self):
        request = [{'ok': {'value': {'pStrInt': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_151(self):
        request = [{'ok': {'value': {'pStrInt': {'wrap': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_152(self):
        request = [{'ok': {'value': {'pStrNullInt': {'wrap': None}}}}, {'fn.test': {'value': {'pStrNullInt': {'wrap': None}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullInt': {'wrap': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_153(self):
        request = [{'ok': {'value': {'pStrNullInt': {'wrap': 0}}}}, {'fn.test': {'value': {'pStrNullInt': {'wrap': 0}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullInt': {'wrap': 0}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_154(self):
        request = [{'ok': {'value': {'pStrNullInt': {'wrap': -1}}}}, {'fn.test': {'value': {'pStrNullInt': {'wrap': -1}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullInt': {'wrap': -1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_155(self):
        request = [{'ok': {'value': {'pStrNullInt': {'wrap': 1}}}}, {'fn.test': {'value': {'pStrNullInt': {'wrap': 1}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullInt': {'wrap': 1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_156(self):
        request = [{'ok': {'value': {'pStrNullInt': {'wrap': 9223372036854775807}}}}, {'fn.test': {'value': {'pStrNullInt': {'wrap': 9223372036854775807}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullInt': {'wrap': 9223372036854775807}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_157(self):
        request = [{'ok': {'value': {'pStrNullInt': {'wrap': -9223372036854775808}}}}, {'fn.test': {'value': {'pStrNullInt': {'wrap': -9223372036854775808}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullInt': {'wrap': -9223372036854775808}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_158(self):
        request = [{}, {'fn.test': {'value': {'pStrNullInt': {'wrap': 9223372036854775808}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullInt.wrap', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_159(self):
        request = [{}, {'fn.test': {'value': {'pStrNullInt': {'wrap': -9223372036854775809}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullInt.wrap', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_160(self):
        request = [{}, {'fn.test': {'value': {'pStrNullInt': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_161(self):
        request = [{}, {'fn.test': {'value': {'pStrNullInt': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_162(self):
        request = [{}, {'fn.test': {'value': {'pStrNullInt': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_163(self):
        request = [{}, {'fn.test': {'value': {'pStrNullInt': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_164(self):
        request = [{}, {'fn.test': {'value': {'pStrNullInt': {'wrap': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_165(self):
        request = [{'ok': {'value': {'pStrNullInt': {'wrap': 9223372036854775808}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullInt.wrap', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_166(self):
        request = [{'ok': {'value': {'pStrNullInt': {'wrap': -9223372036854775809}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullInt.wrap', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_167(self):
        request = [{'ok': {'value': {'pStrNullInt': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_168(self):
        request = [{'ok': {'value': {'pStrNullInt': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_169(self):
        request = [{'ok': {'value': {'pStrNullInt': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_170(self):
        request = [{'ok': {'value': {'pStrNullInt': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_171(self):
        request = [{'ok': {'value': {'pStrNullInt': {'wrap': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_172(self):
        request = [{'ok': {'value': {'pEnumInt': {'one': {}}}}}, {'fn.test': {'value': {'pEnumInt': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumInt': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_173(self):
        request = [{'ok': {'value': {'pEnumInt': {'two': {'ewrap': 0}}}}}, {'fn.test': {'value': {'pEnumInt': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumInt': {'two': {'ewrap': 0}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_174(self):
        request = [{'ok': {'value': {'pEnumInt': {'two': {'ewrap': -1}}}}}, {'fn.test': {'value': {'pEnumInt': {'two': {'ewrap': -1}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumInt': {'two': {'ewrap': -1}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_175(self):
        request = [{'ok': {'value': {'pEnumInt': {'two': {'ewrap': 1}}}}}, {'fn.test': {'value': {'pEnumInt': {'two': {'ewrap': 1}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumInt': {'two': {'ewrap': 1}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_176(self):
        request = [{'ok': {'value': {'pEnumInt': {'two': {'ewrap': 9223372036854775807}}}}}, {'fn.test': {'value': {'pEnumInt': {'two': {'ewrap': 9223372036854775807}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumInt': {'two': {'ewrap': 9223372036854775807}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_177(self):
        request = [{'ok': {'value': {'pEnumInt': {'two': {'ewrap': -9223372036854775808}}}}}, {'fn.test': {'value': {'pEnumInt': {'two': {'ewrap': -9223372036854775808}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumInt': {'two': {'ewrap': -9223372036854775808}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_178(self):
        request = [{}, {'fn.test': {'value': {'pEnumInt': {'two': {'ewrap': 9223372036854775808}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumInt.two.ewrap', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_179(self):
        request = [{}, {'fn.test': {'value': {'pEnumInt': {'two': {'ewrap': -9223372036854775809}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumInt.two.ewrap', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_180(self):
        request = [{}, {'fn.test': {'value': {'pEnumInt': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_181(self):
        request = [{}, {'fn.test': {'value': {'pEnumInt': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_182(self):
        request = [{}, {'fn.test': {'value': {'pEnumInt': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_183(self):
        request = [{}, {'fn.test': {'value': {'pEnumInt': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_184(self):
        request = [{}, {'fn.test': {'value': {'pEnumInt': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_185(self):
        request = [{}, {'fn.test': {'value': {'pEnumInt': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_186(self):
        request = [{'ok': {'value': {'pEnumInt': {'two': {'ewrap': 9223372036854775808}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumInt.two.ewrap', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_187(self):
        request = [{'ok': {'value': {'pEnumInt': {'two': {'ewrap': -9223372036854775809}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumInt.two.ewrap', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_188(self):
        request = [{'ok': {'value': {'pEnumInt': {'two': {'ewrap': None}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_189(self):
        request = [{'ok': {'value': {'pEnumInt': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_190(self):
        request = [{'ok': {'value': {'pEnumInt': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_191(self):
        request = [{'ok': {'value': {'pEnumInt': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_192(self):
        request = [{'ok': {'value': {'pEnumInt': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_193(self):
        request = [{'ok': {'value': {'pEnumInt': {'two': {'ewrap': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_194(self):
        request = [{'ok': {'value': {'pEnumNullInt': {'one': {}}}}}, {'fn.test': {'value': {'pEnumNullInt': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullInt': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_195(self):
        request = [{'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': None}}}}}, {'fn.test': {'value': {'pEnumNullInt': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': None}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_196(self):
        request = [{'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': 0}}}}}, {'fn.test': {'value': {'pEnumNullInt': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': 0}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_197(self):
        request = [{'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': -1}}}}}, {'fn.test': {'value': {'pEnumNullInt': {'two': {'ewrap': -1}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': -1}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_198(self):
        request = [{'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': 1}}}}}, {'fn.test': {'value': {'pEnumNullInt': {'two': {'ewrap': 1}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': 1}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_199(self):
        request = [{'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': 9223372036854775807}}}}}, {'fn.test': {'value': {'pEnumNullInt': {'two': {'ewrap': 9223372036854775807}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': 9223372036854775807}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_200(self):
        request = [{'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': -9223372036854775808}}}}}, {'fn.test': {'value': {'pEnumNullInt': {'two': {'ewrap': -9223372036854775808}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': -9223372036854775808}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_201(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullInt': {'two': {'ewrap': 9223372036854775808}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullInt.two.ewrap', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_202(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullInt': {'two': {'ewrap': -9223372036854775809}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullInt.two.ewrap', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_203(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullInt': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_204(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullInt': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_205(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullInt': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_206(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullInt': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_207(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullInt': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_208(self):
        request = [{'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': 9223372036854775808}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullInt.two.ewrap', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_209(self):
        request = [{'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': -9223372036854775809}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullInt.two.ewrap', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_210(self):
        request = [{'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_211(self):
        request = [{'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_212(self):
        request = [{'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_213(self):
        request = [{'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_integer_214(self):
        request = [{'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_0(self):
        request = [{'ok': {'value': {'num': 0}}}, {'fn.test': {'value': {'num': 0}}}]
        expected_response = [{}, {'ok': {'value': {'num': 0}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_1(self):
        request = [{'ok': {'value': {'num': -1}}}, {'fn.test': {'value': {'num': -1}}}]
        expected_response = [{}, {'ok': {'value': {'num': -1}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_2(self):
        request = [{'ok': {'value': {'num': 1}}}, {'fn.test': {'value': {'num': 1}}}]
        expected_response = [{}, {'ok': {'value': {'num': 1}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_3(self):
        request = [{'ok': {'value': {'num': -1.7976931348623157e+308}}}, {'fn.test': {'value': {'num': -1.7976931348623157e+308}}}]
        expected_response = [{}, {'ok': {'value': {'num': -1.7976931348623157e+308}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_4(self):
        request = [{'ok': {'value': {'num': -2.2250738585072014e-308}}}, {'fn.test': {'value': {'num': -2.2250738585072014e-308}}}]
        expected_response = [{}, {'ok': {'value': {'num': -2.2250738585072014e-308}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_5(self):
        request = [{'ok': {'value': {'num': 2.2250738585072014e-308}}}, {'fn.test': {'value': {'num': 2.2250738585072014e-308}}}]
        expected_response = [{}, {'ok': {'value': {'num': 2.2250738585072014e-308}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_6(self):
        request = [{'ok': {'value': {'num': 1.7976931348623157e+308}}}, {'fn.test': {'value': {'num': 1.7976931348623157e+308}}}]
        expected_response = [{}, {'ok': {'value': {'num': 1.7976931348623157e+308}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_7(self):
        request = [{'ok': {'value': {'num': -0.1}}}, {'fn.test': {'value': {'num': -0.1}}}]
        expected_response = [{}, {'ok': {'value': {'num': -0.1}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_8(self):
        request = [{'ok': {'value': {'num': 0.1}}}, {'fn.test': {'value': {'num': 0.1}}}]
        expected_response = [{}, {'ok': {'value': {'num': 0.1}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_9(self):
        request = [{}, {'fn.test': {'value': {'num': None}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.num', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_10(self):
        request = [{}, {'fn.test': {'value': {'num': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.num', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_11(self):
        request = [{}, {'fn.test': {'value': {'num': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.num', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_12(self):
        request = [{}, {'fn.test': {'value': {'num': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.num', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_13(self):
        request = [{}, {'fn.test': {'value': {'num': {}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.num', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_14(self):
        request = [{'ok': {'value': {'num': None}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.num', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_15(self):
        request = [{'ok': {'value': {'num': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.num', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_16(self):
        request = [{'ok': {'value': {'num': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.num', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_17(self):
        request = [{'ok': {'value': {'num': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.num', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_18(self):
        request = [{'ok': {'value': {'num': {}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.num', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_19(self):
        request = [{'ok': {'value': {'nullNum': None}}}, {'fn.test': {'value': {'nullNum': None}}}]
        expected_response = [{}, {'ok': {'value': {'nullNum': None}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_20(self):
        request = [{'ok': {'value': {'nullNum': 0}}}, {'fn.test': {'value': {'nullNum': 0}}}]
        expected_response = [{}, {'ok': {'value': {'nullNum': 0}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_21(self):
        request = [{'ok': {'value': {'nullNum': -1}}}, {'fn.test': {'value': {'nullNum': -1}}}]
        expected_response = [{}, {'ok': {'value': {'nullNum': -1}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_22(self):
        request = [{'ok': {'value': {'nullNum': 1}}}, {'fn.test': {'value': {'nullNum': 1}}}]
        expected_response = [{}, {'ok': {'value': {'nullNum': 1}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_23(self):
        request = [{'ok': {'value': {'nullNum': -1.7976931348623157e+308}}}, {'fn.test': {'value': {'nullNum': -1.7976931348623157e+308}}}]
        expected_response = [{}, {'ok': {'value': {'nullNum': -1.7976931348623157e+308}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_24(self):
        request = [{'ok': {'value': {'nullNum': -2.2250738585072014e-308}}}, {'fn.test': {'value': {'nullNum': -2.2250738585072014e-308}}}]
        expected_response = [{}, {'ok': {'value': {'nullNum': -2.2250738585072014e-308}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_25(self):
        request = [{'ok': {'value': {'nullNum': 2.2250738585072014e-308}}}, {'fn.test': {'value': {'nullNum': 2.2250738585072014e-308}}}]
        expected_response = [{}, {'ok': {'value': {'nullNum': 2.2250738585072014e-308}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_26(self):
        request = [{'ok': {'value': {'nullNum': 1.7976931348623157e+308}}}, {'fn.test': {'value': {'nullNum': 1.7976931348623157e+308}}}]
        expected_response = [{}, {'ok': {'value': {'nullNum': 1.7976931348623157e+308}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_27(self):
        request = [{'ok': {'value': {'nullNum': -0.1}}}, {'fn.test': {'value': {'nullNum': -0.1}}}]
        expected_response = [{}, {'ok': {'value': {'nullNum': -0.1}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_28(self):
        request = [{'ok': {'value': {'nullNum': 0.1}}}, {'fn.test': {'value': {'nullNum': 0.1}}}]
        expected_response = [{}, {'ok': {'value': {'nullNum': 0.1}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_29(self):
        request = [{}, {'fn.test': {'value': {'nullNum': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullNum', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_30(self):
        request = [{}, {'fn.test': {'value': {'nullNum': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullNum', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_31(self):
        request = [{}, {'fn.test': {'value': {'nullNum': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullNum', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_32(self):
        request = [{}, {'fn.test': {'value': {'nullNum': {}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullNum', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_33(self):
        request = [{'ok': {'value': {'nullNum': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullNum', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_34(self):
        request = [{'ok': {'value': {'nullNum': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullNum', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_35(self):
        request = [{'ok': {'value': {'nullNum': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullNum', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_36(self):
        request = [{'ok': {'value': {'nullNum': {}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullNum', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_37(self):
        request = [{'ok': {'value': {'arrNum': []}}}, {'fn.test': {'value': {'arrNum': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrNum': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_38(self):
        request = [{'ok': {'value': {'arrNum': [0]}}}, {'fn.test': {'value': {'arrNum': [0]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNum': [0]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_39(self):
        request = [{'ok': {'value': {'arrNum': [-1]}}}, {'fn.test': {'value': {'arrNum': [-1]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNum': [-1]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_40(self):
        request = [{'ok': {'value': {'arrNum': [1]}}}, {'fn.test': {'value': {'arrNum': [1]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNum': [1]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_41(self):
        request = [{'ok': {'value': {'arrNum': [-1.7976931348623157e+308]}}}, {'fn.test': {'value': {'arrNum': [-1.7976931348623157e+308]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNum': [-1.7976931348623157e+308]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_42(self):
        request = [{'ok': {'value': {'arrNum': [-2.2250738585072014e-308]}}}, {'fn.test': {'value': {'arrNum': [-2.2250738585072014e-308]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNum': [-2.2250738585072014e-308]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_43(self):
        request = [{'ok': {'value': {'arrNum': [2.2250738585072014e-308]}}}, {'fn.test': {'value': {'arrNum': [2.2250738585072014e-308]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNum': [2.2250738585072014e-308]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_44(self):
        request = [{'ok': {'value': {'arrNum': [1.7976931348623157e+308]}}}, {'fn.test': {'value': {'arrNum': [1.7976931348623157e+308]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNum': [1.7976931348623157e+308]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_45(self):
        request = [{'ok': {'value': {'arrNum': [-0.1]}}}, {'fn.test': {'value': {'arrNum': [-0.1]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNum': [-0.1]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_46(self):
        request = [{'ok': {'value': {'arrNum': [0.1]}}}, {'fn.test': {'value': {'arrNum': [0.1]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNum': [0.1]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_47(self):
        request = [{'ok': {'value': {'arrNum': [0, -1, 1, -1.7976931348623157e+308, -2.2250738585072014e-308, 2.2250738585072014e-308, 1.7976931348623157e+308, -0.1, 0.1]}}}, {'fn.test': {'value': {'arrNum': [0, -1, 1, -1.7976931348623157e+308, -2.2250738585072014e-308, 2.2250738585072014e-308, 1.7976931348623157e+308, -0.1, 0.1]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNum': [0, -1, 1, -1.7976931348623157e+308, -2.2250738585072014e-308, 2.2250738585072014e-308, 1.7976931348623157e+308, -0.1, 0.1]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_48(self):
        request = [{}, {'fn.test': {'value': {'arrNum': [0, None]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNum[1]', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_49(self):
        request = [{}, {'fn.test': {'value': {'arrNum': [0, False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNum[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_50(self):
        request = [{}, {'fn.test': {'value': {'arrNum': [0, '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNum[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_51(self):
        request = [{}, {'fn.test': {'value': {'arrNum': [0, []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNum[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_52(self):
        request = [{}, {'fn.test': {'value': {'arrNum': [0, {}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNum[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_53(self):
        request = [{'ok': {'value': {'arrNum': [0, None]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNum[1]', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_54(self):
        request = [{'ok': {'value': {'arrNum': [0, False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNum[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_55(self):
        request = [{'ok': {'value': {'arrNum': [0, '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNum[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_56(self):
        request = [{'ok': {'value': {'arrNum': [0, []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNum[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_57(self):
        request = [{'ok': {'value': {'arrNum': [0, {}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNum[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_58(self):
        request = [{'ok': {'value': {'arrNullNum': []}}}, {'fn.test': {'value': {'arrNullNum': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullNum': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_59(self):
        request = [{'ok': {'value': {'arrNullNum': [None]}}}, {'fn.test': {'value': {'arrNullNum': [None]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullNum': [None]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_60(self):
        request = [{'ok': {'value': {'arrNullNum': [0]}}}, {'fn.test': {'value': {'arrNullNum': [0]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullNum': [0]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_61(self):
        request = [{'ok': {'value': {'arrNullNum': [-1]}}}, {'fn.test': {'value': {'arrNullNum': [-1]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullNum': [-1]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_62(self):
        request = [{'ok': {'value': {'arrNullNum': [1]}}}, {'fn.test': {'value': {'arrNullNum': [1]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullNum': [1]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_63(self):
        request = [{'ok': {'value': {'arrNullNum': [-1.7976931348623157e+308]}}}, {'fn.test': {'value': {'arrNullNum': [-1.7976931348623157e+308]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullNum': [-1.7976931348623157e+308]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_64(self):
        request = [{'ok': {'value': {'arrNullNum': [-2.2250738585072014e-308]}}}, {'fn.test': {'value': {'arrNullNum': [-2.2250738585072014e-308]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullNum': [-2.2250738585072014e-308]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_65(self):
        request = [{'ok': {'value': {'arrNullNum': [2.2250738585072014e-308]}}}, {'fn.test': {'value': {'arrNullNum': [2.2250738585072014e-308]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullNum': [2.2250738585072014e-308]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_66(self):
        request = [{'ok': {'value': {'arrNullNum': [1.7976931348623157e+308]}}}, {'fn.test': {'value': {'arrNullNum': [1.7976931348623157e+308]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullNum': [1.7976931348623157e+308]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_67(self):
        request = [{'ok': {'value': {'arrNullNum': [-0.1]}}}, {'fn.test': {'value': {'arrNullNum': [-0.1]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullNum': [-0.1]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_68(self):
        request = [{'ok': {'value': {'arrNullNum': [0.1]}}}, {'fn.test': {'value': {'arrNullNum': [0.1]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullNum': [0.1]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_69(self):
        request = [{'ok': {'value': {'arrNullNum': [None, 0, -1, 1, -1.7976931348623157e+308, -2.2250738585072014e-308, 2.2250738585072014e-308, 1.7976931348623157e+308, -0.1, 0.1]}}}, {'fn.test': {'value': {'arrNullNum': [None, 0, -1, 1, -1.7976931348623157e+308, -2.2250738585072014e-308, 2.2250738585072014e-308, 1.7976931348623157e+308, -0.1, 0.1]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullNum': [None, 0, -1, 1, -1.7976931348623157e+308, -2.2250738585072014e-308, 2.2250738585072014e-308, 1.7976931348623157e+308, -0.1, 0.1]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_70(self):
        request = [{}, {'fn.test': {'value': {'arrNullNum': [0, False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullNum[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_71(self):
        request = [{}, {'fn.test': {'value': {'arrNullNum': [0, '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullNum[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_72(self):
        request = [{}, {'fn.test': {'value': {'arrNullNum': [0, []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullNum[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_73(self):
        request = [{}, {'fn.test': {'value': {'arrNullNum': [0, {}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullNum[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_74(self):
        request = [{'ok': {'value': {'arrNullNum': [0, False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullNum[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_75(self):
        request = [{'ok': {'value': {'arrNullNum': [0, '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullNum[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_76(self):
        request = [{'ok': {'value': {'arrNullNum': [0, []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullNum[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_77(self):
        request = [{'ok': {'value': {'arrNullNum': [0, {}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullNum[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_78(self):
        request = [{'ok': {'value': {'objNum': {}}}}, {'fn.test': {'value': {'objNum': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objNum': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_79(self):
        request = [{'ok': {'value': {'objNum': {'a': 0}}}}, {'fn.test': {'value': {'objNum': {'a': 0}}}}]
        expected_response = [{}, {'ok': {'value': {'objNum': {'a': 0}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_80(self):
        request = [{'ok': {'value': {'objNum': {'a': -1}}}}, {'fn.test': {'value': {'objNum': {'a': -1}}}}]
        expected_response = [{}, {'ok': {'value': {'objNum': {'a': -1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_81(self):
        request = [{'ok': {'value': {'objNum': {'a': 1}}}}, {'fn.test': {'value': {'objNum': {'a': 1}}}}]
        expected_response = [{}, {'ok': {'value': {'objNum': {'a': 1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_82(self):
        request = [{'ok': {'value': {'objNum': {'a': -1.7976931348623157e+308}}}}, {'fn.test': {'value': {'objNum': {'a': -1.7976931348623157e+308}}}}]
        expected_response = [{}, {'ok': {'value': {'objNum': {'a': -1.7976931348623157e+308}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_83(self):
        request = [{'ok': {'value': {'objNum': {'a': -2.2250738585072014e-308}}}}, {'fn.test': {'value': {'objNum': {'a': -2.2250738585072014e-308}}}}]
        expected_response = [{}, {'ok': {'value': {'objNum': {'a': -2.2250738585072014e-308}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_84(self):
        request = [{'ok': {'value': {'objNum': {'a': 2.2250738585072014e-308}}}}, {'fn.test': {'value': {'objNum': {'a': 2.2250738585072014e-308}}}}]
        expected_response = [{}, {'ok': {'value': {'objNum': {'a': 2.2250738585072014e-308}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_85(self):
        request = [{'ok': {'value': {'objNum': {'a': 1.7976931348623157e+308}}}}, {'fn.test': {'value': {'objNum': {'a': 1.7976931348623157e+308}}}}]
        expected_response = [{}, {'ok': {'value': {'objNum': {'a': 1.7976931348623157e+308}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_86(self):
        request = [{'ok': {'value': {'objNum': {'a': -0.1}}}}, {'fn.test': {'value': {'objNum': {'a': -0.1}}}}]
        expected_response = [{}, {'ok': {'value': {'objNum': {'a': -0.1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_87(self):
        request = [{'ok': {'value': {'objNum': {'a': 0.1}}}}, {'fn.test': {'value': {'objNum': {'a': 0.1}}}}]
        expected_response = [{}, {'ok': {'value': {'objNum': {'a': 0.1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_88(self):
        request = [{'ok': {'value': {'objNum': {'a': 0, 'b': -1, 'c': 1, 'd': -1.7976931348623157e+308, 'e': -2.2250738585072014e-308, 'f': 2.2250738585072014e-308, 'g': 1.7976931348623157e+308, 'h': -0.1, 'i': 0.1}}}}, {'fn.test': {'value': {'objNum': {'a': 0, 'b': -1, 'c': 1, 'd': -1.7976931348623157e+308, 'e': -2.2250738585072014e-308, 'f': 2.2250738585072014e-308, 'g': 1.7976931348623157e+308, 'h': -0.1, 'i': 0.1}}}}]
        expected_response = [{}, {'ok': {'value': {'objNum': {'a': 0, 'b': -1, 'c': 1, 'd': -1.7976931348623157e+308, 'e': -2.2250738585072014e-308, 'f': 2.2250738585072014e-308, 'g': 1.7976931348623157e+308, 'h': -0.1, 'i': 0.1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_89(self):
        request = [{}, {'fn.test': {'value': {'objNum': {'a': 0, 'b': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNum{b}', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_90(self):
        request = [{}, {'fn.test': {'value': {'objNum': {'a': 0, 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNum{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_91(self):
        request = [{}, {'fn.test': {'value': {'objNum': {'a': 0, 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNum{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_92(self):
        request = [{}, {'fn.test': {'value': {'objNum': {'a': 0, 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNum{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_93(self):
        request = [{}, {'fn.test': {'value': {'objNum': {'a': 0, 'b': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNum{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_94(self):
        request = [{'ok': {'value': {'objNum': {'a': 0, 'b': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNum{b}', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_95(self):
        request = [{'ok': {'value': {'objNum': {'a': 0, 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNum{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_96(self):
        request = [{'ok': {'value': {'objNum': {'a': 0, 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNum{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_97(self):
        request = [{'ok': {'value': {'objNum': {'a': 0, 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNum{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_98(self):
        request = [{'ok': {'value': {'objNum': {'a': 0, 'b': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNum{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_99(self):
        request = [{'ok': {'value': {'objNullNum': {}}}}, {'fn.test': {'value': {'objNullNum': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullNum': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_100(self):
        request = [{'ok': {'value': {'objNullNum': {'a': None}}}}, {'fn.test': {'value': {'objNullNum': {'a': None}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullNum': {'a': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_101(self):
        request = [{'ok': {'value': {'objNullNum': {'a': 0}}}}, {'fn.test': {'value': {'objNullNum': {'a': 0}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullNum': {'a': 0}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_102(self):
        request = [{'ok': {'value': {'objNullNum': {'a': -1}}}}, {'fn.test': {'value': {'objNullNum': {'a': -1}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullNum': {'a': -1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_103(self):
        request = [{'ok': {'value': {'objNullNum': {'a': 1}}}}, {'fn.test': {'value': {'objNullNum': {'a': 1}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullNum': {'a': 1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_104(self):
        request = [{'ok': {'value': {'objNullNum': {'a': -1.7976931348623157e+308}}}}, {'fn.test': {'value': {'objNullNum': {'a': -1.7976931348623157e+308}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullNum': {'a': -1.7976931348623157e+308}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_105(self):
        request = [{'ok': {'value': {'objNullNum': {'a': -2.2250738585072014e-308}}}}, {'fn.test': {'value': {'objNullNum': {'a': -2.2250738585072014e-308}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullNum': {'a': -2.2250738585072014e-308}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_106(self):
        request = [{'ok': {'value': {'objNullNum': {'a': 2.2250738585072014e-308}}}}, {'fn.test': {'value': {'objNullNum': {'a': 2.2250738585072014e-308}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullNum': {'a': 2.2250738585072014e-308}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_107(self):
        request = [{'ok': {'value': {'objNullNum': {'a': 1.7976931348623157e+308}}}}, {'fn.test': {'value': {'objNullNum': {'a': 1.7976931348623157e+308}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullNum': {'a': 1.7976931348623157e+308}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_108(self):
        request = [{'ok': {'value': {'objNullNum': {'a': -0.1}}}}, {'fn.test': {'value': {'objNullNum': {'a': -0.1}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullNum': {'a': -0.1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_109(self):
        request = [{'ok': {'value': {'objNullNum': {'a': 0.1}}}}, {'fn.test': {'value': {'objNullNum': {'a': 0.1}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullNum': {'a': 0.1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_110(self):
        request = [{'ok': {'value': {'objNullNum': {'a': None, 'b': 0, 'c': -1, 'd': 1, 'e': -1.7976931348623157e+308, 'f': -2.2250738585072014e-308, 'g': 2.2250738585072014e-308, 'h': 1.7976931348623157e+308, 'i': -0.1, 'j': 0.1}}}}, {'fn.test': {'value': {'objNullNum': {'a': None, 'b': 0, 'c': -1, 'd': 1, 'e': -1.7976931348623157e+308, 'f': -2.2250738585072014e-308, 'g': 2.2250738585072014e-308, 'h': 1.7976931348623157e+308, 'i': -0.1, 'j': 0.1}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullNum': {'a': None, 'b': 0, 'c': -1, 'd': 1, 'e': -1.7976931348623157e+308, 'f': -2.2250738585072014e-308, 'g': 2.2250738585072014e-308, 'h': 1.7976931348623157e+308, 'i': -0.1, 'j': 0.1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_111(self):
        request = [{}, {'fn.test': {'value': {'objNullNum': {'a': 0, 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullNum{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_112(self):
        request = [{}, {'fn.test': {'value': {'objNullNum': {'a': 0, 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullNum{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_113(self):
        request = [{}, {'fn.test': {'value': {'objNullNum': {'a': 0, 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullNum{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_114(self):
        request = [{}, {'fn.test': {'value': {'objNullNum': {'a': 0, 'b': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullNum{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_115(self):
        request = [{'ok': {'value': {'objNullNum': {'a': 0, 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullNum{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_116(self):
        request = [{'ok': {'value': {'objNullNum': {'a': 0, 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullNum{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_117(self):
        request = [{'ok': {'value': {'objNullNum': {'a': 0, 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullNum{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_118(self):
        request = [{'ok': {'value': {'objNullNum': {'a': 0, 'b': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullNum{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_119(self):
        request = [{'ok': {'value': {'pStrNum': {'wrap': 0}}}}, {'fn.test': {'value': {'pStrNum': {'wrap': 0}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNum': {'wrap': 0}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_120(self):
        request = [{'ok': {'value': {'pStrNum': {'wrap': -1}}}}, {'fn.test': {'value': {'pStrNum': {'wrap': -1}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNum': {'wrap': -1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_121(self):
        request = [{'ok': {'value': {'pStrNum': {'wrap': 1}}}}, {'fn.test': {'value': {'pStrNum': {'wrap': 1}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNum': {'wrap': 1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_122(self):
        request = [{'ok': {'value': {'pStrNum': {'wrap': -1.7976931348623157e+308}}}}, {'fn.test': {'value': {'pStrNum': {'wrap': -1.7976931348623157e+308}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNum': {'wrap': -1.7976931348623157e+308}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_123(self):
        request = [{'ok': {'value': {'pStrNum': {'wrap': -2.2250738585072014e-308}}}}, {'fn.test': {'value': {'pStrNum': {'wrap': -2.2250738585072014e-308}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNum': {'wrap': -2.2250738585072014e-308}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_124(self):
        request = [{'ok': {'value': {'pStrNum': {'wrap': 2.2250738585072014e-308}}}}, {'fn.test': {'value': {'pStrNum': {'wrap': 2.2250738585072014e-308}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNum': {'wrap': 2.2250738585072014e-308}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_125(self):
        request = [{'ok': {'value': {'pStrNum': {'wrap': 1.7976931348623157e+308}}}}, {'fn.test': {'value': {'pStrNum': {'wrap': 1.7976931348623157e+308}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNum': {'wrap': 1.7976931348623157e+308}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_126(self):
        request = [{'ok': {'value': {'pStrNum': {'wrap': -0.1}}}}, {'fn.test': {'value': {'pStrNum': {'wrap': -0.1}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNum': {'wrap': -0.1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_127(self):
        request = [{'ok': {'value': {'pStrNum': {'wrap': 0.1}}}}, {'fn.test': {'value': {'pStrNum': {'wrap': 0.1}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNum': {'wrap': 0.1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_128(self):
        request = [{}, {'fn.test': {'value': {'pStrNum': {'wrap': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_129(self):
        request = [{}, {'fn.test': {'value': {'pStrNum': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_130(self):
        request = [{}, {'fn.test': {'value': {'pStrNum': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNum.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_131(self):
        request = [{}, {'fn.test': {'value': {'pStrNum': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_132(self):
        request = [{}, {'fn.test': {'value': {'pStrNum': {'wrap': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_133(self):
        request = [{'ok': {'value': {'pStrNum': {'wrap': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_134(self):
        request = [{'ok': {'value': {'pStrNum': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_135(self):
        request = [{'ok': {'value': {'pStrNum': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNum.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_136(self):
        request = [{'ok': {'value': {'pStrNum': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_137(self):
        request = [{'ok': {'value': {'pStrNum': {'wrap': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_138(self):
        request = [{'ok': {'value': {'pStrNullNum': {'wrap': None}}}}, {'fn.test': {'value': {'pStrNullNum': {'wrap': None}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullNum': {'wrap': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_139(self):
        request = [{'ok': {'value': {'pStrNullNum': {'wrap': 0}}}}, {'fn.test': {'value': {'pStrNullNum': {'wrap': 0}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullNum': {'wrap': 0}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_140(self):
        request = [{'ok': {'value': {'pStrNullNum': {'wrap': -1}}}}, {'fn.test': {'value': {'pStrNullNum': {'wrap': -1}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullNum': {'wrap': -1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_141(self):
        request = [{'ok': {'value': {'pStrNullNum': {'wrap': 1}}}}, {'fn.test': {'value': {'pStrNullNum': {'wrap': 1}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullNum': {'wrap': 1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_142(self):
        request = [{'ok': {'value': {'pStrNullNum': {'wrap': -1.7976931348623157e+308}}}}, {'fn.test': {'value': {'pStrNullNum': {'wrap': -1.7976931348623157e+308}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullNum': {'wrap': -1.7976931348623157e+308}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_143(self):
        request = [{'ok': {'value': {'pStrNullNum': {'wrap': -2.2250738585072014e-308}}}}, {'fn.test': {'value': {'pStrNullNum': {'wrap': -2.2250738585072014e-308}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullNum': {'wrap': -2.2250738585072014e-308}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_144(self):
        request = [{'ok': {'value': {'pStrNullNum': {'wrap': 2.2250738585072014e-308}}}}, {'fn.test': {'value': {'pStrNullNum': {'wrap': 2.2250738585072014e-308}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullNum': {'wrap': 2.2250738585072014e-308}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_145(self):
        request = [{'ok': {'value': {'pStrNullNum': {'wrap': 1.7976931348623157e+308}}}}, {'fn.test': {'value': {'pStrNullNum': {'wrap': 1.7976931348623157e+308}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullNum': {'wrap': 1.7976931348623157e+308}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_146(self):
        request = [{'ok': {'value': {'pStrNullNum': {'wrap': -0.1}}}}, {'fn.test': {'value': {'pStrNullNum': {'wrap': -0.1}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullNum': {'wrap': -0.1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_147(self):
        request = [{'ok': {'value': {'pStrNullNum': {'wrap': 0.1}}}}, {'fn.test': {'value': {'pStrNullNum': {'wrap': 0.1}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullNum': {'wrap': 0.1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_148(self):
        request = [{}, {'fn.test': {'value': {'pStrNullNum': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullNum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_149(self):
        request = [{}, {'fn.test': {'value': {'pStrNullNum': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullNum.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_150(self):
        request = [{}, {'fn.test': {'value': {'pStrNullNum': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullNum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_151(self):
        request = [{}, {'fn.test': {'value': {'pStrNullNum': {'wrap': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullNum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_152(self):
        request = [{'ok': {'value': {'pStrNullNum': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullNum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_153(self):
        request = [{'ok': {'value': {'pStrNullNum': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullNum.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_154(self):
        request = [{'ok': {'value': {'pStrNullNum': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullNum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_155(self):
        request = [{'ok': {'value': {'pStrNullNum': {'wrap': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullNum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_156(self):
        request = [{'ok': {'value': {'pEnumNum': {'one': {}}}}}, {'fn.test': {'value': {'pEnumNum': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNum': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_157(self):
        request = [{'ok': {'value': {'pEnumNum': {'two': {'ewrap': 0}}}}}, {'fn.test': {'value': {'pEnumNum': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNum': {'two': {'ewrap': 0}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_158(self):
        request = [{'ok': {'value': {'pEnumNum': {'two': {'ewrap': -1}}}}}, {'fn.test': {'value': {'pEnumNum': {'two': {'ewrap': -1}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNum': {'two': {'ewrap': -1}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_159(self):
        request = [{'ok': {'value': {'pEnumNum': {'two': {'ewrap': 1}}}}}, {'fn.test': {'value': {'pEnumNum': {'two': {'ewrap': 1}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNum': {'two': {'ewrap': 1}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_160(self):
        request = [{'ok': {'value': {'pEnumNum': {'two': {'ewrap': -1.7976931348623157e+308}}}}}, {'fn.test': {'value': {'pEnumNum': {'two': {'ewrap': -1.7976931348623157e+308}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNum': {'two': {'ewrap': -1.7976931348623157e+308}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_161(self):
        request = [{'ok': {'value': {'pEnumNum': {'two': {'ewrap': -2.2250738585072014e-308}}}}}, {'fn.test': {'value': {'pEnumNum': {'two': {'ewrap': -2.2250738585072014e-308}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNum': {'two': {'ewrap': -2.2250738585072014e-308}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_162(self):
        request = [{'ok': {'value': {'pEnumNum': {'two': {'ewrap': 2.2250738585072014e-308}}}}}, {'fn.test': {'value': {'pEnumNum': {'two': {'ewrap': 2.2250738585072014e-308}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNum': {'two': {'ewrap': 2.2250738585072014e-308}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_163(self):
        request = [{'ok': {'value': {'pEnumNum': {'two': {'ewrap': 1.7976931348623157e+308}}}}}, {'fn.test': {'value': {'pEnumNum': {'two': {'ewrap': 1.7976931348623157e+308}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNum': {'two': {'ewrap': 1.7976931348623157e+308}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_164(self):
        request = [{'ok': {'value': {'pEnumNum': {'two': {'ewrap': -0.1}}}}}, {'fn.test': {'value': {'pEnumNum': {'two': {'ewrap': -0.1}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNum': {'two': {'ewrap': -0.1}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_165(self):
        request = [{'ok': {'value': {'pEnumNum': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {'value': {'pEnumNum': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNum': {'two': {'ewrap': 0.1}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_166(self):
        request = [{}, {'fn.test': {'value': {'pEnumNum': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_167(self):
        request = [{}, {'fn.test': {'value': {'pEnumNum': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_168(self):
        request = [{}, {'fn.test': {'value': {'pEnumNum': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_169(self):
        request = [{}, {'fn.test': {'value': {'pEnumNum': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_170(self):
        request = [{}, {'fn.test': {'value': {'pEnumNum': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_171(self):
        request = [{'ok': {'value': {'pEnumNum': {'two': {'ewrap': None}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_172(self):
        request = [{'ok': {'value': {'pEnumNum': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_173(self):
        request = [{'ok': {'value': {'pEnumNum': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_174(self):
        request = [{'ok': {'value': {'pEnumNum': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_175(self):
        request = [{'ok': {'value': {'pEnumNum': {'two': {'ewrap': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_176(self):
        request = [{'ok': {'value': {'pEnumNullNum': {'one': {}}}}}, {'fn.test': {'value': {'pEnumNullNum': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullNum': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_177(self):
        request = [{'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': None}}}}}, {'fn.test': {'value': {'pEnumNullNum': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': None}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_178(self):
        request = [{'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': 0}}}}}, {'fn.test': {'value': {'pEnumNullNum': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': 0}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_179(self):
        request = [{'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': -1}}}}}, {'fn.test': {'value': {'pEnumNullNum': {'two': {'ewrap': -1}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': -1}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_180(self):
        request = [{'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': 1}}}}}, {'fn.test': {'value': {'pEnumNullNum': {'two': {'ewrap': 1}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': 1}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_181(self):
        request = [{'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': -1.7976931348623157e+308}}}}}, {'fn.test': {'value': {'pEnumNullNum': {'two': {'ewrap': -1.7976931348623157e+308}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': -1.7976931348623157e+308}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_182(self):
        request = [{'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': -2.2250738585072014e-308}}}}}, {'fn.test': {'value': {'pEnumNullNum': {'two': {'ewrap': -2.2250738585072014e-308}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': -2.2250738585072014e-308}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_183(self):
        request = [{'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': 2.2250738585072014e-308}}}}}, {'fn.test': {'value': {'pEnumNullNum': {'two': {'ewrap': 2.2250738585072014e-308}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': 2.2250738585072014e-308}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_184(self):
        request = [{'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': 1.7976931348623157e+308}}}}}, {'fn.test': {'value': {'pEnumNullNum': {'two': {'ewrap': 1.7976931348623157e+308}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': 1.7976931348623157e+308}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_185(self):
        request = [{'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': -0.1}}}}}, {'fn.test': {'value': {'pEnumNullNum': {'two': {'ewrap': -0.1}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': -0.1}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_186(self):
        request = [{'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {'value': {'pEnumNullNum': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': 0.1}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_187(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullNum': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullNum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_188(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullNum': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullNum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_189(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullNum': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullNum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_190(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullNum': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullNum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_191(self):
        request = [{'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullNum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_192(self):
        request = [{'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullNum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_193(self):
        request = [{'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullNum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_number_194(self):
        request = [{'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullNum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_0(self):
        request = [{'ok': {'value': {'str': ''}}}, {'fn.test': {'value': {'str': ''}}}]
        expected_response = [{}, {'ok': {'value': {'str': ''}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_1(self):
        request = [{'ok': {'value': {'str': 'abc'}}}, {'fn.test': {'value': {'str': 'abc'}}}]
        expected_response = [{}, {'ok': {'value': {'str': 'abc'}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_2(self):
        request = [{}, {'fn.test': {'value': {'str': None}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.str', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_3(self):
        request = [{}, {'fn.test': {'value': {'str': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.str', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_4(self):
        request = [{}, {'fn.test': {'value': {'str': 0}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.str', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_5(self):
        request = [{}, {'fn.test': {'value': {'str': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.str', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_6(self):
        request = [{}, {'fn.test': {'value': {'str': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.str', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_7(self):
        request = [{}, {'fn.test': {'value': {'str': {}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.str', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_8(self):
        request = [{'ok': {'value': {'str': None}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.str', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_9(self):
        request = [{'ok': {'value': {'str': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.str', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_10(self):
        request = [{'ok': {'value': {'str': 0}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.str', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_11(self):
        request = [{'ok': {'value': {'str': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.str', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_12(self):
        request = [{'ok': {'value': {'str': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.str', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_13(self):
        request = [{'ok': {'value': {'str': {}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.str', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_14(self):
        request = [{'ok': {'value': {'nullStr': None}}}, {'fn.test': {'value': {'nullStr': None}}}]
        expected_response = [{}, {'ok': {'value': {'nullStr': None}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_15(self):
        request = [{'ok': {'value': {'nullStr': ''}}}, {'fn.test': {'value': {'nullStr': ''}}}]
        expected_response = [{}, {'ok': {'value': {'nullStr': ''}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_16(self):
        request = [{'ok': {'value': {'nullStr': 'abc'}}}, {'fn.test': {'value': {'nullStr': 'abc'}}}]
        expected_response = [{}, {'ok': {'value': {'nullStr': 'abc'}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_17(self):
        request = [{}, {'fn.test': {'value': {'nullStr': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullStr', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_18(self):
        request = [{}, {'fn.test': {'value': {'nullStr': 0}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullStr', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_19(self):
        request = [{}, {'fn.test': {'value': {'nullStr': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullStr', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_20(self):
        request = [{}, {'fn.test': {'value': {'nullStr': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullStr', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_21(self):
        request = [{}, {'fn.test': {'value': {'nullStr': {}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullStr', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_22(self):
        request = [{'ok': {'value': {'nullStr': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullStr', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_23(self):
        request = [{'ok': {'value': {'nullStr': 0}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullStr', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_24(self):
        request = [{'ok': {'value': {'nullStr': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullStr', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_25(self):
        request = [{'ok': {'value': {'nullStr': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullStr', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_26(self):
        request = [{'ok': {'value': {'nullStr': {}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullStr', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_27(self):
        request = [{'ok': {'value': {'arrStr': []}}}, {'fn.test': {'value': {'arrStr': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrStr': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_28(self):
        request = [{'ok': {'value': {'arrStr': ['']}}}, {'fn.test': {'value': {'arrStr': ['']}}}]
        expected_response = [{}, {'ok': {'value': {'arrStr': ['']}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_29(self):
        request = [{'ok': {'value': {'arrStr': ['abc']}}}, {'fn.test': {'value': {'arrStr': ['abc']}}}]
        expected_response = [{}, {'ok': {'value': {'arrStr': ['abc']}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_30(self):
        request = [{'ok': {'value': {'arrStr': ['', 'abc']}}}, {'fn.test': {'value': {'arrStr': ['', 'abc']}}}]
        expected_response = [{}, {'ok': {'value': {'arrStr': ['', 'abc']}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_31(self):
        request = [{}, {'fn.test': {'value': {'arrStr': ['', None]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_32(self):
        request = [{}, {'fn.test': {'value': {'arrStr': ['', False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_33(self):
        request = [{}, {'fn.test': {'value': {'arrStr': ['', 0]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_34(self):
        request = [{}, {'fn.test': {'value': {'arrStr': ['', 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_35(self):
        request = [{}, {'fn.test': {'value': {'arrStr': ['', []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_36(self):
        request = [{}, {'fn.test': {'value': {'arrStr': ['', {}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_37(self):
        request = [{'ok': {'value': {'arrStr': ['', None]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_38(self):
        request = [{'ok': {'value': {'arrStr': ['', False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_39(self):
        request = [{'ok': {'value': {'arrStr': ['', 0]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_40(self):
        request = [{'ok': {'value': {'arrStr': ['', 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_41(self):
        request = [{'ok': {'value': {'arrStr': ['', []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_42(self):
        request = [{'ok': {'value': {'arrStr': ['', {}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_43(self):
        request = [{'ok': {'value': {'arrNullStr': []}}}, {'fn.test': {'value': {'arrNullStr': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullStr': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_44(self):
        request = [{'ok': {'value': {'arrNullStr': [None]}}}, {'fn.test': {'value': {'arrNullStr': [None]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullStr': [None]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_45(self):
        request = [{'ok': {'value': {'arrNullStr': ['']}}}, {'fn.test': {'value': {'arrNullStr': ['']}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullStr': ['']}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_46(self):
        request = [{'ok': {'value': {'arrNullStr': ['abc']}}}, {'fn.test': {'value': {'arrNullStr': ['abc']}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullStr': ['abc']}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_47(self):
        request = [{'ok': {'value': {'arrNullStr': [None, '', 'abc']}}}, {'fn.test': {'value': {'arrNullStr': [None, '', 'abc']}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullStr': [None, '', 'abc']}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_48(self):
        request = [{}, {'fn.test': {'value': {'arrNullStr': ['', False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_49(self):
        request = [{}, {'fn.test': {'value': {'arrNullStr': ['', 0]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_50(self):
        request = [{}, {'fn.test': {'value': {'arrNullStr': ['', 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_51(self):
        request = [{}, {'fn.test': {'value': {'arrNullStr': ['', []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_52(self):
        request = [{}, {'fn.test': {'value': {'arrNullStr': ['', {}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_53(self):
        request = [{'ok': {'value': {'arrNullStr': ['', False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_54(self):
        request = [{'ok': {'value': {'arrNullStr': ['', 0]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_55(self):
        request = [{'ok': {'value': {'arrNullStr': ['', 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_56(self):
        request = [{'ok': {'value': {'arrNullStr': ['', []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_57(self):
        request = [{'ok': {'value': {'arrNullStr': ['', {}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_58(self):
        request = [{'ok': {'value': {'objStr': {}}}}, {'fn.test': {'value': {'objStr': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objStr': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_59(self):
        request = [{'ok': {'value': {'objStr': {'a': ''}}}}, {'fn.test': {'value': {'objStr': {'a': ''}}}}]
        expected_response = [{}, {'ok': {'value': {'objStr': {'a': ''}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_60(self):
        request = [{'ok': {'value': {'objStr': {'a': 'abc'}}}}, {'fn.test': {'value': {'objStr': {'a': 'abc'}}}}]
        expected_response = [{}, {'ok': {'value': {'objStr': {'a': 'abc'}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_61(self):
        request = [{'ok': {'value': {'objStr': {'a': '', 'b': 'abc'}}}}, {'fn.test': {'value': {'objStr': {'a': '', 'b': 'abc'}}}}]
        expected_response = [{}, {'ok': {'value': {'objStr': {'a': '', 'b': 'abc'}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_62(self):
        request = [{}, {'fn.test': {'value': {'objStr': {'a': '', 'b': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_63(self):
        request = [{}, {'fn.test': {'value': {'objStr': {'a': '', 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_64(self):
        request = [{}, {'fn.test': {'value': {'objStr': {'a': '', 'b': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_65(self):
        request = [{}, {'fn.test': {'value': {'objStr': {'a': '', 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_66(self):
        request = [{}, {'fn.test': {'value': {'objStr': {'a': '', 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_67(self):
        request = [{}, {'fn.test': {'value': {'objStr': {'a': '', 'b': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_68(self):
        request = [{'ok': {'value': {'objStr': {'a': '', 'b': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_69(self):
        request = [{'ok': {'value': {'objStr': {'a': '', 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_70(self):
        request = [{'ok': {'value': {'objStr': {'a': '', 'b': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_71(self):
        request = [{'ok': {'value': {'objStr': {'a': '', 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_72(self):
        request = [{'ok': {'value': {'objStr': {'a': '', 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_73(self):
        request = [{'ok': {'value': {'objStr': {'a': '', 'b': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_74(self):
        request = [{'ok': {'value': {'objNullStr': {}}}}, {'fn.test': {'value': {'objNullStr': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullStr': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_75(self):
        request = [{'ok': {'value': {'objNullStr': {'a': None}}}}, {'fn.test': {'value': {'objNullStr': {'a': None}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullStr': {'a': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_76(self):
        request = [{'ok': {'value': {'objNullStr': {'a': ''}}}}, {'fn.test': {'value': {'objNullStr': {'a': ''}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullStr': {'a': ''}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_77(self):
        request = [{'ok': {'value': {'objNullStr': {'a': 'abc'}}}}, {'fn.test': {'value': {'objNullStr': {'a': 'abc'}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullStr': {'a': 'abc'}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_78(self):
        request = [{'ok': {'value': {'objNullStr': {'a': None, 'b': '', 'c': 'abc'}}}}, {'fn.test': {'value': {'objNullStr': {'a': None, 'b': '', 'c': 'abc'}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullStr': {'a': None, 'b': '', 'c': 'abc'}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_79(self):
        request = [{}, {'fn.test': {'value': {'objNullStr': {'a': '', 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_80(self):
        request = [{}, {'fn.test': {'value': {'objNullStr': {'a': '', 'b': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_81(self):
        request = [{}, {'fn.test': {'value': {'objNullStr': {'a': '', 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_82(self):
        request = [{}, {'fn.test': {'value': {'objNullStr': {'a': '', 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_83(self):
        request = [{}, {'fn.test': {'value': {'objNullStr': {'a': '', 'b': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_84(self):
        request = [{'ok': {'value': {'objNullStr': {'a': '', 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_85(self):
        request = [{'ok': {'value': {'objNullStr': {'a': '', 'b': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_86(self):
        request = [{'ok': {'value': {'objNullStr': {'a': '', 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_87(self):
        request = [{'ok': {'value': {'objNullStr': {'a': '', 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_88(self):
        request = [{'ok': {'value': {'objNullStr': {'a': '', 'b': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_89(self):
        request = [{'ok': {'value': {'pStrStr': {'wrap': ''}}}}, {'fn.test': {'value': {'pStrStr': {'wrap': ''}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrStr': {'wrap': ''}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_90(self):
        request = [{'ok': {'value': {'pStrStr': {'wrap': 'abc'}}}}, {'fn.test': {'value': {'pStrStr': {'wrap': 'abc'}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrStr': {'wrap': 'abc'}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_91(self):
        request = [{}, {'fn.test': {'value': {'pStrStr': {'wrap': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_92(self):
        request = [{}, {'fn.test': {'value': {'pStrStr': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_93(self):
        request = [{}, {'fn.test': {'value': {'pStrStr': {'wrap': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_94(self):
        request = [{}, {'fn.test': {'value': {'pStrStr': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_95(self):
        request = [{}, {'fn.test': {'value': {'pStrStr': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_96(self):
        request = [{}, {'fn.test': {'value': {'pStrStr': {'wrap': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_97(self):
        request = [{'ok': {'value': {'pStrStr': {'wrap': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_98(self):
        request = [{'ok': {'value': {'pStrStr': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_99(self):
        request = [{'ok': {'value': {'pStrStr': {'wrap': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_100(self):
        request = [{'ok': {'value': {'pStrStr': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_101(self):
        request = [{'ok': {'value': {'pStrStr': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_102(self):
        request = [{'ok': {'value': {'pStrStr': {'wrap': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_103(self):
        request = [{'ok': {'value': {'pStrNullStr': {'wrap': None}}}}, {'fn.test': {'value': {'pStrNullStr': {'wrap': None}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullStr': {'wrap': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_104(self):
        request = [{'ok': {'value': {'pStrNullStr': {'wrap': ''}}}}, {'fn.test': {'value': {'pStrNullStr': {'wrap': ''}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullStr': {'wrap': ''}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_105(self):
        request = [{'ok': {'value': {'pStrNullStr': {'wrap': 'abc'}}}}, {'fn.test': {'value': {'pStrNullStr': {'wrap': 'abc'}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullStr': {'wrap': 'abc'}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_106(self):
        request = [{}, {'fn.test': {'value': {'pStrNullStr': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_107(self):
        request = [{}, {'fn.test': {'value': {'pStrNullStr': {'wrap': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_108(self):
        request = [{}, {'fn.test': {'value': {'pStrNullStr': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_109(self):
        request = [{}, {'fn.test': {'value': {'pStrNullStr': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_110(self):
        request = [{}, {'fn.test': {'value': {'pStrNullStr': {'wrap': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_111(self):
        request = [{'ok': {'value': {'pStrNullStr': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_112(self):
        request = [{'ok': {'value': {'pStrNullStr': {'wrap': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_113(self):
        request = [{'ok': {'value': {'pStrNullStr': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_114(self):
        request = [{'ok': {'value': {'pStrNullStr': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_115(self):
        request = [{'ok': {'value': {'pStrNullStr': {'wrap': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_116(self):
        request = [{'ok': {'value': {'pEnumStr': {'one': {}}}}}, {'fn.test': {'value': {'pEnumStr': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumStr': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_117(self):
        request = [{'ok': {'value': {'pEnumStr': {'two': {'ewrap': ''}}}}}, {'fn.test': {'value': {'pEnumStr': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumStr': {'two': {'ewrap': ''}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_118(self):
        request = [{'ok': {'value': {'pEnumStr': {'two': {'ewrap': 'abc'}}}}}, {'fn.test': {'value': {'pEnumStr': {'two': {'ewrap': 'abc'}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumStr': {'two': {'ewrap': 'abc'}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_119(self):
        request = [{}, {'fn.test': {'value': {'pEnumStr': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_120(self):
        request = [{}, {'fn.test': {'value': {'pEnumStr': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_121(self):
        request = [{}, {'fn.test': {'value': {'pEnumStr': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_122(self):
        request = [{}, {'fn.test': {'value': {'pEnumStr': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_123(self):
        request = [{}, {'fn.test': {'value': {'pEnumStr': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_124(self):
        request = [{}, {'fn.test': {'value': {'pEnumStr': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_125(self):
        request = [{'ok': {'value': {'pEnumStr': {'two': {'ewrap': None}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_126(self):
        request = [{'ok': {'value': {'pEnumStr': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_127(self):
        request = [{'ok': {'value': {'pEnumStr': {'two': {'ewrap': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_128(self):
        request = [{'ok': {'value': {'pEnumStr': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_129(self):
        request = [{'ok': {'value': {'pEnumStr': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_130(self):
        request = [{'ok': {'value': {'pEnumStr': {'two': {'ewrap': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_131(self):
        request = [{'ok': {'value': {'pEnumNullStr': {'one': {}}}}}, {'fn.test': {'value': {'pEnumNullStr': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullStr': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_132(self):
        request = [{'ok': {'value': {'pEnumNullStr': {'two': {'ewrap': None}}}}}, {'fn.test': {'value': {'pEnumNullStr': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullStr': {'two': {'ewrap': None}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_133(self):
        request = [{'ok': {'value': {'pEnumNullStr': {'two': {'ewrap': ''}}}}}, {'fn.test': {'value': {'pEnumNullStr': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullStr': {'two': {'ewrap': ''}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_134(self):
        request = [{'ok': {'value': {'pEnumNullStr': {'two': {'ewrap': 'abc'}}}}}, {'fn.test': {'value': {'pEnumNullStr': {'two': {'ewrap': 'abc'}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullStr': {'two': {'ewrap': 'abc'}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_135(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullStr': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_136(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullStr': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_137(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullStr': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_138(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullStr': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_139(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullStr': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_140(self):
        request = [{'ok': {'value': {'pEnumNullStr': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_141(self):
        request = [{'ok': {'value': {'pEnumNullStr': {'two': {'ewrap': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_142(self):
        request = [{'ok': {'value': {'pEnumNullStr': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_143(self):
        request = [{'ok': {'value': {'pEnumNullStr': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_string_144(self):
        request = [{'ok': {'value': {'pEnumNullStr': {'two': {'ewrap': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_0(self):
        request = [{'ok': {'value': {'arr': []}}}, {'fn.test': {'value': {'arr': []}}}]
        expected_response = [{}, {'ok': {'value': {'arr': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_1(self):
        request = [{'ok': {'value': {'arr': [False, 0, 0.1, '']}}}, {'fn.test': {'value': {'arr': [False, 0, 0.1, '']}}}]
        expected_response = [{}, {'ok': {'value': {'arr': [False, 0, 0.1, '']}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_2(self):
        request = [{}, {'fn.test': {'value': {'arr': None}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arr', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_3(self):
        request = [{}, {'fn.test': {'value': {'arr': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arr', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_4(self):
        request = [{}, {'fn.test': {'value': {'arr': 0}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arr', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_5(self):
        request = [{}, {'fn.test': {'value': {'arr': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arr', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_6(self):
        request = [{}, {'fn.test': {'value': {'arr': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arr', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_7(self):
        request = [{}, {'fn.test': {'value': {'arr': {}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arr', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_8(self):
        request = [{'ok': {'value': {'arr': None}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arr', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_9(self):
        request = [{'ok': {'value': {'arr': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arr', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_10(self):
        request = [{'ok': {'value': {'arr': 0}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arr', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_11(self):
        request = [{'ok': {'value': {'arr': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arr', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_12(self):
        request = [{'ok': {'value': {'arr': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arr', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_13(self):
        request = [{'ok': {'value': {'arr': {}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arr', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_14(self):
        request = [{'ok': {'value': {'nullArr': None}}}, {'fn.test': {'value': {'nullArr': None}}}]
        expected_response = [{}, {'ok': {'value': {'nullArr': None}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_15(self):
        request = [{'ok': {'value': {'nullArr': []}}}, {'fn.test': {'value': {'nullArr': []}}}]
        expected_response = [{}, {'ok': {'value': {'nullArr': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_16(self):
        request = [{'ok': {'value': {'nullArr': [False, 0, 0.1, '']}}}, {'fn.test': {'value': {'nullArr': [False, 0, 0.1, '']}}}]
        expected_response = [{}, {'ok': {'value': {'nullArr': [False, 0, 0.1, '']}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_17(self):
        request = [{}, {'fn.test': {'value': {'nullArr': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullArr', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_18(self):
        request = [{}, {'fn.test': {'value': {'nullArr': 0}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullArr', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_19(self):
        request = [{}, {'fn.test': {'value': {'nullArr': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullArr', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_20(self):
        request = [{}, {'fn.test': {'value': {'nullArr': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullArr', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_21(self):
        request = [{}, {'fn.test': {'value': {'nullArr': {}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullArr', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_22(self):
        request = [{'ok': {'value': {'nullArr': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullArr', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_23(self):
        request = [{'ok': {'value': {'nullArr': 0}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullArr', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_24(self):
        request = [{'ok': {'value': {'nullArr': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullArr', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_25(self):
        request = [{'ok': {'value': {'nullArr': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullArr', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_26(self):
        request = [{'ok': {'value': {'nullArr': {}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullArr', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_27(self):
        request = [{'ok': {'value': {'arrArr': []}}}, {'fn.test': {'value': {'arrArr': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrArr': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_28(self):
        request = [{'ok': {'value': {'arrArr': [[]]}}}, {'fn.test': {'value': {'arrArr': [[]]}}}]
        expected_response = [{}, {'ok': {'value': {'arrArr': [[]]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_29(self):
        request = [{'ok': {'value': {'arrArr': [[False, 0, 0.1, '']]}}}, {'fn.test': {'value': {'arrArr': [[False, 0, 0.1, '']]}}}]
        expected_response = [{}, {'ok': {'value': {'arrArr': [[False, 0, 0.1, '']]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_30(self):
        request = [{'ok': {'value': {'arrArr': [[], [False, 0, 0.1, '']]}}}, {'fn.test': {'value': {'arrArr': [[], [False, 0, 0.1, '']]}}}]
        expected_response = [{}, {'ok': {'value': {'arrArr': [[], [False, 0, 0.1, '']]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_31(self):
        request = [{}, {'fn.test': {'value': {'arrArr': [[], None]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrArr[1]', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_32(self):
        request = [{}, {'fn.test': {'value': {'arrArr': [[], False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrArr[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_33(self):
        request = [{}, {'fn.test': {'value': {'arrArr': [[], 0]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrArr[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_34(self):
        request = [{}, {'fn.test': {'value': {'arrArr': [[], 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrArr[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_35(self):
        request = [{}, {'fn.test': {'value': {'arrArr': [[], '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrArr[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_36(self):
        request = [{}, {'fn.test': {'value': {'arrArr': [[], {}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrArr[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_37(self):
        request = [{'ok': {'value': {'arrArr': [[], None]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrArr[1]', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_38(self):
        request = [{'ok': {'value': {'arrArr': [[], False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrArr[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_39(self):
        request = [{'ok': {'value': {'arrArr': [[], 0]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrArr[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_40(self):
        request = [{'ok': {'value': {'arrArr': [[], 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrArr[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_41(self):
        request = [{'ok': {'value': {'arrArr': [[], '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrArr[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_42(self):
        request = [{'ok': {'value': {'arrArr': [[], {}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrArr[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_43(self):
        request = [{'ok': {'value': {'arrNullArr': []}}}, {'fn.test': {'value': {'arrNullArr': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullArr': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_44(self):
        request = [{'ok': {'value': {'arrNullArr': [None]}}}, {'fn.test': {'value': {'arrNullArr': [None]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullArr': [None]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_45(self):
        request = [{'ok': {'value': {'arrNullArr': [[]]}}}, {'fn.test': {'value': {'arrNullArr': [[]]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullArr': [[]]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_46(self):
        request = [{'ok': {'value': {'arrNullArr': [[False, 0, 0.1, '']]}}}, {'fn.test': {'value': {'arrNullArr': [[False, 0, 0.1, '']]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullArr': [[False, 0, 0.1, '']]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_47(self):
        request = [{'ok': {'value': {'arrNullArr': [None, [], [False, 0, 0.1, '']]}}}, {'fn.test': {'value': {'arrNullArr': [None, [], [False, 0, 0.1, '']]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullArr': [None, [], [False, 0, 0.1, '']]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_48(self):
        request = [{}, {'fn.test': {'value': {'arrNullArr': [[], False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullArr[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_49(self):
        request = [{}, {'fn.test': {'value': {'arrNullArr': [[], 0]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullArr[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_50(self):
        request = [{}, {'fn.test': {'value': {'arrNullArr': [[], 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullArr[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_51(self):
        request = [{}, {'fn.test': {'value': {'arrNullArr': [[], '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullArr[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_52(self):
        request = [{}, {'fn.test': {'value': {'arrNullArr': [[], {}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullArr[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_53(self):
        request = [{'ok': {'value': {'arrNullArr': [[], False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullArr[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_54(self):
        request = [{'ok': {'value': {'arrNullArr': [[], 0]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullArr[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_55(self):
        request = [{'ok': {'value': {'arrNullArr': [[], 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullArr[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_56(self):
        request = [{'ok': {'value': {'arrNullArr': [[], '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullArr[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_57(self):
        request = [{'ok': {'value': {'arrNullArr': [[], {}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullArr[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_58(self):
        request = [{'ok': {'value': {'objArr': {}}}}, {'fn.test': {'value': {'objArr': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objArr': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_59(self):
        request = [{'ok': {'value': {'objArr': {'a': []}}}}, {'fn.test': {'value': {'objArr': {'a': []}}}}]
        expected_response = [{}, {'ok': {'value': {'objArr': {'a': []}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_60(self):
        request = [{'ok': {'value': {'objArr': {'a': [False, 0, 0.1, '']}}}}, {'fn.test': {'value': {'objArr': {'a': [False, 0, 0.1, '']}}}}]
        expected_response = [{}, {'ok': {'value': {'objArr': {'a': [False, 0, 0.1, '']}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_61(self):
        request = [{'ok': {'value': {'objArr': {'a': [], 'b': [False, 0, 0.1, '']}}}}, {'fn.test': {'value': {'objArr': {'a': [], 'b': [False, 0, 0.1, '']}}}}]
        expected_response = [{}, {'ok': {'value': {'objArr': {'a': [], 'b': [False, 0, 0.1, '']}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_62(self):
        request = [{}, {'fn.test': {'value': {'objArr': {'a': [], 'b': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objArr{b}', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_63(self):
        request = [{}, {'fn.test': {'value': {'objArr': {'a': [], 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objArr{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_64(self):
        request = [{}, {'fn.test': {'value': {'objArr': {'a': [], 'b': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objArr{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_65(self):
        request = [{}, {'fn.test': {'value': {'objArr': {'a': [], 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objArr{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_66(self):
        request = [{}, {'fn.test': {'value': {'objArr': {'a': [], 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objArr{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_67(self):
        request = [{}, {'fn.test': {'value': {'objArr': {'a': [], 'b': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objArr{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_68(self):
        request = [{'ok': {'value': {'objArr': {'a': [], 'b': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objArr{b}', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_69(self):
        request = [{'ok': {'value': {'objArr': {'a': [], 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objArr{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_70(self):
        request = [{'ok': {'value': {'objArr': {'a': [], 'b': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objArr{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_71(self):
        request = [{'ok': {'value': {'objArr': {'a': [], 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objArr{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_72(self):
        request = [{'ok': {'value': {'objArr': {'a': [], 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objArr{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_73(self):
        request = [{'ok': {'value': {'objArr': {'a': [], 'b': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objArr{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_74(self):
        request = [{'ok': {'value': {'objNullArr': {}}}}, {'fn.test': {'value': {'objNullArr': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullArr': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_75(self):
        request = [{'ok': {'value': {'objNullArr': {'a': None}}}}, {'fn.test': {'value': {'objNullArr': {'a': None}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullArr': {'a': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_76(self):
        request = [{'ok': {'value': {'objNullArr': {'a': []}}}}, {'fn.test': {'value': {'objNullArr': {'a': []}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullArr': {'a': []}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_77(self):
        request = [{'ok': {'value': {'objNullArr': {'a': [False, 0, 0.1, '']}}}}, {'fn.test': {'value': {'objNullArr': {'a': [False, 0, 0.1, '']}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullArr': {'a': [False, 0, 0.1, '']}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_78(self):
        request = [{'ok': {'value': {'objNullArr': {'a': None, 'b': [], 'c': [False, 0, 0.1, '']}}}}, {'fn.test': {'value': {'objNullArr': {'a': None, 'b': [], 'c': [False, 0, 0.1, '']}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullArr': {'a': None, 'b': [], 'c': [False, 0, 0.1, '']}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_79(self):
        request = [{}, {'fn.test': {'value': {'objNullArr': {'a': [], 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullArr{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_80(self):
        request = [{}, {'fn.test': {'value': {'objNullArr': {'a': [], 'b': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullArr{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_81(self):
        request = [{}, {'fn.test': {'value': {'objNullArr': {'a': [], 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullArr{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_82(self):
        request = [{}, {'fn.test': {'value': {'objNullArr': {'a': [], 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullArr{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_83(self):
        request = [{}, {'fn.test': {'value': {'objNullArr': {'a': [], 'b': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullArr{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_84(self):
        request = [{'ok': {'value': {'objNullArr': {'a': [], 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullArr{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_85(self):
        request = [{'ok': {'value': {'objNullArr': {'a': [], 'b': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullArr{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_86(self):
        request = [{'ok': {'value': {'objNullArr': {'a': [], 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullArr{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_87(self):
        request = [{'ok': {'value': {'objNullArr': {'a': [], 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullArr{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_88(self):
        request = [{'ok': {'value': {'objNullArr': {'a': [], 'b': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullArr{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_89(self):
        request = [{'ok': {'value': {'pStrArr': {'wrap': []}}}}, {'fn.test': {'value': {'pStrArr': {'wrap': []}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrArr': {'wrap': []}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_90(self):
        request = [{'ok': {'value': {'pStrArr': {'wrap': [False, 0, 0.1, '']}}}}, {'fn.test': {'value': {'pStrArr': {'wrap': [False, 0, 0.1, '']}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrArr': {'wrap': [False, 0, 0.1, '']}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_91(self):
        request = [{}, {'fn.test': {'value': {'pStrArr': {'wrap': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_92(self):
        request = [{}, {'fn.test': {'value': {'pStrArr': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_93(self):
        request = [{}, {'fn.test': {'value': {'pStrArr': {'wrap': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_94(self):
        request = [{}, {'fn.test': {'value': {'pStrArr': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_95(self):
        request = [{}, {'fn.test': {'value': {'pStrArr': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_96(self):
        request = [{}, {'fn.test': {'value': {'pStrArr': {'wrap': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_97(self):
        request = [{'ok': {'value': {'pStrArr': {'wrap': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_98(self):
        request = [{'ok': {'value': {'pStrArr': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_99(self):
        request = [{'ok': {'value': {'pStrArr': {'wrap': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_100(self):
        request = [{'ok': {'value': {'pStrArr': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_101(self):
        request = [{'ok': {'value': {'pStrArr': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_102(self):
        request = [{'ok': {'value': {'pStrArr': {'wrap': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_103(self):
        request = [{'ok': {'value': {'pStrNullArr': {'wrap': None}}}}, {'fn.test': {'value': {'pStrNullArr': {'wrap': None}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullArr': {'wrap': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_104(self):
        request = [{'ok': {'value': {'pStrNullArr': {'wrap': []}}}}, {'fn.test': {'value': {'pStrNullArr': {'wrap': []}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullArr': {'wrap': []}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_105(self):
        request = [{'ok': {'value': {'pStrNullArr': {'wrap': [False, 0, 0.1, '']}}}}, {'fn.test': {'value': {'pStrNullArr': {'wrap': [False, 0, 0.1, '']}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullArr': {'wrap': [False, 0, 0.1, '']}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_106(self):
        request = [{}, {'fn.test': {'value': {'pStrNullArr': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_107(self):
        request = [{}, {'fn.test': {'value': {'pStrNullArr': {'wrap': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_108(self):
        request = [{}, {'fn.test': {'value': {'pStrNullArr': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_109(self):
        request = [{}, {'fn.test': {'value': {'pStrNullArr': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_110(self):
        request = [{}, {'fn.test': {'value': {'pStrNullArr': {'wrap': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_111(self):
        request = [{'ok': {'value': {'pStrNullArr': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_112(self):
        request = [{'ok': {'value': {'pStrNullArr': {'wrap': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_113(self):
        request = [{'ok': {'value': {'pStrNullArr': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_114(self):
        request = [{'ok': {'value': {'pStrNullArr': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_115(self):
        request = [{'ok': {'value': {'pStrNullArr': {'wrap': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_116(self):
        request = [{'ok': {'value': {'pEnumArr': {'one': {}}}}}, {'fn.test': {'value': {'pEnumArr': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumArr': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_117(self):
        request = [{'ok': {'value': {'pEnumArr': {'two': {'ewrap': []}}}}}, {'fn.test': {'value': {'pEnumArr': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumArr': {'two': {'ewrap': []}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_118(self):
        request = [{'ok': {'value': {'pEnumArr': {'two': {'ewrap': [False, 0, 0.1, '']}}}}}, {'fn.test': {'value': {'pEnumArr': {'two': {'ewrap': [False, 0, 0.1, '']}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumArr': {'two': {'ewrap': [False, 0, 0.1, '']}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_119(self):
        request = [{}, {'fn.test': {'value': {'pEnumArr': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_120(self):
        request = [{}, {'fn.test': {'value': {'pEnumArr': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_121(self):
        request = [{}, {'fn.test': {'value': {'pEnumArr': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_122(self):
        request = [{}, {'fn.test': {'value': {'pEnumArr': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_123(self):
        request = [{}, {'fn.test': {'value': {'pEnumArr': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_124(self):
        request = [{}, {'fn.test': {'value': {'pEnumArr': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_125(self):
        request = [{'ok': {'value': {'pEnumArr': {'two': {'ewrap': None}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_126(self):
        request = [{'ok': {'value': {'pEnumArr': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_127(self):
        request = [{'ok': {'value': {'pEnumArr': {'two': {'ewrap': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_128(self):
        request = [{'ok': {'value': {'pEnumArr': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_129(self):
        request = [{'ok': {'value': {'pEnumArr': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_130(self):
        request = [{'ok': {'value': {'pEnumArr': {'two': {'ewrap': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_131(self):
        request = [{'ok': {'value': {'pEnumNullArr': {'one': {}}}}}, {'fn.test': {'value': {'pEnumNullArr': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullArr': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_132(self):
        request = [{'ok': {'value': {'pEnumNullArr': {'two': {'ewrap': None}}}}}, {'fn.test': {'value': {'pEnumNullArr': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullArr': {'two': {'ewrap': None}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_133(self):
        request = [{'ok': {'value': {'pEnumNullArr': {'two': {'ewrap': []}}}}}, {'fn.test': {'value': {'pEnumNullArr': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullArr': {'two': {'ewrap': []}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_134(self):
        request = [{'ok': {'value': {'pEnumNullArr': {'two': {'ewrap': [False, 0, 0.1, '']}}}}}, {'fn.test': {'value': {'pEnumNullArr': {'two': {'ewrap': [False, 0, 0.1, '']}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullArr': {'two': {'ewrap': [False, 0, 0.1, '']}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_135(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullArr': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_136(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullArr': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_137(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullArr': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_138(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullArr': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_139(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullArr': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_140(self):
        request = [{'ok': {'value': {'pEnumNullArr': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_141(self):
        request = [{'ok': {'value': {'pEnumNullArr': {'two': {'ewrap': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_142(self):
        request = [{'ok': {'value': {'pEnumNullArr': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_143(self):
        request = [{'ok': {'value': {'pEnumNullArr': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_array_144(self):
        request = [{'ok': {'value': {'pEnumNullArr': {'two': {'ewrap': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_0(self):
        request = [{'ok': {'value': {'obj': {}}}}, {'fn.test': {'value': {'obj': {}}}}]
        expected_response = [{}, {'ok': {'value': {'obj': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_1(self):
        request = [{'ok': {'value': {'obj': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}, {'fn.test': {'value': {'obj': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}]
        expected_response = [{}, {'ok': {'value': {'obj': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_2(self):
        request = [{}, {'fn.test': {'value': {'obj': None}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.obj', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_3(self):
        request = [{}, {'fn.test': {'value': {'obj': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.obj', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_4(self):
        request = [{}, {'fn.test': {'value': {'obj': 0}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.obj', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_5(self):
        request = [{}, {'fn.test': {'value': {'obj': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.obj', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_6(self):
        request = [{}, {'fn.test': {'value': {'obj': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.obj', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_7(self):
        request = [{}, {'fn.test': {'value': {'obj': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.obj', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_8(self):
        request = [{'ok': {'value': {'obj': None}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.obj', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_9(self):
        request = [{'ok': {'value': {'obj': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.obj', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_10(self):
        request = [{'ok': {'value': {'obj': 0}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.obj', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_11(self):
        request = [{'ok': {'value': {'obj': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.obj', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_12(self):
        request = [{'ok': {'value': {'obj': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.obj', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_13(self):
        request = [{'ok': {'value': {'obj': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.obj', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_14(self):
        request = [{'ok': {'value': {'nullObj': None}}}, {'fn.test': {'value': {'nullObj': None}}}]
        expected_response = [{}, {'ok': {'value': {'nullObj': None}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_15(self):
        request = [{'ok': {'value': {'nullObj': {}}}}, {'fn.test': {'value': {'nullObj': {}}}}]
        expected_response = [{}, {'ok': {'value': {'nullObj': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_16(self):
        request = [{'ok': {'value': {'nullObj': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}, {'fn.test': {'value': {'nullObj': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}]
        expected_response = [{}, {'ok': {'value': {'nullObj': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_17(self):
        request = [{}, {'fn.test': {'value': {'nullObj': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullObj', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_18(self):
        request = [{}, {'fn.test': {'value': {'nullObj': 0}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullObj', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_19(self):
        request = [{}, {'fn.test': {'value': {'nullObj': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullObj', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_20(self):
        request = [{}, {'fn.test': {'value': {'nullObj': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullObj', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_21(self):
        request = [{}, {'fn.test': {'value': {'nullObj': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullObj', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_22(self):
        request = [{'ok': {'value': {'nullObj': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullObj', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_23(self):
        request = [{'ok': {'value': {'nullObj': 0}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullObj', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_24(self):
        request = [{'ok': {'value': {'nullObj': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullObj', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_25(self):
        request = [{'ok': {'value': {'nullObj': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullObj', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_26(self):
        request = [{'ok': {'value': {'nullObj': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullObj', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_27(self):
        request = [{'ok': {'value': {'arrObj': []}}}, {'fn.test': {'value': {'arrObj': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrObj': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_28(self):
        request = [{'ok': {'value': {'arrObj': [{}]}}}, {'fn.test': {'value': {'arrObj': [{}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrObj': [{}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_29(self):
        request = [{'ok': {'value': {'arrObj': [{'a': False, 'b': 0, 'c': 0.1, 'd': ''}]}}}, {'fn.test': {'value': {'arrObj': [{'a': False, 'b': 0, 'c': 0.1, 'd': ''}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrObj': [{'a': False, 'b': 0, 'c': 0.1, 'd': ''}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_30(self):
        request = [{'ok': {'value': {'arrObj': [{}, {'a': False, 'b': 0, 'c': 0.1, 'd': ''}]}}}, {'fn.test': {'value': {'arrObj': [{}, {'a': False, 'b': 0, 'c': 0.1, 'd': ''}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrObj': [{}, {'a': False, 'b': 0, 'c': 0.1, 'd': ''}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_31(self):
        request = [{}, {'fn.test': {'value': {'arrObj': [{}, None]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrObj[1]', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_32(self):
        request = [{}, {'fn.test': {'value': {'arrObj': [{}, False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrObj[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_33(self):
        request = [{}, {'fn.test': {'value': {'arrObj': [{}, 0]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrObj[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_34(self):
        request = [{}, {'fn.test': {'value': {'arrObj': [{}, 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrObj[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_35(self):
        request = [{}, {'fn.test': {'value': {'arrObj': [{}, '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrObj[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_36(self):
        request = [{}, {'fn.test': {'value': {'arrObj': [{}, []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrObj[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_37(self):
        request = [{'ok': {'value': {'arrObj': [{}, None]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrObj[1]', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_38(self):
        request = [{'ok': {'value': {'arrObj': [{}, False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrObj[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_39(self):
        request = [{'ok': {'value': {'arrObj': [{}, 0]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrObj[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_40(self):
        request = [{'ok': {'value': {'arrObj': [{}, 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrObj[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_41(self):
        request = [{'ok': {'value': {'arrObj': [{}, '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrObj[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_42(self):
        request = [{'ok': {'value': {'arrObj': [{}, []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrObj[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_43(self):
        request = [{'ok': {'value': {'arrNullObj': []}}}, {'fn.test': {'value': {'arrNullObj': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullObj': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_44(self):
        request = [{'ok': {'value': {'arrNullObj': [None]}}}, {'fn.test': {'value': {'arrNullObj': [None]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullObj': [None]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_45(self):
        request = [{'ok': {'value': {'arrNullObj': [{}]}}}, {'fn.test': {'value': {'arrNullObj': [{}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullObj': [{}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_46(self):
        request = [{'ok': {'value': {'arrNullObj': [{'a': False, 'b': 0, 'c': 0.1, 'd': ''}]}}}, {'fn.test': {'value': {'arrNullObj': [{'a': False, 'b': 0, 'c': 0.1, 'd': ''}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullObj': [{'a': False, 'b': 0, 'c': 0.1, 'd': ''}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_47(self):
        request = [{'ok': {'value': {'arrNullObj': [None, {}, {'a': False, 'b': 0, 'c': 0.1, 'd': ''}]}}}, {'fn.test': {'value': {'arrNullObj': [None, {}, {'a': False, 'b': 0, 'c': 0.1, 'd': ''}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullObj': [None, {}, {'a': False, 'b': 0, 'c': 0.1, 'd': ''}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_48(self):
        request = [{}, {'fn.test': {'value': {'arrNullObj': [{}, False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullObj[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_49(self):
        request = [{}, {'fn.test': {'value': {'arrNullObj': [{}, 0]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullObj[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_50(self):
        request = [{}, {'fn.test': {'value': {'arrNullObj': [{}, 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullObj[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_51(self):
        request = [{}, {'fn.test': {'value': {'arrNullObj': [{}, '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullObj[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_52(self):
        request = [{}, {'fn.test': {'value': {'arrNullObj': [{}, []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullObj[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_53(self):
        request = [{'ok': {'value': {'arrNullObj': [{}, False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullObj[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_54(self):
        request = [{'ok': {'value': {'arrNullObj': [{}, 0]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullObj[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_55(self):
        request = [{'ok': {'value': {'arrNullObj': [{}, 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullObj[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_56(self):
        request = [{'ok': {'value': {'arrNullObj': [{}, '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullObj[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_57(self):
        request = [{'ok': {'value': {'arrNullObj': [{}, []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullObj[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_58(self):
        request = [{'ok': {'value': {'objObj': {}}}}, {'fn.test': {'value': {'objObj': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objObj': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_59(self):
        request = [{'ok': {'value': {'objObj': {'a': {}}}}}, {'fn.test': {'value': {'objObj': {'a': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'objObj': {'a': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_60(self):
        request = [{'ok': {'value': {'objObj': {'a': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}, {'fn.test': {'value': {'objObj': {'a': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}]
        expected_response = [{}, {'ok': {'value': {'objObj': {'a': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_61(self):
        request = [{'ok': {'value': {'objObj': {'a': {}, 'b': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}, {'fn.test': {'value': {'objObj': {'a': {}, 'b': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}]
        expected_response = [{}, {'ok': {'value': {'objObj': {'a': {}, 'b': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_62(self):
        request = [{}, {'fn.test': {'value': {'objObj': {'a': {}, 'b': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objObj{b}', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_63(self):
        request = [{}, {'fn.test': {'value': {'objObj': {'a': {}, 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objObj{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_64(self):
        request = [{}, {'fn.test': {'value': {'objObj': {'a': {}, 'b': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objObj{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_65(self):
        request = [{}, {'fn.test': {'value': {'objObj': {'a': {}, 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objObj{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_66(self):
        request = [{}, {'fn.test': {'value': {'objObj': {'a': {}, 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objObj{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_67(self):
        request = [{}, {'fn.test': {'value': {'objObj': {'a': {}, 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objObj{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_68(self):
        request = [{'ok': {'value': {'objObj': {'a': {}, 'b': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objObj{b}', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_69(self):
        request = [{'ok': {'value': {'objObj': {'a': {}, 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objObj{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_70(self):
        request = [{'ok': {'value': {'objObj': {'a': {}, 'b': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objObj{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_71(self):
        request = [{'ok': {'value': {'objObj': {'a': {}, 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objObj{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_72(self):
        request = [{'ok': {'value': {'objObj': {'a': {}, 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objObj{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_73(self):
        request = [{'ok': {'value': {'objObj': {'a': {}, 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objObj{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_74(self):
        request = [{'ok': {'value': {'objNullObj': {}}}}, {'fn.test': {'value': {'objNullObj': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullObj': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_75(self):
        request = [{'ok': {'value': {'objNullObj': {'a': None}}}}, {'fn.test': {'value': {'objNullObj': {'a': None}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullObj': {'a': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_76(self):
        request = [{'ok': {'value': {'objNullObj': {'a': {}}}}}, {'fn.test': {'value': {'objNullObj': {'a': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullObj': {'a': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_77(self):
        request = [{'ok': {'value': {'objNullObj': {'a': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}, {'fn.test': {'value': {'objNullObj': {'a': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullObj': {'a': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_78(self):
        request = [{'ok': {'value': {'objNullObj': {'a': None, 'b': {}, 'c': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}, {'fn.test': {'value': {'objNullObj': {'a': None, 'b': {}, 'c': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullObj': {'a': None, 'b': {}, 'c': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_79(self):
        request = [{}, {'fn.test': {'value': {'objNullObj': {'a': {}, 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullObj{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_80(self):
        request = [{}, {'fn.test': {'value': {'objNullObj': {'a': {}, 'b': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullObj{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_81(self):
        request = [{}, {'fn.test': {'value': {'objNullObj': {'a': {}, 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullObj{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_82(self):
        request = [{}, {'fn.test': {'value': {'objNullObj': {'a': {}, 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullObj{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_83(self):
        request = [{}, {'fn.test': {'value': {'objNullObj': {'a': {}, 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullObj{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_84(self):
        request = [{'ok': {'value': {'objNullObj': {'a': {}, 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullObj{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_85(self):
        request = [{'ok': {'value': {'objNullObj': {'a': {}, 'b': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullObj{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_86(self):
        request = [{'ok': {'value': {'objNullObj': {'a': {}, 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullObj{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_87(self):
        request = [{'ok': {'value': {'objNullObj': {'a': {}, 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullObj{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_88(self):
        request = [{'ok': {'value': {'objNullObj': {'a': {}, 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullObj{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_89(self):
        request = [{'ok': {'value': {'pStrObj': {'wrap': {}}}}}, {'fn.test': {'value': {'pStrObj': {'wrap': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrObj': {'wrap': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_90(self):
        request = [{'ok': {'value': {'pStrObj': {'wrap': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}, {'fn.test': {'value': {'pStrObj': {'wrap': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrObj': {'wrap': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_91(self):
        request = [{}, {'fn.test': {'value': {'pStrObj': {'wrap': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_92(self):
        request = [{}, {'fn.test': {'value': {'pStrObj': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_93(self):
        request = [{}, {'fn.test': {'value': {'pStrObj': {'wrap': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_94(self):
        request = [{}, {'fn.test': {'value': {'pStrObj': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_95(self):
        request = [{}, {'fn.test': {'value': {'pStrObj': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_96(self):
        request = [{}, {'fn.test': {'value': {'pStrObj': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_97(self):
        request = [{'ok': {'value': {'pStrObj': {'wrap': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_98(self):
        request = [{'ok': {'value': {'pStrObj': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_99(self):
        request = [{'ok': {'value': {'pStrObj': {'wrap': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_100(self):
        request = [{'ok': {'value': {'pStrObj': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_101(self):
        request = [{'ok': {'value': {'pStrObj': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_102(self):
        request = [{'ok': {'value': {'pStrObj': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_103(self):
        request = [{'ok': {'value': {'pStrNullObj': {'wrap': None}}}}, {'fn.test': {'value': {'pStrNullObj': {'wrap': None}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullObj': {'wrap': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_104(self):
        request = [{'ok': {'value': {'pStrNullObj': {'wrap': {}}}}}, {'fn.test': {'value': {'pStrNullObj': {'wrap': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullObj': {'wrap': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_105(self):
        request = [{'ok': {'value': {'pStrNullObj': {'wrap': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}, {'fn.test': {'value': {'pStrNullObj': {'wrap': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullObj': {'wrap': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_106(self):
        request = [{}, {'fn.test': {'value': {'pStrNullObj': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_107(self):
        request = [{}, {'fn.test': {'value': {'pStrNullObj': {'wrap': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_108(self):
        request = [{}, {'fn.test': {'value': {'pStrNullObj': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_109(self):
        request = [{}, {'fn.test': {'value': {'pStrNullObj': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_110(self):
        request = [{}, {'fn.test': {'value': {'pStrNullObj': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_111(self):
        request = [{'ok': {'value': {'pStrNullObj': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_112(self):
        request = [{'ok': {'value': {'pStrNullObj': {'wrap': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_113(self):
        request = [{'ok': {'value': {'pStrNullObj': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_114(self):
        request = [{'ok': {'value': {'pStrNullObj': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_115(self):
        request = [{'ok': {'value': {'pStrNullObj': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_116(self):
        request = [{'ok': {'value': {'pEnumObj': {'one': {}}}}}, {'fn.test': {'value': {'pEnumObj': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumObj': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_117(self):
        request = [{'ok': {'value': {'pEnumObj': {'two': {'ewrap': {}}}}}}, {'fn.test': {'value': {'pEnumObj': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumObj': {'two': {'ewrap': {}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_118(self):
        request = [{'ok': {'value': {'pEnumObj': {'two': {'ewrap': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}}, {'fn.test': {'value': {'pEnumObj': {'two': {'ewrap': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumObj': {'two': {'ewrap': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_119(self):
        request = [{}, {'fn.test': {'value': {'pEnumObj': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_120(self):
        request = [{}, {'fn.test': {'value': {'pEnumObj': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_121(self):
        request = [{}, {'fn.test': {'value': {'pEnumObj': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_122(self):
        request = [{}, {'fn.test': {'value': {'pEnumObj': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_123(self):
        request = [{}, {'fn.test': {'value': {'pEnumObj': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_124(self):
        request = [{}, {'fn.test': {'value': {'pEnumObj': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_125(self):
        request = [{'ok': {'value': {'pEnumObj': {'two': {'ewrap': None}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_126(self):
        request = [{'ok': {'value': {'pEnumObj': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_127(self):
        request = [{'ok': {'value': {'pEnumObj': {'two': {'ewrap': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_128(self):
        request = [{'ok': {'value': {'pEnumObj': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_129(self):
        request = [{'ok': {'value': {'pEnumObj': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_130(self):
        request = [{'ok': {'value': {'pEnumObj': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_131(self):
        request = [{'ok': {'value': {'pEnumNullObj': {'one': {}}}}}, {'fn.test': {'value': {'pEnumNullObj': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullObj': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_132(self):
        request = [{'ok': {'value': {'pEnumNullObj': {'two': {'ewrap': None}}}}}, {'fn.test': {'value': {'pEnumNullObj': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullObj': {'two': {'ewrap': None}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_133(self):
        request = [{'ok': {'value': {'pEnumNullObj': {'two': {'ewrap': {}}}}}}, {'fn.test': {'value': {'pEnumNullObj': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullObj': {'two': {'ewrap': {}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_134(self):
        request = [{'ok': {'value': {'pEnumNullObj': {'two': {'ewrap': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}}, {'fn.test': {'value': {'pEnumNullObj': {'two': {'ewrap': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullObj': {'two': {'ewrap': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_135(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullObj': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_136(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullObj': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_137(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullObj': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_138(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullObj': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_139(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullObj': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_140(self):
        request = [{'ok': {'value': {'pEnumNullObj': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_141(self):
        request = [{'ok': {'value': {'pEnumNullObj': {'two': {'ewrap': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_142(self):
        request = [{'ok': {'value': {'pEnumNullObj': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_143(self):
        request = [{'ok': {'value': {'pEnumNullObj': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_object_144(self):
        request = [{'ok': {'value': {'pEnumNullObj': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_0(self):
        request = [{'ok': {'value': {'any': False}}}, {'fn.test': {'value': {'any': False}}}]
        expected_response = [{}, {'ok': {'value': {'any': False}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_1(self):
        request = [{'ok': {'value': {'any': 0}}}, {'fn.test': {'value': {'any': 0}}}]
        expected_response = [{}, {'ok': {'value': {'any': 0}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_2(self):
        request = [{'ok': {'value': {'any': 0.1}}}, {'fn.test': {'value': {'any': 0.1}}}]
        expected_response = [{}, {'ok': {'value': {'any': 0.1}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_3(self):
        request = [{'ok': {'value': {'any': ''}}}, {'fn.test': {'value': {'any': ''}}}]
        expected_response = [{}, {'ok': {'value': {'any': ''}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_4(self):
        request = [{'ok': {'value': {'any': []}}}, {'fn.test': {'value': {'any': []}}}]
        expected_response = [{}, {'ok': {'value': {'any': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_5(self):
        request = [{'ok': {'value': {'any': {}}}}, {'fn.test': {'value': {'any': {}}}}]
        expected_response = [{}, {'ok': {'value': {'any': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_6(self):
        request = [{}, {'fn.test': {'value': {'any': None}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.any', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Any': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_7(self):
        request = [{'ok': {'value': {'any': None}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.any', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Any': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_8(self):
        request = [{'ok': {'value': {'nullAny': None}}}, {'fn.test': {'value': {'nullAny': None}}}]
        expected_response = [{}, {'ok': {'value': {'nullAny': None}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_9(self):
        request = [{'ok': {'value': {'nullAny': False}}}, {'fn.test': {'value': {'nullAny': False}}}]
        expected_response = [{}, {'ok': {'value': {'nullAny': False}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_10(self):
        request = [{'ok': {'value': {'nullAny': 0}}}, {'fn.test': {'value': {'nullAny': 0}}}]
        expected_response = [{}, {'ok': {'value': {'nullAny': 0}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_11(self):
        request = [{'ok': {'value': {'nullAny': 0.1}}}, {'fn.test': {'value': {'nullAny': 0.1}}}]
        expected_response = [{}, {'ok': {'value': {'nullAny': 0.1}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_12(self):
        request = [{'ok': {'value': {'nullAny': ''}}}, {'fn.test': {'value': {'nullAny': ''}}}]
        expected_response = [{}, {'ok': {'value': {'nullAny': ''}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_13(self):
        request = [{'ok': {'value': {'nullAny': []}}}, {'fn.test': {'value': {'nullAny': []}}}]
        expected_response = [{}, {'ok': {'value': {'nullAny': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_14(self):
        request = [{'ok': {'value': {'nullAny': {}}}}, {'fn.test': {'value': {'nullAny': {}}}}]
        expected_response = [{}, {'ok': {'value': {'nullAny': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_15(self):
        request = [{'ok': {'value': {'arrAny': []}}}, {'fn.test': {'value': {'arrAny': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrAny': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_16(self):
        request = [{'ok': {'value': {'arrAny': [False]}}}, {'fn.test': {'value': {'arrAny': [False]}}}]
        expected_response = [{}, {'ok': {'value': {'arrAny': [False]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_17(self):
        request = [{'ok': {'value': {'arrAny': [0]}}}, {'fn.test': {'value': {'arrAny': [0]}}}]
        expected_response = [{}, {'ok': {'value': {'arrAny': [0]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_18(self):
        request = [{'ok': {'value': {'arrAny': [0.1]}}}, {'fn.test': {'value': {'arrAny': [0.1]}}}]
        expected_response = [{}, {'ok': {'value': {'arrAny': [0.1]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_19(self):
        request = [{'ok': {'value': {'arrAny': ['']}}}, {'fn.test': {'value': {'arrAny': ['']}}}]
        expected_response = [{}, {'ok': {'value': {'arrAny': ['']}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_20(self):
        request = [{'ok': {'value': {'arrAny': [[]]}}}, {'fn.test': {'value': {'arrAny': [[]]}}}]
        expected_response = [{}, {'ok': {'value': {'arrAny': [[]]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_21(self):
        request = [{'ok': {'value': {'arrAny': [{}]}}}, {'fn.test': {'value': {'arrAny': [{}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrAny': [{}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_22(self):
        request = [{'ok': {'value': {'arrAny': [False, 0, 0.1, '', [], {}]}}}, {'fn.test': {'value': {'arrAny': [False, 0, 0.1, '', [], {}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrAny': [False, 0, 0.1, '', [], {}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_23(self):
        request = [{}, {'fn.test': {'value': {'arrAny': [False, None]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrAny[1]', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Any': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_24(self):
        request = [{'ok': {'value': {'arrAny': [False, None]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrAny[1]', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Any': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_25(self):
        request = [{'ok': {'value': {'arrNullAny': []}}}, {'fn.test': {'value': {'arrNullAny': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullAny': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_26(self):
        request = [{'ok': {'value': {'arrNullAny': [None]}}}, {'fn.test': {'value': {'arrNullAny': [None]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullAny': [None]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_27(self):
        request = [{'ok': {'value': {'arrNullAny': [False]}}}, {'fn.test': {'value': {'arrNullAny': [False]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullAny': [False]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_28(self):
        request = [{'ok': {'value': {'arrNullAny': [0]}}}, {'fn.test': {'value': {'arrNullAny': [0]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullAny': [0]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_29(self):
        request = [{'ok': {'value': {'arrNullAny': [0.1]}}}, {'fn.test': {'value': {'arrNullAny': [0.1]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullAny': [0.1]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_30(self):
        request = [{'ok': {'value': {'arrNullAny': ['']}}}, {'fn.test': {'value': {'arrNullAny': ['']}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullAny': ['']}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_31(self):
        request = [{'ok': {'value': {'arrNullAny': [[]]}}}, {'fn.test': {'value': {'arrNullAny': [[]]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullAny': [[]]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_32(self):
        request = [{'ok': {'value': {'arrNullAny': [{}]}}}, {'fn.test': {'value': {'arrNullAny': [{}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullAny': [{}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_33(self):
        request = [{'ok': {'value': {'arrNullAny': [None, False, 0, 0.1, '', [], {}]}}}, {'fn.test': {'value': {'arrNullAny': [None, False, 0, 0.1, '', [], {}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullAny': [None, False, 0, 0.1, '', [], {}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_34(self):
        request = [{'ok': {'value': {'objAny': {}}}}, {'fn.test': {'value': {'objAny': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objAny': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_35(self):
        request = [{'ok': {'value': {'objAny': {'a': False}}}}, {'fn.test': {'value': {'objAny': {'a': False}}}}]
        expected_response = [{}, {'ok': {'value': {'objAny': {'a': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_36(self):
        request = [{'ok': {'value': {'objAny': {'a': 0}}}}, {'fn.test': {'value': {'objAny': {'a': 0}}}}]
        expected_response = [{}, {'ok': {'value': {'objAny': {'a': 0}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_37(self):
        request = [{'ok': {'value': {'objAny': {'a': 0.1}}}}, {'fn.test': {'value': {'objAny': {'a': 0.1}}}}]
        expected_response = [{}, {'ok': {'value': {'objAny': {'a': 0.1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_38(self):
        request = [{'ok': {'value': {'objAny': {'a': ''}}}}, {'fn.test': {'value': {'objAny': {'a': ''}}}}]
        expected_response = [{}, {'ok': {'value': {'objAny': {'a': ''}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_39(self):
        request = [{'ok': {'value': {'objAny': {'a': []}}}}, {'fn.test': {'value': {'objAny': {'a': []}}}}]
        expected_response = [{}, {'ok': {'value': {'objAny': {'a': []}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_40(self):
        request = [{'ok': {'value': {'objAny': {'a': {}}}}}, {'fn.test': {'value': {'objAny': {'a': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'objAny': {'a': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_41(self):
        request = [{'ok': {'value': {'objAny': {'a': False, 'b': 0, 'c': 0.1, 'd': '', 'e': [], 'f': {}}}}}, {'fn.test': {'value': {'objAny': {'a': False, 'b': 0, 'c': 0.1, 'd': '', 'e': [], 'f': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'objAny': {'a': False, 'b': 0, 'c': 0.1, 'd': '', 'e': [], 'f': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_42(self):
        request = [{}, {'fn.test': {'value': {'objAny': {'a': False, 'b': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objAny{b}', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Any': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_43(self):
        request = [{'ok': {'value': {'objAny': {'a': False, 'b': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objAny{b}', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Any': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_44(self):
        request = [{'ok': {'value': {'objNullAny': {}}}}, {'fn.test': {'value': {'objNullAny': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullAny': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_45(self):
        request = [{'ok': {'value': {'objNullAny': {'a': None}}}}, {'fn.test': {'value': {'objNullAny': {'a': None}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullAny': {'a': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_46(self):
        request = [{'ok': {'value': {'objNullAny': {'a': False}}}}, {'fn.test': {'value': {'objNullAny': {'a': False}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullAny': {'a': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_47(self):
        request = [{'ok': {'value': {'objNullAny': {'a': 0}}}}, {'fn.test': {'value': {'objNullAny': {'a': 0}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullAny': {'a': 0}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_48(self):
        request = [{'ok': {'value': {'objNullAny': {'a': 0.1}}}}, {'fn.test': {'value': {'objNullAny': {'a': 0.1}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullAny': {'a': 0.1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_49(self):
        request = [{'ok': {'value': {'objNullAny': {'a': ''}}}}, {'fn.test': {'value': {'objNullAny': {'a': ''}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullAny': {'a': ''}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_50(self):
        request = [{'ok': {'value': {'objNullAny': {'a': []}}}}, {'fn.test': {'value': {'objNullAny': {'a': []}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullAny': {'a': []}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_51(self):
        request = [{'ok': {'value': {'objNullAny': {'a': {}}}}}, {'fn.test': {'value': {'objNullAny': {'a': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullAny': {'a': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_52(self):
        request = [{'ok': {'value': {'objNullAny': {'a': None, 'b': False, 'c': 0, 'd': 0.1, 'e': '', 'f': [], 'g': {}}}}}, {'fn.test': {'value': {'objNullAny': {'a': None, 'b': False, 'c': 0, 'd': 0.1, 'e': '', 'f': [], 'g': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullAny': {'a': None, 'b': False, 'c': 0, 'd': 0.1, 'e': '', 'f': [], 'g': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_53(self):
        request = [{'ok': {'value': {'pStrAny': {'wrap': False}}}}, {'fn.test': {'value': {'pStrAny': {'wrap': False}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrAny': {'wrap': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_54(self):
        request = [{'ok': {'value': {'pStrAny': {'wrap': 0}}}}, {'fn.test': {'value': {'pStrAny': {'wrap': 0}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrAny': {'wrap': 0}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_55(self):
        request = [{'ok': {'value': {'pStrAny': {'wrap': 0.1}}}}, {'fn.test': {'value': {'pStrAny': {'wrap': 0.1}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrAny': {'wrap': 0.1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_56(self):
        request = [{'ok': {'value': {'pStrAny': {'wrap': ''}}}}, {'fn.test': {'value': {'pStrAny': {'wrap': ''}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrAny': {'wrap': ''}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_57(self):
        request = [{'ok': {'value': {'pStrAny': {'wrap': []}}}}, {'fn.test': {'value': {'pStrAny': {'wrap': []}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrAny': {'wrap': []}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_58(self):
        request = [{'ok': {'value': {'pStrAny': {'wrap': {}}}}}, {'fn.test': {'value': {'pStrAny': {'wrap': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrAny': {'wrap': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_59(self):
        request = [{}, {'fn.test': {'value': {'pStrAny': {'wrap': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrAny.wrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Any': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_60(self):
        request = [{'ok': {'value': {'pStrAny': {'wrap': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrAny.wrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Any': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_61(self):
        request = [{'ok': {'value': {'pStrNullAny': {'wrap': None}}}}, {'fn.test': {'value': {'pStrNullAny': {'wrap': None}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullAny': {'wrap': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_62(self):
        request = [{'ok': {'value': {'pStrNullAny': {'wrap': False}}}}, {'fn.test': {'value': {'pStrNullAny': {'wrap': False}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullAny': {'wrap': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_63(self):
        request = [{'ok': {'value': {'pStrNullAny': {'wrap': 0}}}}, {'fn.test': {'value': {'pStrNullAny': {'wrap': 0}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullAny': {'wrap': 0}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_64(self):
        request = [{'ok': {'value': {'pStrNullAny': {'wrap': 0.1}}}}, {'fn.test': {'value': {'pStrNullAny': {'wrap': 0.1}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullAny': {'wrap': 0.1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_65(self):
        request = [{'ok': {'value': {'pStrNullAny': {'wrap': ''}}}}, {'fn.test': {'value': {'pStrNullAny': {'wrap': ''}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullAny': {'wrap': ''}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_66(self):
        request = [{'ok': {'value': {'pStrNullAny': {'wrap': []}}}}, {'fn.test': {'value': {'pStrNullAny': {'wrap': []}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullAny': {'wrap': []}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_67(self):
        request = [{'ok': {'value': {'pStrNullAny': {'wrap': {}}}}}, {'fn.test': {'value': {'pStrNullAny': {'wrap': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullAny': {'wrap': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_68(self):
        request = [{'ok': {'value': {'pEnumAny': {'one': {}}}}}, {'fn.test': {'value': {'pEnumAny': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumAny': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_69(self):
        request = [{'ok': {'value': {'pEnumAny': {'two': {'ewrap': False}}}}}, {'fn.test': {'value': {'pEnumAny': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumAny': {'two': {'ewrap': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_70(self):
        request = [{'ok': {'value': {'pEnumAny': {'two': {'ewrap': 0}}}}}, {'fn.test': {'value': {'pEnumAny': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumAny': {'two': {'ewrap': 0}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_71(self):
        request = [{'ok': {'value': {'pEnumAny': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {'value': {'pEnumAny': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumAny': {'two': {'ewrap': 0.1}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_72(self):
        request = [{'ok': {'value': {'pEnumAny': {'two': {'ewrap': ''}}}}}, {'fn.test': {'value': {'pEnumAny': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumAny': {'two': {'ewrap': ''}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_73(self):
        request = [{'ok': {'value': {'pEnumAny': {'two': {'ewrap': []}}}}}, {'fn.test': {'value': {'pEnumAny': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumAny': {'two': {'ewrap': []}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_74(self):
        request = [{'ok': {'value': {'pEnumAny': {'two': {'ewrap': {}}}}}}, {'fn.test': {'value': {'pEnumAny': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumAny': {'two': {'ewrap': {}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_75(self):
        request = [{}, {'fn.test': {'value': {'pEnumAny': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumAny.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Any': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_76(self):
        request = [{'ok': {'value': {'pEnumAny': {'two': {'ewrap': None}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumAny.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Any': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_77(self):
        request = [{'ok': {'value': {'pEnumNullAny': {'one': {}}}}}, {'fn.test': {'value': {'pEnumNullAny': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullAny': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_78(self):
        request = [{'ok': {'value': {'pEnumNullAny': {'two': {'ewrap': None}}}}}, {'fn.test': {'value': {'pEnumNullAny': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullAny': {'two': {'ewrap': None}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_79(self):
        request = [{'ok': {'value': {'pEnumNullAny': {'two': {'ewrap': False}}}}}, {'fn.test': {'value': {'pEnumNullAny': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullAny': {'two': {'ewrap': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_80(self):
        request = [{'ok': {'value': {'pEnumNullAny': {'two': {'ewrap': 0}}}}}, {'fn.test': {'value': {'pEnumNullAny': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullAny': {'two': {'ewrap': 0}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_81(self):
        request = [{'ok': {'value': {'pEnumNullAny': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {'value': {'pEnumNullAny': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullAny': {'two': {'ewrap': 0.1}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_82(self):
        request = [{'ok': {'value': {'pEnumNullAny': {'two': {'ewrap': ''}}}}}, {'fn.test': {'value': {'pEnumNullAny': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullAny': {'two': {'ewrap': ''}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_83(self):
        request = [{'ok': {'value': {'pEnumNullAny': {'two': {'ewrap': []}}}}}, {'fn.test': {'value': {'pEnumNullAny': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullAny': {'two': {'ewrap': []}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_any_84(self):
        request = [{'ok': {'value': {'pEnumNullAny': {'two': {'ewrap': {}}}}}}, {'fn.test': {'value': {'pEnumNullAny': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullAny': {'two': {'ewrap': {}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_0(self):
        request = [{'ok': {'value': {'struct': {'required': False}}}}, {'fn.test': {'value': {'struct': {'required': False}}}}]
        expected_response = [{}, {'ok': {'value': {'struct': {'required': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_1(self):
        request = [{'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {'value': {'struct': {'optional': False, 'required': False}}}}]
        expected_response = [{}, {'ok': {'value': {'struct': {'optional': False, 'required': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_2(self):
        request = [{}, {'fn.test': {'value': {'struct': {}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.struct.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_3(self):
        request = [{}, {'fn.test': {'value': {'struct': {'required': False, 'a': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.struct.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_4(self):
        request = [{}, {'fn.test': {'value': {'struct': None}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.struct', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_5(self):
        request = [{}, {'fn.test': {'value': {'struct': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.struct', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_6(self):
        request = [{}, {'fn.test': {'value': {'struct': 0}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.struct', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_7(self):
        request = [{}, {'fn.test': {'value': {'struct': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.struct', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_8(self):
        request = [{}, {'fn.test': {'value': {'struct': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.struct', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_9(self):
        request = [{}, {'fn.test': {'value': {'struct': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.struct', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_10(self):
        request = [{'ok': {'value': {'struct': {}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.struct.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_11(self):
        request = [{'ok': {'value': {'struct': {'required': False, 'a': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.struct.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_12(self):
        request = [{'ok': {'value': {'struct': None}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.struct', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_13(self):
        request = [{'ok': {'value': {'struct': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.struct', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_14(self):
        request = [{'ok': {'value': {'struct': 0}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.struct', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_15(self):
        request = [{'ok': {'value': {'struct': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.struct', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_16(self):
        request = [{'ok': {'value': {'struct': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.struct', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_17(self):
        request = [{'ok': {'value': {'struct': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.struct', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_18(self):
        request = [{'ok': {'value': {'nullStruct': None}}}, {'fn.test': {'value': {'nullStruct': None}}}]
        expected_response = [{}, {'ok': {'value': {'nullStruct': None}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_19(self):
        request = [{'ok': {'value': {'nullStruct': {'required': False}}}}, {'fn.test': {'value': {'nullStruct': {'required': False}}}}]
        expected_response = [{}, {'ok': {'value': {'nullStruct': {'required': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_20(self):
        request = [{'ok': {'value': {'nullStruct': {'optional': False, 'required': False}}}}, {'fn.test': {'value': {'nullStruct': {'optional': False, 'required': False}}}}]
        expected_response = [{}, {'ok': {'value': {'nullStruct': {'optional': False, 'required': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_21(self):
        request = [{}, {'fn.test': {'value': {'nullStruct': {}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullStruct.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_22(self):
        request = [{}, {'fn.test': {'value': {'nullStruct': {'required': False, 'a': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullStruct.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_23(self):
        request = [{}, {'fn.test': {'value': {'nullStruct': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullStruct', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_24(self):
        request = [{}, {'fn.test': {'value': {'nullStruct': 0}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullStruct', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_25(self):
        request = [{}, {'fn.test': {'value': {'nullStruct': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullStruct', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_26(self):
        request = [{}, {'fn.test': {'value': {'nullStruct': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullStruct', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_27(self):
        request = [{}, {'fn.test': {'value': {'nullStruct': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullStruct', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_28(self):
        request = [{'ok': {'value': {'nullStruct': {}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullStruct.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_29(self):
        request = [{'ok': {'value': {'nullStruct': {'required': False, 'a': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullStruct.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_30(self):
        request = [{'ok': {'value': {'nullStruct': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullStruct', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_31(self):
        request = [{'ok': {'value': {'nullStruct': 0}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullStruct', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_32(self):
        request = [{'ok': {'value': {'nullStruct': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullStruct', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_33(self):
        request = [{'ok': {'value': {'nullStruct': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullStruct', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_34(self):
        request = [{'ok': {'value': {'nullStruct': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullStruct', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_35(self):
        request = [{'ok': {'value': {'arrStruct': []}}}, {'fn.test': {'value': {'arrStruct': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrStruct': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_36(self):
        request = [{'ok': {'value': {'arrStruct': [{'required': False}]}}}, {'fn.test': {'value': {'arrStruct': [{'required': False}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrStruct': [{'required': False}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_37(self):
        request = [{'ok': {'value': {'arrStruct': [{'optional': False, 'required': False}]}}}, {'fn.test': {'value': {'arrStruct': [{'optional': False, 'required': False}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrStruct': [{'optional': False, 'required': False}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_38(self):
        request = [{'ok': {'value': {'arrStruct': [{'required': False}, {'optional': False, 'required': False}]}}}, {'fn.test': {'value': {'arrStruct': [{'required': False}, {'optional': False, 'required': False}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrStruct': [{'required': False}, {'optional': False, 'required': False}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_39(self):
        request = [{}, {'fn.test': {'value': {'arrStruct': [{'required': False}, {}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrStruct[1].required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_40(self):
        request = [{}, {'fn.test': {'value': {'arrStruct': [{'required': False}, {'required': False, 'a': False}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrStruct[1].a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_41(self):
        request = [{}, {'fn.test': {'value': {'arrStruct': [{'required': False}, None]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_42(self):
        request = [{}, {'fn.test': {'value': {'arrStruct': [{'required': False}, False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_43(self):
        request = [{}, {'fn.test': {'value': {'arrStruct': [{'required': False}, 0]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_44(self):
        request = [{}, {'fn.test': {'value': {'arrStruct': [{'required': False}, 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_45(self):
        request = [{}, {'fn.test': {'value': {'arrStruct': [{'required': False}, '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_46(self):
        request = [{}, {'fn.test': {'value': {'arrStruct': [{'required': False}, []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_47(self):
        request = [{'ok': {'value': {'arrStruct': [{'required': False}, {}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrStruct[1].required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_48(self):
        request = [{'ok': {'value': {'arrStruct': [{'required': False}, {'required': False, 'a': False}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrStruct[1].a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_49(self):
        request = [{'ok': {'value': {'arrStruct': [{'required': False}, None]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_50(self):
        request = [{'ok': {'value': {'arrStruct': [{'required': False}, False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_51(self):
        request = [{'ok': {'value': {'arrStruct': [{'required': False}, 0]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_52(self):
        request = [{'ok': {'value': {'arrStruct': [{'required': False}, 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_53(self):
        request = [{'ok': {'value': {'arrStruct': [{'required': False}, '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_54(self):
        request = [{'ok': {'value': {'arrStruct': [{'required': False}, []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_55(self):
        request = [{'ok': {'value': {'arrNullStruct': []}}}, {'fn.test': {'value': {'arrNullStruct': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullStruct': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_56(self):
        request = [{'ok': {'value': {'arrNullStruct': [None]}}}, {'fn.test': {'value': {'arrNullStruct': [None]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullStruct': [None]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_57(self):
        request = [{'ok': {'value': {'arrNullStruct': [{'required': False}]}}}, {'fn.test': {'value': {'arrNullStruct': [{'required': False}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullStruct': [{'required': False}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_58(self):
        request = [{'ok': {'value': {'arrNullStruct': [{'optional': False, 'required': False}]}}}, {'fn.test': {'value': {'arrNullStruct': [{'optional': False, 'required': False}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullStruct': [{'optional': False, 'required': False}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_59(self):
        request = [{'ok': {'value': {'arrNullStruct': [None, {'required': False}, {'optional': False, 'required': False}]}}}, {'fn.test': {'value': {'arrNullStruct': [None, {'required': False}, {'optional': False, 'required': False}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullStruct': [None, {'required': False}, {'optional': False, 'required': False}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_60(self):
        request = [{}, {'fn.test': {'value': {'arrNullStruct': [{'required': False}, {}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullStruct[1].required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_61(self):
        request = [{}, {'fn.test': {'value': {'arrNullStruct': [{'required': False}, {'required': False, 'a': False}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullStruct[1].a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_62(self):
        request = [{}, {'fn.test': {'value': {'arrNullStruct': [{'required': False}, False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_63(self):
        request = [{}, {'fn.test': {'value': {'arrNullStruct': [{'required': False}, 0]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_64(self):
        request = [{}, {'fn.test': {'value': {'arrNullStruct': [{'required': False}, 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_65(self):
        request = [{}, {'fn.test': {'value': {'arrNullStruct': [{'required': False}, '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_66(self):
        request = [{}, {'fn.test': {'value': {'arrNullStruct': [{'required': False}, []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_67(self):
        request = [{'ok': {'value': {'arrNullStruct': [{'required': False}, {}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullStruct[1].required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_68(self):
        request = [{'ok': {'value': {'arrNullStruct': [{'required': False}, {'required': False, 'a': False}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullStruct[1].a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_69(self):
        request = [{'ok': {'value': {'arrNullStruct': [{'required': False}, False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_70(self):
        request = [{'ok': {'value': {'arrNullStruct': [{'required': False}, 0]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_71(self):
        request = [{'ok': {'value': {'arrNullStruct': [{'required': False}, 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_72(self):
        request = [{'ok': {'value': {'arrNullStruct': [{'required': False}, '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_73(self):
        request = [{'ok': {'value': {'arrNullStruct': [{'required': False}, []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_74(self):
        request = [{'ok': {'value': {'objStruct': {}}}}, {'fn.test': {'value': {'objStruct': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objStruct': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_75(self):
        request = [{'ok': {'value': {'objStruct': {'a': {'required': False}}}}}, {'fn.test': {'value': {'objStruct': {'a': {'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'objStruct': {'a': {'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_76(self):
        request = [{'ok': {'value': {'objStruct': {'a': {'optional': False, 'required': False}}}}}, {'fn.test': {'value': {'objStruct': {'a': {'optional': False, 'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'objStruct': {'a': {'optional': False, 'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_77(self):
        request = [{'ok': {'value': {'objStruct': {'a': {'required': False}, 'b': {'optional': False, 'required': False}}}}}, {'fn.test': {'value': {'objStruct': {'a': {'required': False}, 'b': {'optional': False, 'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'objStruct': {'a': {'required': False}, 'b': {'optional': False, 'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_78(self):
        request = [{}, {'fn.test': {'value': {'objStruct': {'a': {'required': False}, 'b': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objStruct{b}.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_79(self):
        request = [{}, {'fn.test': {'value': {'objStruct': {'a': {'required': False}, 'b': {'required': False, 'a': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objStruct{b}.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_80(self):
        request = [{}, {'fn.test': {'value': {'objStruct': {'a': {'required': False}, 'b': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_81(self):
        request = [{}, {'fn.test': {'value': {'objStruct': {'a': {'required': False}, 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_82(self):
        request = [{}, {'fn.test': {'value': {'objStruct': {'a': {'required': False}, 'b': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_83(self):
        request = [{}, {'fn.test': {'value': {'objStruct': {'a': {'required': False}, 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_84(self):
        request = [{}, {'fn.test': {'value': {'objStruct': {'a': {'required': False}, 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_85(self):
        request = [{}, {'fn.test': {'value': {'objStruct': {'a': {'required': False}, 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_86(self):
        request = [{'ok': {'value': {'objStruct': {'a': {'required': False}, 'b': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objStruct{b}.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_87(self):
        request = [{'ok': {'value': {'objStruct': {'a': {'required': False}, 'b': {'required': False, 'a': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objStruct{b}.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_88(self):
        request = [{'ok': {'value': {'objStruct': {'a': {'required': False}, 'b': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_89(self):
        request = [{'ok': {'value': {'objStruct': {'a': {'required': False}, 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_90(self):
        request = [{'ok': {'value': {'objStruct': {'a': {'required': False}, 'b': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_91(self):
        request = [{'ok': {'value': {'objStruct': {'a': {'required': False}, 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_92(self):
        request = [{'ok': {'value': {'objStruct': {'a': {'required': False}, 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_93(self):
        request = [{'ok': {'value': {'objStruct': {'a': {'required': False}, 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_94(self):
        request = [{'ok': {'value': {'objNullStruct': {}}}}, {'fn.test': {'value': {'objNullStruct': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullStruct': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_95(self):
        request = [{'ok': {'value': {'objNullStruct': {'a': None}}}}, {'fn.test': {'value': {'objNullStruct': {'a': None}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullStruct': {'a': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_96(self):
        request = [{'ok': {'value': {'objNullStruct': {'a': {'required': False}}}}}, {'fn.test': {'value': {'objNullStruct': {'a': {'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullStruct': {'a': {'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_97(self):
        request = [{'ok': {'value': {'objNullStruct': {'a': {'optional': False, 'required': False}}}}}, {'fn.test': {'value': {'objNullStruct': {'a': {'optional': False, 'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullStruct': {'a': {'optional': False, 'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_98(self):
        request = [{'ok': {'value': {'objNullStruct': {'a': None, 'b': {'required': False}, 'c': {'optional': False, 'required': False}}}}}, {'fn.test': {'value': {'objNullStruct': {'a': None, 'b': {'required': False}, 'c': {'optional': False, 'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullStruct': {'a': None, 'b': {'required': False}, 'c': {'optional': False, 'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_99(self):
        request = [{}, {'fn.test': {'value': {'objNullStruct': {'a': {'required': False}, 'b': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullStruct{b}.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_100(self):
        request = [{}, {'fn.test': {'value': {'objNullStruct': {'a': {'required': False}, 'b': {'required': False, 'a': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullStruct{b}.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_101(self):
        request = [{}, {'fn.test': {'value': {'objNullStruct': {'a': {'required': False}, 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_102(self):
        request = [{}, {'fn.test': {'value': {'objNullStruct': {'a': {'required': False}, 'b': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_103(self):
        request = [{}, {'fn.test': {'value': {'objNullStruct': {'a': {'required': False}, 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_104(self):
        request = [{}, {'fn.test': {'value': {'objNullStruct': {'a': {'required': False}, 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_105(self):
        request = [{}, {'fn.test': {'value': {'objNullStruct': {'a': {'required': False}, 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_106(self):
        request = [{'ok': {'value': {'objNullStruct': {'a': {'required': False}, 'b': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullStruct{b}.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_107(self):
        request = [{'ok': {'value': {'objNullStruct': {'a': {'required': False}, 'b': {'required': False, 'a': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullStruct{b}.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_108(self):
        request = [{'ok': {'value': {'objNullStruct': {'a': {'required': False}, 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_109(self):
        request = [{'ok': {'value': {'objNullStruct': {'a': {'required': False}, 'b': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_110(self):
        request = [{'ok': {'value': {'objNullStruct': {'a': {'required': False}, 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_111(self):
        request = [{'ok': {'value': {'objNullStruct': {'a': {'required': False}, 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_112(self):
        request = [{'ok': {'value': {'objNullStruct': {'a': {'required': False}, 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_113(self):
        request = [{'ok': {'value': {'pStrStruct': {'wrap': {'required': False}}}}}, {'fn.test': {'value': {'pStrStruct': {'wrap': {'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrStruct': {'wrap': {'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_114(self):
        request = [{'ok': {'value': {'pStrStruct': {'wrap': {'optional': False, 'required': False}}}}}, {'fn.test': {'value': {'pStrStruct': {'wrap': {'optional': False, 'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrStruct': {'wrap': {'optional': False, 'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_115(self):
        request = [{}, {'fn.test': {'value': {'pStrStruct': {'wrap': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrStruct.wrap.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_116(self):
        request = [{}, {'fn.test': {'value': {'pStrStruct': {'wrap': {'required': False, 'a': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrStruct.wrap.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_117(self):
        request = [{}, {'fn.test': {'value': {'pStrStruct': {'wrap': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_118(self):
        request = [{}, {'fn.test': {'value': {'pStrStruct': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_119(self):
        request = [{}, {'fn.test': {'value': {'pStrStruct': {'wrap': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_120(self):
        request = [{}, {'fn.test': {'value': {'pStrStruct': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_121(self):
        request = [{}, {'fn.test': {'value': {'pStrStruct': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_122(self):
        request = [{}, {'fn.test': {'value': {'pStrStruct': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_123(self):
        request = [{'ok': {'value': {'pStrStruct': {'wrap': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrStruct.wrap.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_124(self):
        request = [{'ok': {'value': {'pStrStruct': {'wrap': {'required': False, 'a': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrStruct.wrap.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_125(self):
        request = [{'ok': {'value': {'pStrStruct': {'wrap': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_126(self):
        request = [{'ok': {'value': {'pStrStruct': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_127(self):
        request = [{'ok': {'value': {'pStrStruct': {'wrap': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_128(self):
        request = [{'ok': {'value': {'pStrStruct': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_129(self):
        request = [{'ok': {'value': {'pStrStruct': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_130(self):
        request = [{'ok': {'value': {'pStrStruct': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_131(self):
        request = [{'ok': {'value': {'pStrNullStruct': {'wrap': None}}}}, {'fn.test': {'value': {'pStrNullStruct': {'wrap': None}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullStruct': {'wrap': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_132(self):
        request = [{'ok': {'value': {'pStrNullStruct': {'wrap': {'required': False}}}}}, {'fn.test': {'value': {'pStrNullStruct': {'wrap': {'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullStruct': {'wrap': {'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_133(self):
        request = [{'ok': {'value': {'pStrNullStruct': {'wrap': {'optional': False, 'required': False}}}}}, {'fn.test': {'value': {'pStrNullStruct': {'wrap': {'optional': False, 'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullStruct': {'wrap': {'optional': False, 'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_134(self):
        request = [{}, {'fn.test': {'value': {'pStrNullStruct': {'wrap': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullStruct.wrap.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_135(self):
        request = [{}, {'fn.test': {'value': {'pStrNullStruct': {'wrap': {'required': False, 'a': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullStruct.wrap.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_136(self):
        request = [{}, {'fn.test': {'value': {'pStrNullStruct': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_137(self):
        request = [{}, {'fn.test': {'value': {'pStrNullStruct': {'wrap': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_138(self):
        request = [{}, {'fn.test': {'value': {'pStrNullStruct': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_139(self):
        request = [{}, {'fn.test': {'value': {'pStrNullStruct': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_140(self):
        request = [{}, {'fn.test': {'value': {'pStrNullStruct': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_141(self):
        request = [{'ok': {'value': {'pStrNullStruct': {'wrap': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullStruct.wrap.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_142(self):
        request = [{'ok': {'value': {'pStrNullStruct': {'wrap': {'required': False, 'a': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullStruct.wrap.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_143(self):
        request = [{'ok': {'value': {'pStrNullStruct': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_144(self):
        request = [{'ok': {'value': {'pStrNullStruct': {'wrap': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_145(self):
        request = [{'ok': {'value': {'pStrNullStruct': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_146(self):
        request = [{'ok': {'value': {'pStrNullStruct': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_147(self):
        request = [{'ok': {'value': {'pStrNullStruct': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_148(self):
        request = [{'ok': {'value': {'pEnumStruct': {'one': {}}}}}, {'fn.test': {'value': {'pEnumStruct': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumStruct': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_149(self):
        request = [{'ok': {'value': {'pEnumStruct': {'two': {'ewrap': {'required': False}}}}}}, {'fn.test': {'value': {'pEnumStruct': {'two': {'ewrap': {'required': False}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumStruct': {'two': {'ewrap': {'required': False}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_150(self):
        request = [{'ok': {'value': {'pEnumStruct': {'two': {'ewrap': {'optional': False, 'required': False}}}}}}, {'fn.test': {'value': {'pEnumStruct': {'two': {'ewrap': {'optional': False, 'required': False}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumStruct': {'two': {'ewrap': {'optional': False, 'required': False}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_151(self):
        request = [{}, {'fn.test': {'value': {'pEnumStruct': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumStruct.two.ewrap.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_152(self):
        request = [{}, {'fn.test': {'value': {'pEnumStruct': {'two': {'ewrap': {'required': False, 'a': False}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumStruct.two.ewrap.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_153(self):
        request = [{}, {'fn.test': {'value': {'pEnumStruct': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_154(self):
        request = [{}, {'fn.test': {'value': {'pEnumStruct': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_155(self):
        request = [{}, {'fn.test': {'value': {'pEnumStruct': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_156(self):
        request = [{}, {'fn.test': {'value': {'pEnumStruct': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_157(self):
        request = [{}, {'fn.test': {'value': {'pEnumStruct': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_158(self):
        request = [{}, {'fn.test': {'value': {'pEnumStruct': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_159(self):
        request = [{'ok': {'value': {'pEnumStruct': {'two': {'ewrap': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumStruct.two.ewrap.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_160(self):
        request = [{'ok': {'value': {'pEnumStruct': {'two': {'ewrap': {'required': False, 'a': False}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumStruct.two.ewrap.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_161(self):
        request = [{'ok': {'value': {'pEnumStruct': {'two': {'ewrap': None}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_162(self):
        request = [{'ok': {'value': {'pEnumStruct': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_163(self):
        request = [{'ok': {'value': {'pEnumStruct': {'two': {'ewrap': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_164(self):
        request = [{'ok': {'value': {'pEnumStruct': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_165(self):
        request = [{'ok': {'value': {'pEnumStruct': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_166(self):
        request = [{'ok': {'value': {'pEnumStruct': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_167(self):
        request = [{'ok': {'value': {'pEnumNullStruct': {'one': {}}}}}, {'fn.test': {'value': {'pEnumNullStruct': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullStruct': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_168(self):
        request = [{'ok': {'value': {'pEnumNullStruct': {'two': {'ewrap': None}}}}}, {'fn.test': {'value': {'pEnumNullStruct': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullStruct': {'two': {'ewrap': None}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_169(self):
        request = [{'ok': {'value': {'pEnumNullStruct': {'two': {'ewrap': {'required': False}}}}}}, {'fn.test': {'value': {'pEnumNullStruct': {'two': {'ewrap': {'required': False}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullStruct': {'two': {'ewrap': {'required': False}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_170(self):
        request = [{'ok': {'value': {'pEnumNullStruct': {'two': {'ewrap': {'optional': False, 'required': False}}}}}}, {'fn.test': {'value': {'pEnumNullStruct': {'two': {'ewrap': {'optional': False, 'required': False}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullStruct': {'two': {'ewrap': {'optional': False, 'required': False}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_171(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullStruct': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullStruct.two.ewrap.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_172(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullStruct': {'two': {'ewrap': {'required': False, 'a': False}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullStruct.two.ewrap.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_173(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullStruct': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_174(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullStruct': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_175(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullStruct': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_176(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullStruct': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_177(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullStruct': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_178(self):
        request = [{'ok': {'value': {'pEnumNullStruct': {'two': {'ewrap': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullStruct.two.ewrap.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_179(self):
        request = [{'ok': {'value': {'pEnumNullStruct': {'two': {'ewrap': {'required': False, 'a': False}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullStruct.two.ewrap.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_180(self):
        request = [{'ok': {'value': {'pEnumNullStruct': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_181(self):
        request = [{'ok': {'value': {'pEnumNullStruct': {'two': {'ewrap': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_182(self):
        request = [{'ok': {'value': {'pEnumNullStruct': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_183(self):
        request = [{'ok': {'value': {'pEnumNullStruct': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_struct_184(self):
        request = [{'ok': {'value': {'pEnumNullStruct': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_0(self):
        request = [{'ok': {'value': {'enum': {'one': {}}}}}, {'fn.test': {'value': {'enum': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'enum': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_1(self):
        request = [{'ok': {'value': {'enum': {'two': {'required': False}}}}}, {'fn.test': {'value': {'enum': {'two': {'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'enum': {'two': {'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_2(self):
        request = [{'ok': {'value': {'enum': {'two': {'optional': False, 'required': False}}}}}, {'fn.test': {'value': {'enum': {'two': {'optional': False, 'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'enum': {'two': {'optional': False, 'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_3(self):
        request = [{}, {'fn.test': {'value': {'enum': {}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.enum', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_4(self):
        request = [{}, {'fn.test': {'value': {'enum': {'one': {}, 'two': {'optional': False, 'required': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.enum', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_5(self):
        request = [{}, {'fn.test': {'value': {'enum': {'a': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.enum.a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_6(self):
        request = [{}, {'fn.test': {'value': {'enum': {'two': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.enum.two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_7(self):
        request = [{}, {'fn.test': {'value': {'enum': {'one': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.enum.one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_8(self):
        request = [{}, {'fn.test': {'value': {'enum': {'one': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.enum.one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_9(self):
        request = [{}, {'fn.test': {'value': {'enum': {'one': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.enum.one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_10(self):
        request = [{}, {'fn.test': {'value': {'enum': {'one': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.enum.one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_11(self):
        request = [{}, {'fn.test': {'value': {'enum': {'one': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.enum.one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_12(self):
        request = [{}, {'fn.test': {'value': {'enum': None}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.enum', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_13(self):
        request = [{}, {'fn.test': {'value': {'enum': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.enum', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_14(self):
        request = [{}, {'fn.test': {'value': {'enum': 0}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.enum', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_15(self):
        request = [{}, {'fn.test': {'value': {'enum': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.enum', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_16(self):
        request = [{}, {'fn.test': {'value': {'enum': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.enum', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_17(self):
        request = [{}, {'fn.test': {'value': {'enum': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.enum', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_18(self):
        request = [{'ok': {'value': {'enum': {}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.enum', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_19(self):
        request = [{'ok': {'value': {'enum': {'one': {}, 'two': {'optional': False, 'required': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.enum', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_20(self):
        request = [{'ok': {'value': {'enum': {'a': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.enum.a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_21(self):
        request = [{'ok': {'value': {'enum': {'two': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.enum.two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_22(self):
        request = [{'ok': {'value': {'enum': {'one': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.enum.one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_23(self):
        request = [{'ok': {'value': {'enum': {'one': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.enum.one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_24(self):
        request = [{'ok': {'value': {'enum': {'one': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.enum.one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_25(self):
        request = [{'ok': {'value': {'enum': {'one': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.enum.one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_26(self):
        request = [{'ok': {'value': {'enum': {'one': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.enum.one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_27(self):
        request = [{'ok': {'value': {'enum': None}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.enum', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_28(self):
        request = [{'ok': {'value': {'enum': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.enum', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_29(self):
        request = [{'ok': {'value': {'enum': 0}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.enum', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_30(self):
        request = [{'ok': {'value': {'enum': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.enum', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_31(self):
        request = [{'ok': {'value': {'enum': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.enum', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_32(self):
        request = [{'ok': {'value': {'enum': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.enum', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_33(self):
        request = [{'ok': {'value': {'nullEnum': None}}}, {'fn.test': {'value': {'nullEnum': None}}}]
        expected_response = [{}, {'ok': {'value': {'nullEnum': None}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_34(self):
        request = [{'ok': {'value': {'nullEnum': {'one': {}}}}}, {'fn.test': {'value': {'nullEnum': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'nullEnum': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_35(self):
        request = [{'ok': {'value': {'nullEnum': {'two': {'required': False}}}}}, {'fn.test': {'value': {'nullEnum': {'two': {'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'nullEnum': {'two': {'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_36(self):
        request = [{'ok': {'value': {'nullEnum': {'two': {'optional': False, 'required': False}}}}}, {'fn.test': {'value': {'nullEnum': {'two': {'optional': False, 'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'nullEnum': {'two': {'optional': False, 'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_37(self):
        request = [{}, {'fn.test': {'value': {'nullEnum': {}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullEnum', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_38(self):
        request = [{}, {'fn.test': {'value': {'nullEnum': {'one': {}, 'two': {'optional': False, 'required': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullEnum', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_39(self):
        request = [{}, {'fn.test': {'value': {'nullEnum': {'a': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullEnum.a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_40(self):
        request = [{}, {'fn.test': {'value': {'nullEnum': {'two': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullEnum.two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_41(self):
        request = [{}, {'fn.test': {'value': {'nullEnum': {'one': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullEnum.one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_42(self):
        request = [{}, {'fn.test': {'value': {'nullEnum': {'one': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullEnum.one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_43(self):
        request = [{}, {'fn.test': {'value': {'nullEnum': {'one': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullEnum.one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_44(self):
        request = [{}, {'fn.test': {'value': {'nullEnum': {'one': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullEnum.one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_45(self):
        request = [{}, {'fn.test': {'value': {'nullEnum': {'one': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullEnum.one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_46(self):
        request = [{}, {'fn.test': {'value': {'nullEnum': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullEnum', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_47(self):
        request = [{}, {'fn.test': {'value': {'nullEnum': 0}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullEnum', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_48(self):
        request = [{}, {'fn.test': {'value': {'nullEnum': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullEnum', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_49(self):
        request = [{}, {'fn.test': {'value': {'nullEnum': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullEnum', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_50(self):
        request = [{}, {'fn.test': {'value': {'nullEnum': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullEnum', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_51(self):
        request = [{'ok': {'value': {'nullEnum': {}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullEnum', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_52(self):
        request = [{'ok': {'value': {'nullEnum': {'one': {}, 'two': {'optional': False, 'required': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullEnum', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_53(self):
        request = [{'ok': {'value': {'nullEnum': {'a': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullEnum.a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_54(self):
        request = [{'ok': {'value': {'nullEnum': {'two': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullEnum.two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_55(self):
        request = [{'ok': {'value': {'nullEnum': {'one': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullEnum.one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_56(self):
        request = [{'ok': {'value': {'nullEnum': {'one': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullEnum.one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_57(self):
        request = [{'ok': {'value': {'nullEnum': {'one': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullEnum.one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_58(self):
        request = [{'ok': {'value': {'nullEnum': {'one': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullEnum.one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_59(self):
        request = [{'ok': {'value': {'nullEnum': {'one': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullEnum.one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_60(self):
        request = [{'ok': {'value': {'nullEnum': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullEnum', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_61(self):
        request = [{'ok': {'value': {'nullEnum': 0}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullEnum', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_62(self):
        request = [{'ok': {'value': {'nullEnum': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullEnum', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_63(self):
        request = [{'ok': {'value': {'nullEnum': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullEnum', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_64(self):
        request = [{'ok': {'value': {'nullEnum': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullEnum', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_65(self):
        request = [{'ok': {'value': {'arrEnum': []}}}, {'fn.test': {'value': {'arrEnum': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrEnum': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_66(self):
        request = [{'ok': {'value': {'arrEnum': [{'one': {}}]}}}, {'fn.test': {'value': {'arrEnum': [{'one': {}}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrEnum': [{'one': {}}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_67(self):
        request = [{'ok': {'value': {'arrEnum': [{'two': {'required': False}}]}}}, {'fn.test': {'value': {'arrEnum': [{'two': {'required': False}}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrEnum': [{'two': {'required': False}}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_68(self):
        request = [{'ok': {'value': {'arrEnum': [{'two': {'optional': False, 'required': False}}]}}}, {'fn.test': {'value': {'arrEnum': [{'two': {'optional': False, 'required': False}}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrEnum': [{'two': {'optional': False, 'required': False}}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_69(self):
        request = [{'ok': {'value': {'arrEnum': [{'one': {}}, {'two': {'required': False}}, {'two': {'optional': False, 'required': False}}]}}}, {'fn.test': {'value': {'arrEnum': [{'one': {}}, {'two': {'required': False}}, {'two': {'optional': False, 'required': False}}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrEnum': [{'one': {}}, {'two': {'required': False}}, {'two': {'optional': False, 'required': False}}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_70(self):
        request = [{}, {'fn.test': {'value': {'arrEnum': [{'one': {}}, {}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrEnum[1]', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_71(self):
        request = [{}, {'fn.test': {'value': {'arrEnum': [{'one': {}}, {'one': {}, 'two': {'optional': False, 'required': False}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrEnum[1]', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_72(self):
        request = [{}, {'fn.test': {'value': {'arrEnum': [{'one': {}}, {'a': {}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrEnum[1].a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_73(self):
        request = [{}, {'fn.test': {'value': {'arrEnum': [{'one': {}}, {'two': {}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrEnum[1].two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_74(self):
        request = [{}, {'fn.test': {'value': {'arrEnum': [{'one': {}}, {'one': False}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_75(self):
        request = [{}, {'fn.test': {'value': {'arrEnum': [{'one': {}}, {'one': 0}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_76(self):
        request = [{}, {'fn.test': {'value': {'arrEnum': [{'one': {}}, {'one': 0.1}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_77(self):
        request = [{}, {'fn.test': {'value': {'arrEnum': [{'one': {}}, {'one': ''}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_78(self):
        request = [{}, {'fn.test': {'value': {'arrEnum': [{'one': {}}, {'one': []}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_79(self):
        request = [{}, {'fn.test': {'value': {'arrEnum': [{'one': {}}, None]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_80(self):
        request = [{}, {'fn.test': {'value': {'arrEnum': [{'one': {}}, False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_81(self):
        request = [{}, {'fn.test': {'value': {'arrEnum': [{'one': {}}, 0]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_82(self):
        request = [{}, {'fn.test': {'value': {'arrEnum': [{'one': {}}, 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_83(self):
        request = [{}, {'fn.test': {'value': {'arrEnum': [{'one': {}}, '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_84(self):
        request = [{}, {'fn.test': {'value': {'arrEnum': [{'one': {}}, []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_85(self):
        request = [{'ok': {'value': {'arrEnum': [{'one': {}}, {}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrEnum[1]', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_86(self):
        request = [{'ok': {'value': {'arrEnum': [{'one': {}}, {'one': {}, 'two': {'optional': False, 'required': False}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrEnum[1]', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_87(self):
        request = [{'ok': {'value': {'arrEnum': [{'one': {}}, {'a': {}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrEnum[1].a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_88(self):
        request = [{'ok': {'value': {'arrEnum': [{'one': {}}, {'two': {}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrEnum[1].two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_89(self):
        request = [{'ok': {'value': {'arrEnum': [{'one': {}}, {'one': False}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_90(self):
        request = [{'ok': {'value': {'arrEnum': [{'one': {}}, {'one': 0}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_91(self):
        request = [{'ok': {'value': {'arrEnum': [{'one': {}}, {'one': 0.1}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_92(self):
        request = [{'ok': {'value': {'arrEnum': [{'one': {}}, {'one': ''}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_93(self):
        request = [{'ok': {'value': {'arrEnum': [{'one': {}}, {'one': []}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_94(self):
        request = [{'ok': {'value': {'arrEnum': [{'one': {}}, None]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_95(self):
        request = [{'ok': {'value': {'arrEnum': [{'one': {}}, False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_96(self):
        request = [{'ok': {'value': {'arrEnum': [{'one': {}}, 0]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_97(self):
        request = [{'ok': {'value': {'arrEnum': [{'one': {}}, 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_98(self):
        request = [{'ok': {'value': {'arrEnum': [{'one': {}}, '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_99(self):
        request = [{'ok': {'value': {'arrEnum': [{'one': {}}, []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_100(self):
        request = [{'ok': {'value': {'arrNullEnum': []}}}, {'fn.test': {'value': {'arrNullEnum': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullEnum': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_101(self):
        request = [{'ok': {'value': {'arrNullEnum': [None]}}}, {'fn.test': {'value': {'arrNullEnum': [None]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullEnum': [None]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_102(self):
        request = [{'ok': {'value': {'arrNullEnum': [{'one': {}}]}}}, {'fn.test': {'value': {'arrNullEnum': [{'one': {}}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullEnum': [{'one': {}}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_103(self):
        request = [{'ok': {'value': {'arrNullEnum': [{'two': {'required': False}}]}}}, {'fn.test': {'value': {'arrNullEnum': [{'two': {'required': False}}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullEnum': [{'two': {'required': False}}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_104(self):
        request = [{'ok': {'value': {'arrNullEnum': [{'two': {'optional': False, 'required': False}}]}}}, {'fn.test': {'value': {'arrNullEnum': [{'two': {'optional': False, 'required': False}}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullEnum': [{'two': {'optional': False, 'required': False}}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_105(self):
        request = [{'ok': {'value': {'arrNullEnum': [None, {'one': {}}, {'two': {'required': False}}, {'two': {'optional': False, 'required': False}}]}}}, {'fn.test': {'value': {'arrNullEnum': [None, {'one': {}}, {'two': {'required': False}}, {'two': {'optional': False, 'required': False}}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullEnum': [None, {'one': {}}, {'two': {'required': False}}, {'two': {'optional': False, 'required': False}}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_106(self):
        request = [{}, {'fn.test': {'value': {'arrNullEnum': [{'one': {}}, {}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullEnum[1]', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_107(self):
        request = [{}, {'fn.test': {'value': {'arrNullEnum': [{'one': {}}, {'one': {}, 'two': {'optional': False, 'required': False}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullEnum[1]', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_108(self):
        request = [{}, {'fn.test': {'value': {'arrNullEnum': [{'one': {}}, {'a': {}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullEnum[1].a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_109(self):
        request = [{}, {'fn.test': {'value': {'arrNullEnum': [{'one': {}}, {'two': {}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullEnum[1].two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_110(self):
        request = [{}, {'fn.test': {'value': {'arrNullEnum': [{'one': {}}, {'one': False}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_111(self):
        request = [{}, {'fn.test': {'value': {'arrNullEnum': [{'one': {}}, {'one': 0}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_112(self):
        request = [{}, {'fn.test': {'value': {'arrNullEnum': [{'one': {}}, {'one': 0.1}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_113(self):
        request = [{}, {'fn.test': {'value': {'arrNullEnum': [{'one': {}}, {'one': ''}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_114(self):
        request = [{}, {'fn.test': {'value': {'arrNullEnum': [{'one': {}}, {'one': []}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_115(self):
        request = [{}, {'fn.test': {'value': {'arrNullEnum': [{'one': {}}, False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_116(self):
        request = [{}, {'fn.test': {'value': {'arrNullEnum': [{'one': {}}, 0]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_117(self):
        request = [{}, {'fn.test': {'value': {'arrNullEnum': [{'one': {}}, 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_118(self):
        request = [{}, {'fn.test': {'value': {'arrNullEnum': [{'one': {}}, '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_119(self):
        request = [{}, {'fn.test': {'value': {'arrNullEnum': [{'one': {}}, []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_120(self):
        request = [{'ok': {'value': {'arrNullEnum': [{'one': {}}, {}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullEnum[1]', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_121(self):
        request = [{'ok': {'value': {'arrNullEnum': [{'one': {}}, {'one': {}, 'two': {'optional': False, 'required': False}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullEnum[1]', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_122(self):
        request = [{'ok': {'value': {'arrNullEnum': [{'one': {}}, {'a': {}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullEnum[1].a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_123(self):
        request = [{'ok': {'value': {'arrNullEnum': [{'one': {}}, {'two': {}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullEnum[1].two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_124(self):
        request = [{'ok': {'value': {'arrNullEnum': [{'one': {}}, {'one': False}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_125(self):
        request = [{'ok': {'value': {'arrNullEnum': [{'one': {}}, {'one': 0}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_126(self):
        request = [{'ok': {'value': {'arrNullEnum': [{'one': {}}, {'one': 0.1}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_127(self):
        request = [{'ok': {'value': {'arrNullEnum': [{'one': {}}, {'one': ''}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_128(self):
        request = [{'ok': {'value': {'arrNullEnum': [{'one': {}}, {'one': []}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_129(self):
        request = [{'ok': {'value': {'arrNullEnum': [{'one': {}}, False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_130(self):
        request = [{'ok': {'value': {'arrNullEnum': [{'one': {}}, 0]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_131(self):
        request = [{'ok': {'value': {'arrNullEnum': [{'one': {}}, 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_132(self):
        request = [{'ok': {'value': {'arrNullEnum': [{'one': {}}, '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_133(self):
        request = [{'ok': {'value': {'arrNullEnum': [{'one': {}}, []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_134(self):
        request = [{'ok': {'value': {'objEnum': {}}}}, {'fn.test': {'value': {'objEnum': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objEnum': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_135(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'one': {}}}}}}, {'fn.test': {'value': {'objEnum': {'a': {'one': {}}}}}}]
        expected_response = [{}, {'ok': {'value': {'objEnum': {'a': {'one': {}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_136(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'two': {'required': False}}}}}}, {'fn.test': {'value': {'objEnum': {'a': {'two': {'required': False}}}}}}]
        expected_response = [{}, {'ok': {'value': {'objEnum': {'a': {'two': {'required': False}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_137(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'two': {'optional': False, 'required': False}}}}}}, {'fn.test': {'value': {'objEnum': {'a': {'two': {'optional': False, 'required': False}}}}}}]
        expected_response = [{}, {'ok': {'value': {'objEnum': {'a': {'two': {'optional': False, 'required': False}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_138(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'two': {'required': False}}, 'c': {'two': {'optional': False, 'required': False}}}}}}, {'fn.test': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'two': {'required': False}}, 'c': {'two': {'optional': False, 'required': False}}}}}}]
        expected_response = [{}, {'ok': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'two': {'required': False}}, 'c': {'two': {'optional': False, 'required': False}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_139(self):
        request = [{}, {'fn.test': {'value': {'objEnum': {'a': {'one': {}}, 'b': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objEnum{b}', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_140(self):
        request = [{}, {'fn.test': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'one': {}, 'two': {'optional': False, 'required': False}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objEnum{b}', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_141(self):
        request = [{}, {'fn.test': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'a': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objEnum{b}.a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_142(self):
        request = [{}, {'fn.test': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'two': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objEnum{b}.two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_143(self):
        request = [{}, {'fn.test': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'one': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_144(self):
        request = [{}, {'fn.test': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'one': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_145(self):
        request = [{}, {'fn.test': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'one': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_146(self):
        request = [{}, {'fn.test': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'one': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_147(self):
        request = [{}, {'fn.test': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'one': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_148(self):
        request = [{}, {'fn.test': {'value': {'objEnum': {'a': {'one': {}}, 'b': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_149(self):
        request = [{}, {'fn.test': {'value': {'objEnum': {'a': {'one': {}}, 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_150(self):
        request = [{}, {'fn.test': {'value': {'objEnum': {'a': {'one': {}}, 'b': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_151(self):
        request = [{}, {'fn.test': {'value': {'objEnum': {'a': {'one': {}}, 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_152(self):
        request = [{}, {'fn.test': {'value': {'objEnum': {'a': {'one': {}}, 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_153(self):
        request = [{}, {'fn.test': {'value': {'objEnum': {'a': {'one': {}}, 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_154(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'one': {}}, 'b': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objEnum{b}', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_155(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'one': {}, 'two': {'optional': False, 'required': False}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objEnum{b}', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_156(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'a': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objEnum{b}.a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_157(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'two': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objEnum{b}.two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_158(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'one': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_159(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'one': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_160(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'one': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_161(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'one': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_162(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'one': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_163(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'one': {}}, 'b': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_164(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'one': {}}, 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_165(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'one': {}}, 'b': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_166(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'one': {}}, 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_167(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'one': {}}, 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_168(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'one': {}}, 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_169(self):
        request = [{'ok': {'value': {'objNullEnum': {}}}}, {'fn.test': {'value': {'objNullEnum': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullEnum': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_170(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': None}}}}, {'fn.test': {'value': {'objNullEnum': {'a': None}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullEnum': {'a': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_171(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': {'one': {}}}}}}, {'fn.test': {'value': {'objNullEnum': {'a': {'one': {}}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullEnum': {'a': {'one': {}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_172(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': {'two': {'required': False}}}}}}, {'fn.test': {'value': {'objNullEnum': {'a': {'two': {'required': False}}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullEnum': {'a': {'two': {'required': False}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_173(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': {'two': {'optional': False, 'required': False}}}}}}, {'fn.test': {'value': {'objNullEnum': {'a': {'two': {'optional': False, 'required': False}}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullEnum': {'a': {'two': {'optional': False, 'required': False}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_174(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': None, 'b': {'one': {}}, 'c': {'two': {'required': False}}, 'd': {'two': {'optional': False, 'required': False}}}}}}, {'fn.test': {'value': {'objNullEnum': {'a': None, 'b': {'one': {}}, 'c': {'two': {'required': False}}, 'd': {'two': {'optional': False, 'required': False}}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullEnum': {'a': None, 'b': {'one': {}}, 'c': {'two': {'required': False}}, 'd': {'two': {'optional': False, 'required': False}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_175(self):
        request = [{}, {'fn.test': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullEnum{b}', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_176(self):
        request = [{}, {'fn.test': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': {'one': {}, 'two': {'optional': False, 'required': False}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullEnum{b}', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_177(self):
        request = [{}, {'fn.test': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': {'a': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullEnum{b}.a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_178(self):
        request = [{}, {'fn.test': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': {'two': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullEnum{b}.two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_179(self):
        request = [{}, {'fn.test': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': {'one': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_180(self):
        request = [{}, {'fn.test': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': {'one': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_181(self):
        request = [{}, {'fn.test': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': {'one': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_182(self):
        request = [{}, {'fn.test': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': {'one': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_183(self):
        request = [{}, {'fn.test': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': {'one': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_184(self):
        request = [{}, {'fn.test': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_185(self):
        request = [{}, {'fn.test': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_186(self):
        request = [{}, {'fn.test': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_187(self):
        request = [{}, {'fn.test': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_188(self):
        request = [{}, {'fn.test': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_189(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullEnum{b}', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_190(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': {'one': {}, 'two': {'optional': False, 'required': False}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullEnum{b}', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_191(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': {'a': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullEnum{b}.a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_192(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': {'two': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullEnum{b}.two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_193(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': {'one': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_194(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': {'one': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_195(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': {'one': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_196(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': {'one': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_197(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': {'one': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_198(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_199(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_200(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_201(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_202(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_203(self):
        request = [{'ok': {'value': {'pStrEnum': {'wrap': {'one': {}}}}}}, {'fn.test': {'value': {'pStrEnum': {'wrap': {'one': {}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrEnum': {'wrap': {'one': {}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_204(self):
        request = [{'ok': {'value': {'pStrEnum': {'wrap': {'two': {'required': False}}}}}}, {'fn.test': {'value': {'pStrEnum': {'wrap': {'two': {'required': False}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrEnum': {'wrap': {'two': {'required': False}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_205(self):
        request = [{'ok': {'value': {'pStrEnum': {'wrap': {'two': {'optional': False, 'required': False}}}}}}, {'fn.test': {'value': {'pStrEnum': {'wrap': {'two': {'optional': False, 'required': False}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrEnum': {'wrap': {'two': {'optional': False, 'required': False}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_206(self):
        request = [{}, {'fn.test': {'value': {'pStrEnum': {'wrap': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrEnum.wrap', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_207(self):
        request = [{}, {'fn.test': {'value': {'pStrEnum': {'wrap': {'one': {}, 'two': {'optional': False, 'required': False}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrEnum.wrap', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_208(self):
        request = [{}, {'fn.test': {'value': {'pStrEnum': {'wrap': {'a': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrEnum.wrap.a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_209(self):
        request = [{}, {'fn.test': {'value': {'pStrEnum': {'wrap': {'two': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrEnum.wrap.two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_210(self):
        request = [{}, {'fn.test': {'value': {'pStrEnum': {'wrap': {'one': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_211(self):
        request = [{}, {'fn.test': {'value': {'pStrEnum': {'wrap': {'one': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_212(self):
        request = [{}, {'fn.test': {'value': {'pStrEnum': {'wrap': {'one': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_213(self):
        request = [{}, {'fn.test': {'value': {'pStrEnum': {'wrap': {'one': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_214(self):
        request = [{}, {'fn.test': {'value': {'pStrEnum': {'wrap': {'one': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_215(self):
        request = [{}, {'fn.test': {'value': {'pStrEnum': {'wrap': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_216(self):
        request = [{}, {'fn.test': {'value': {'pStrEnum': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_217(self):
        request = [{}, {'fn.test': {'value': {'pStrEnum': {'wrap': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_218(self):
        request = [{}, {'fn.test': {'value': {'pStrEnum': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_219(self):
        request = [{}, {'fn.test': {'value': {'pStrEnum': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_220(self):
        request = [{}, {'fn.test': {'value': {'pStrEnum': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_221(self):
        request = [{'ok': {'value': {'pStrEnum': {'wrap': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrEnum.wrap', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_222(self):
        request = [{'ok': {'value': {'pStrEnum': {'wrap': {'one': {}, 'two': {'optional': False, 'required': False}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrEnum.wrap', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_223(self):
        request = [{'ok': {'value': {'pStrEnum': {'wrap': {'a': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrEnum.wrap.a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_224(self):
        request = [{'ok': {'value': {'pStrEnum': {'wrap': {'two': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrEnum.wrap.two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_225(self):
        request = [{'ok': {'value': {'pStrEnum': {'wrap': {'one': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_226(self):
        request = [{'ok': {'value': {'pStrEnum': {'wrap': {'one': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_227(self):
        request = [{'ok': {'value': {'pStrEnum': {'wrap': {'one': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_228(self):
        request = [{'ok': {'value': {'pStrEnum': {'wrap': {'one': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_229(self):
        request = [{'ok': {'value': {'pStrEnum': {'wrap': {'one': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_230(self):
        request = [{'ok': {'value': {'pStrEnum': {'wrap': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_231(self):
        request = [{'ok': {'value': {'pStrEnum': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_232(self):
        request = [{'ok': {'value': {'pStrEnum': {'wrap': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_233(self):
        request = [{'ok': {'value': {'pStrEnum': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_234(self):
        request = [{'ok': {'value': {'pStrEnum': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_235(self):
        request = [{'ok': {'value': {'pStrEnum': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_236(self):
        request = [{'ok': {'value': {'pStrNullEnum': {'wrap': None}}}}, {'fn.test': {'value': {'pStrNullEnum': {'wrap': None}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullEnum': {'wrap': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_237(self):
        request = [{'ok': {'value': {'pStrNullEnum': {'wrap': {'one': {}}}}}}, {'fn.test': {'value': {'pStrNullEnum': {'wrap': {'one': {}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullEnum': {'wrap': {'one': {}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_238(self):
        request = [{'ok': {'value': {'pStrNullEnum': {'wrap': {'two': {'required': False}}}}}}, {'fn.test': {'value': {'pStrNullEnum': {'wrap': {'two': {'required': False}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullEnum': {'wrap': {'two': {'required': False}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_239(self):
        request = [{'ok': {'value': {'pStrNullEnum': {'wrap': {'two': {'optional': False, 'required': False}}}}}}, {'fn.test': {'value': {'pStrNullEnum': {'wrap': {'two': {'optional': False, 'required': False}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullEnum': {'wrap': {'two': {'optional': False, 'required': False}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_240(self):
        request = [{}, {'fn.test': {'value': {'pStrNullEnum': {'wrap': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullEnum.wrap', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_241(self):
        request = [{}, {'fn.test': {'value': {'pStrNullEnum': {'wrap': {'one': {}, 'two': {'optional': False, 'required': False}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullEnum.wrap', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_242(self):
        request = [{}, {'fn.test': {'value': {'pStrNullEnum': {'wrap': {'a': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullEnum.wrap.a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_243(self):
        request = [{}, {'fn.test': {'value': {'pStrNullEnum': {'wrap': {'two': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullEnum.wrap.two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_244(self):
        request = [{}, {'fn.test': {'value': {'pStrNullEnum': {'wrap': {'one': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_245(self):
        request = [{}, {'fn.test': {'value': {'pStrNullEnum': {'wrap': {'one': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_246(self):
        request = [{}, {'fn.test': {'value': {'pStrNullEnum': {'wrap': {'one': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_247(self):
        request = [{}, {'fn.test': {'value': {'pStrNullEnum': {'wrap': {'one': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_248(self):
        request = [{}, {'fn.test': {'value': {'pStrNullEnum': {'wrap': {'one': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_249(self):
        request = [{}, {'fn.test': {'value': {'pStrNullEnum': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_250(self):
        request = [{}, {'fn.test': {'value': {'pStrNullEnum': {'wrap': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_251(self):
        request = [{}, {'fn.test': {'value': {'pStrNullEnum': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_252(self):
        request = [{}, {'fn.test': {'value': {'pStrNullEnum': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_253(self):
        request = [{}, {'fn.test': {'value': {'pStrNullEnum': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_254(self):
        request = [{'ok': {'value': {'pStrNullEnum': {'wrap': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullEnum.wrap', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_255(self):
        request = [{'ok': {'value': {'pStrNullEnum': {'wrap': {'one': {}, 'two': {'optional': False, 'required': False}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullEnum.wrap', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_256(self):
        request = [{'ok': {'value': {'pStrNullEnum': {'wrap': {'a': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullEnum.wrap.a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_257(self):
        request = [{'ok': {'value': {'pStrNullEnum': {'wrap': {'two': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullEnum.wrap.two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_258(self):
        request = [{'ok': {'value': {'pStrNullEnum': {'wrap': {'one': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_259(self):
        request = [{'ok': {'value': {'pStrNullEnum': {'wrap': {'one': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_260(self):
        request = [{'ok': {'value': {'pStrNullEnum': {'wrap': {'one': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_261(self):
        request = [{'ok': {'value': {'pStrNullEnum': {'wrap': {'one': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_262(self):
        request = [{'ok': {'value': {'pStrNullEnum': {'wrap': {'one': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_263(self):
        request = [{'ok': {'value': {'pStrNullEnum': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_264(self):
        request = [{'ok': {'value': {'pStrNullEnum': {'wrap': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_265(self):
        request = [{'ok': {'value': {'pStrNullEnum': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_266(self):
        request = [{'ok': {'value': {'pStrNullEnum': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_267(self):
        request = [{'ok': {'value': {'pStrNullEnum': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_268(self):
        request = [{'ok': {'value': {'pEnumEnum': {'one': {}}}}}, {'fn.test': {'value': {'pEnumEnum': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumEnum': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_269(self):
        request = [{'ok': {'value': {'pEnumEnum': {'two': {'ewrap': {'one': {}}}}}}}, {'fn.test': {'value': {'pEnumEnum': {'two': {'ewrap': {'one': {}}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumEnum': {'two': {'ewrap': {'one': {}}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_270(self):
        request = [{'ok': {'value': {'pEnumEnum': {'two': {'ewrap': {'two': {'required': False}}}}}}}, {'fn.test': {'value': {'pEnumEnum': {'two': {'ewrap': {'two': {'required': False}}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumEnum': {'two': {'ewrap': {'two': {'required': False}}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_271(self):
        request = [{'ok': {'value': {'pEnumEnum': {'two': {'ewrap': {'two': {'optional': False, 'required': False}}}}}}}, {'fn.test': {'value': {'pEnumEnum': {'two': {'ewrap': {'two': {'optional': False, 'required': False}}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumEnum': {'two': {'ewrap': {'two': {'optional': False, 'required': False}}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_272(self):
        request = [{}, {'fn.test': {'value': {'pEnumEnum': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumEnum.two.ewrap', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_273(self):
        request = [{}, {'fn.test': {'value': {'pEnumEnum': {'two': {'ewrap': {'one': {}, 'two': {'optional': False, 'required': False}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumEnum.two.ewrap', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_274(self):
        request = [{}, {'fn.test': {'value': {'pEnumEnum': {'two': {'ewrap': {'a': {}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumEnum.two.ewrap.a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_275(self):
        request = [{}, {'fn.test': {'value': {'pEnumEnum': {'two': {'ewrap': {'two': {}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumEnum.two.ewrap.two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_276(self):
        request = [{}, {'fn.test': {'value': {'pEnumEnum': {'two': {'ewrap': {'one': False}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_277(self):
        request = [{}, {'fn.test': {'value': {'pEnumEnum': {'two': {'ewrap': {'one': 0}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_278(self):
        request = [{}, {'fn.test': {'value': {'pEnumEnum': {'two': {'ewrap': {'one': 0.1}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_279(self):
        request = [{}, {'fn.test': {'value': {'pEnumEnum': {'two': {'ewrap': {'one': ''}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_280(self):
        request = [{}, {'fn.test': {'value': {'pEnumEnum': {'two': {'ewrap': {'one': []}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_281(self):
        request = [{}, {'fn.test': {'value': {'pEnumEnum': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_282(self):
        request = [{}, {'fn.test': {'value': {'pEnumEnum': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_283(self):
        request = [{}, {'fn.test': {'value': {'pEnumEnum': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_284(self):
        request = [{}, {'fn.test': {'value': {'pEnumEnum': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_285(self):
        request = [{}, {'fn.test': {'value': {'pEnumEnum': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_286(self):
        request = [{}, {'fn.test': {'value': {'pEnumEnum': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_287(self):
        request = [{'ok': {'value': {'pEnumEnum': {'two': {'ewrap': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumEnum.two.ewrap', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_288(self):
        request = [{'ok': {'value': {'pEnumEnum': {'two': {'ewrap': {'one': {}, 'two': {'optional': False, 'required': False}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumEnum.two.ewrap', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_289(self):
        request = [{'ok': {'value': {'pEnumEnum': {'two': {'ewrap': {'a': {}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumEnum.two.ewrap.a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_290(self):
        request = [{'ok': {'value': {'pEnumEnum': {'two': {'ewrap': {'two': {}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumEnum.two.ewrap.two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_291(self):
        request = [{'ok': {'value': {'pEnumEnum': {'two': {'ewrap': {'one': False}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_292(self):
        request = [{'ok': {'value': {'pEnumEnum': {'two': {'ewrap': {'one': 0}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_293(self):
        request = [{'ok': {'value': {'pEnumEnum': {'two': {'ewrap': {'one': 0.1}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_294(self):
        request = [{'ok': {'value': {'pEnumEnum': {'two': {'ewrap': {'one': ''}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_295(self):
        request = [{'ok': {'value': {'pEnumEnum': {'two': {'ewrap': {'one': []}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_296(self):
        request = [{'ok': {'value': {'pEnumEnum': {'two': {'ewrap': None}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_297(self):
        request = [{'ok': {'value': {'pEnumEnum': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_298(self):
        request = [{'ok': {'value': {'pEnumEnum': {'two': {'ewrap': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_299(self):
        request = [{'ok': {'value': {'pEnumEnum': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_300(self):
        request = [{'ok': {'value': {'pEnumEnum': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_301(self):
        request = [{'ok': {'value': {'pEnumEnum': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_302(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'one': {}}}}}, {'fn.test': {'value': {'pEnumNullEnum': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullEnum': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_303(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': None}}}}}, {'fn.test': {'value': {'pEnumNullEnum': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': None}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_304(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'one': {}}}}}}}, {'fn.test': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'one': {}}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'one': {}}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_305(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'two': {'required': False}}}}}}}, {'fn.test': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'two': {'required': False}}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'two': {'required': False}}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_306(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'two': {'optional': False, 'required': False}}}}}}}, {'fn.test': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'two': {'optional': False, 'required': False}}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'two': {'optional': False, 'required': False}}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_307(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullEnum': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullEnum.two.ewrap', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_308(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'one': {}, 'two': {'optional': False, 'required': False}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullEnum.two.ewrap', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_309(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'a': {}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullEnum.two.ewrap.a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_310(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'two': {}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullEnum.two.ewrap.two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_311(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'one': False}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_312(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'one': 0}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_313(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'one': 0.1}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_314(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'one': ''}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_315(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'one': []}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_316(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullEnum': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_317(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullEnum': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_318(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullEnum': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_319(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullEnum': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_320(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullEnum': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_321(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullEnum.two.ewrap', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_322(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'one': {}, 'two': {'optional': False, 'required': False}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullEnum.two.ewrap', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_323(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'a': {}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullEnum.two.ewrap.a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_324(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'two': {}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullEnum.two.ewrap.two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_325(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'one': False}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_326(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'one': 0}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_327(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'one': 0.1}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_328(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'one': ''}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_329(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'one': []}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_330(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_331(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_332(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_333(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_enum_334(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testFn_0(self):
        request = [{'ok': {'value': {'fn': {'required': False}}}}, {'fn.test': {'value': {'fn': {'required': False}}}}]
        expected_response = [{}, {'ok': {'value': {'fn': {'required': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testFn_1(self):
        request = [{'ok': {'value': {'fn': {'optional': False, 'required': False}}}}, {'fn.test': {'value': {'fn': {'optional': False, 'required': False}}}}]
        expected_response = [{}, {'ok': {'value': {'fn': {'optional': False, 'required': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testFn_2(self):
        request = [{}, {'fn.test': {'value': {'fn': None}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.fn', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testFn_3(self):
        request = [{}, {'fn.test': {'value': {'fn': {}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.fn.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testFn_4(self):
        request = [{}, {'fn.test': {'value': {'fn': {'required': False, 'a': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.fn.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testFn_5(self):
        request = [{}, {'fn.test': {'value': {'fn': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.fn', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testFn_6(self):
        request = [{}, {'fn.test': {'value': {'fn': 0}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.fn', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testFn_7(self):
        request = [{}, {'fn.test': {'value': {'fn': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.fn', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testFn_8(self):
        request = [{}, {'fn.test': {'value': {'fn': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.fn', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testFn_9(self):
        request = [{}, {'fn.test': {'value': {'fn': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.fn', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testFn_10(self):
        request = [{'ok': {'value': {'fn': None}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.fn', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testFn_11(self):
        request = [{'ok': {'value': {'fn': {}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.fn.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testFn_12(self):
        request = [{'ok': {'value': {'fn': {'required': False, 'a': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.fn.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testFn_13(self):
        request = [{'ok': {'value': {'fn': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.fn', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testFn_14(self):
        request = [{'ok': {'value': {'fn': 0}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.fn', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testFn_15(self):
        request = [{'ok': {'value': {'fn': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.fn', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testFn_16(self):
        request = [{'ok': {'value': {'fn': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.fn', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testFn_17(self):
        request = [{'ok': {'value': {'fn': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.fn', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullFn_0(self):
        request = [{'ok': {'value': {'nullFn': None}}}, {'fn.test': {'value': {'nullFn': None}}}]
        expected_response = [{}, {'ok': {'value': {'nullFn': None}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullFn_1(self):
        request = [{'ok': {'value': {'nullFn': {'required': False}}}}, {'fn.test': {'value': {'nullFn': {'required': False}}}}]
        expected_response = [{}, {'ok': {'value': {'nullFn': {'required': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullFn_2(self):
        request = [{'ok': {'value': {'nullFn': {'optional': False, 'required': False}}}}, {'fn.test': {'value': {'nullFn': {'optional': False, 'required': False}}}}]
        expected_response = [{}, {'ok': {'value': {'nullFn': {'optional': False, 'required': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullFn_3(self):
        request = [{}, {'fn.test': {'value': {'nullFn': {}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullFn.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullFn_4(self):
        request = [{}, {'fn.test': {'value': {'nullFn': {'required': False, 'a': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullFn.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullFn_5(self):
        request = [{}, {'fn.test': {'value': {'nullFn': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullFn', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullFn_6(self):
        request = [{}, {'fn.test': {'value': {'nullFn': 0}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullFn', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullFn_7(self):
        request = [{}, {'fn.test': {'value': {'nullFn': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullFn', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullFn_8(self):
        request = [{}, {'fn.test': {'value': {'nullFn': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullFn', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullFn_9(self):
        request = [{}, {'fn.test': {'value': {'nullFn': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullFn', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullFn_10(self):
        request = [{'ok': {'value': {'nullFn': {}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullFn.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullFn_11(self):
        request = [{'ok': {'value': {'nullFn': {'required': False, 'a': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullFn.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullFn_12(self):
        request = [{'ok': {'value': {'nullFn': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullFn', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullFn_13(self):
        request = [{'ok': {'value': {'nullFn': 0}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullFn', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullFn_14(self):
        request = [{'ok': {'value': {'nullFn': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullFn', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullFn_15(self):
        request = [{'ok': {'value': {'nullFn': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullFn', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullFn_16(self):
        request = [{'ok': {'value': {'nullFn': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullFn', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayFn_0(self):
        request = [{'ok': {'value': {'arrFn': []}}}, {'fn.test': {'value': {'arrFn': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrFn': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayFn_1(self):
        request = [{'ok': {'value': {'arrFn': [{'required': False}]}}}, {'fn.test': {'value': {'arrFn': [{'required': False}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrFn': [{'required': False}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayFn_2(self):
        request = [{'ok': {'value': {'arrFn': [{'optional': False, 'required': False}]}}}, {'fn.test': {'value': {'arrFn': [{'optional': False, 'required': False}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrFn': [{'optional': False, 'required': False}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayFn_3(self):
        request = [{'ok': {'value': {'arrFn': [{'required': False}, {'optional': False, 'required': False}]}}}, {'fn.test': {'value': {'arrFn': [{'required': False}, {'optional': False, 'required': False}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrFn': [{'required': False}, {'optional': False, 'required': False}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayFn_4(self):
        request = [{}, {'fn.test': {'value': {'arrFn': [{'required': False}, None]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrFn[1]', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayFn_5(self):
        request = [{}, {'fn.test': {'value': {'arrFn': [{'required': False}, {}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrFn[1].required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayFn_6(self):
        request = [{}, {'fn.test': {'value': {'arrFn': [{'required': False}, {'required': False, 'a': False}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrFn[1].a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayFn_7(self):
        request = [{}, {'fn.test': {'value': {'arrFn': [{'required': False}, False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrFn[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayFn_8(self):
        request = [{}, {'fn.test': {'value': {'arrFn': [{'required': False}, 0]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrFn[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayFn_9(self):
        request = [{}, {'fn.test': {'value': {'arrFn': [{'required': False}, 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrFn[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayFn_10(self):
        request = [{}, {'fn.test': {'value': {'arrFn': [{'required': False}, '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrFn[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayFn_11(self):
        request = [{}, {'fn.test': {'value': {'arrFn': [{'required': False}, []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrFn[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayFn_12(self):
        request = [{'ok': {'value': {'arrFn': [{'required': False}, None]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrFn[1]', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayFn_13(self):
        request = [{'ok': {'value': {'arrFn': [{'required': False}, {}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrFn[1].required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayFn_14(self):
        request = [{'ok': {'value': {'arrFn': [{'required': False}, {'required': False, 'a': False}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrFn[1].a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayFn_15(self):
        request = [{'ok': {'value': {'arrFn': [{'required': False}, False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrFn[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayFn_16(self):
        request = [{'ok': {'value': {'arrFn': [{'required': False}, 0]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrFn[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayFn_17(self):
        request = [{'ok': {'value': {'arrFn': [{'required': False}, 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrFn[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayFn_18(self):
        request = [{'ok': {'value': {'arrFn': [{'required': False}, '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrFn[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayFn_19(self):
        request = [{'ok': {'value': {'arrFn': [{'required': False}, []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrFn[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullFn_0(self):
        request = [{'ok': {'value': {'arrNullFn': [None]}}}, {'fn.test': {'value': {'arrNullFn': [None]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullFn': [None]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullFn_1(self):
        request = [{'ok': {'value': {'arrNullFn': []}}}, {'fn.test': {'value': {'arrNullFn': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullFn': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullFn_2(self):
        request = [{'ok': {'value': {'arrNullFn': [{'required': False}]}}}, {'fn.test': {'value': {'arrNullFn': [{'required': False}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullFn': [{'required': False}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullFn_3(self):
        request = [{'ok': {'value': {'arrNullFn': [{'optional': False, 'required': False}]}}}, {'fn.test': {'value': {'arrNullFn': [{'optional': False, 'required': False}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullFn': [{'optional': False, 'required': False}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullFn_4(self):
        request = [{'ok': {'value': {'arrNullFn': [None, {'required': False}, {'optional': False, 'required': False}]}}}, {'fn.test': {'value': {'arrNullFn': [None, {'required': False}, {'optional': False, 'required': False}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullFn': [None, {'required': False}, {'optional': False, 'required': False}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullFn_5(self):
        request = [{}, {'fn.test': {'value': {'arrNullFn': [{'required': False}, {}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullFn[1].required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullFn_6(self):
        request = [{}, {'fn.test': {'value': {'arrNullFn': [{'required': False}, {'required': False, 'a': False}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullFn[1].a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullFn_7(self):
        request = [{}, {'fn.test': {'value': {'arrNullFn': [{'required': False}, False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullFn[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullFn_8(self):
        request = [{}, {'fn.test': {'value': {'arrNullFn': [{'required': False}, 0]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullFn[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullFn_9(self):
        request = [{}, {'fn.test': {'value': {'arrNullFn': [{'required': False}, 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullFn[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullFn_10(self):
        request = [{}, {'fn.test': {'value': {'arrNullFn': [{'required': False}, '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullFn[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullFn_11(self):
        request = [{}, {'fn.test': {'value': {'arrNullFn': [{'required': False}, []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullFn[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullFn_12(self):
        request = [{'ok': {'value': {'arrNullFn': [{'required': False}, {}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullFn[1].required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullFn_13(self):
        request = [{'ok': {'value': {'arrNullFn': [{'required': False}, {'required': False, 'a': False}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullFn[1].a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullFn_14(self):
        request = [{'ok': {'value': {'arrNullFn': [{'required': False}, False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullFn[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullFn_15(self):
        request = [{'ok': {'value': {'arrNullFn': [{'required': False}, 0]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullFn[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullFn_16(self):
        request = [{'ok': {'value': {'arrNullFn': [{'required': False}, 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullFn[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullFn_17(self):
        request = [{'ok': {'value': {'arrNullFn': [{'required': False}, '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullFn[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullFn_18(self):
        request = [{'ok': {'value': {'arrNullFn': [{'required': False}, []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullFn[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectFn_0(self):
        request = [{'ok': {'value': {'objFn': {}}}}, {'fn.test': {'value': {'objFn': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objFn': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectFn_1(self):
        request = [{'ok': {'value': {'objFn': {'a': {'required': False}}}}}, {'fn.test': {'value': {'objFn': {'a': {'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'objFn': {'a': {'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectFn_2(self):
        request = [{'ok': {'value': {'objFn': {'a': {'optional': False, 'required': False}}}}}, {'fn.test': {'value': {'objFn': {'a': {'optional': False, 'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'objFn': {'a': {'optional': False, 'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectFn_3(self):
        request = [{'ok': {'value': {'objFn': {'a': {'required': False}, 'b': {'optional': False, 'required': False}}}}}, {'fn.test': {'value': {'objFn': {'a': {'required': False}, 'b': {'optional': False, 'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'objFn': {'a': {'required': False}, 'b': {'optional': False, 'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectFn_4(self):
        request = [{}, {'fn.test': {'value': {'objFn': {'a': {'required': False}, 'b': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objFn{b}', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectFn_5(self):
        request = [{}, {'fn.test': {'value': {'objFn': {'a': {'required': False}, 'b': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objFn{b}.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectFn_6(self):
        request = [{}, {'fn.test': {'value': {'objFn': {'a': {'required': False}, 'b': {'required': False, 'a': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objFn{b}.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectFn_7(self):
        request = [{}, {'fn.test': {'value': {'objFn': {'a': {'required': False}, 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objFn{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectFn_8(self):
        request = [{}, {'fn.test': {'value': {'objFn': {'a': {'required': False}, 'b': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objFn{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectFn_9(self):
        request = [{}, {'fn.test': {'value': {'objFn': {'a': {'required': False}, 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objFn{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectFn_10(self):
        request = [{}, {'fn.test': {'value': {'objFn': {'a': {'required': False}, 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objFn{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectFn_11(self):
        request = [{}, {'fn.test': {'value': {'objFn': {'a': {'required': False}, 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objFn{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectFn_12(self):
        request = [{'ok': {'value': {'objFn': {'a': {'required': False}, 'b': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objFn{b}', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectFn_13(self):
        request = [{'ok': {'value': {'objFn': {'a': {'required': False}, 'b': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objFn{b}.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectFn_14(self):
        request = [{'ok': {'value': {'objFn': {'a': {'required': False}, 'b': {'required': False, 'a': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objFn{b}.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectFn_15(self):
        request = [{'ok': {'value': {'objFn': {'a': {'required': False}, 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objFn{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectFn_16(self):
        request = [{'ok': {'value': {'objFn': {'a': {'required': False}, 'b': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objFn{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectFn_17(self):
        request = [{'ok': {'value': {'objFn': {'a': {'required': False}, 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objFn{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectFn_18(self):
        request = [{'ok': {'value': {'objFn': {'a': {'required': False}, 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objFn{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectFn_19(self):
        request = [{'ok': {'value': {'objFn': {'a': {'required': False}, 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objFn{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullFn_0(self):
        request = [{'ok': {'value': {'objNullFn': {}}}}, {'fn.test': {'value': {'objNullFn': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullFn': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullFn_1(self):
        request = [{'ok': {'value': {'objNullFn': {'a': None}}}}, {'fn.test': {'value': {'objNullFn': {'a': None}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullFn': {'a': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullFn_2(self):
        request = [{'ok': {'value': {'objNullFn': {'a': {'required': False}}}}}, {'fn.test': {'value': {'objNullFn': {'a': {'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullFn': {'a': {'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullFn_3(self):
        request = [{'ok': {'value': {'objNullFn': {'a': {'optional': False, 'required': False}}}}}, {'fn.test': {'value': {'objNullFn': {'a': {'optional': False, 'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullFn': {'a': {'optional': False, 'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullFn_4(self):
        request = [{'ok': {'value': {'objNullFn': {'a': None, 'b': {'required': False}, 'c': {'optional': False, 'required': False}}}}}, {'fn.test': {'value': {'objNullFn': {'a': None, 'b': {'required': False}, 'c': {'optional': False, 'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullFn': {'a': None, 'b': {'required': False}, 'c': {'optional': False, 'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullFn_5(self):
        request = [{}, {'fn.test': {'value': {'objNullFn': {'a': {'required': False}, 'b': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullFn{b}.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullFn_6(self):
        request = [{}, {'fn.test': {'value': {'objNullFn': {'a': {'required': False}, 'b': {'required': False, 'a': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullFn{b}.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullFn_7(self):
        request = [{}, {'fn.test': {'value': {'objNullFn': {'a': {'required': False}, 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullFn{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullFn_8(self):
        request = [{}, {'fn.test': {'value': {'objNullFn': {'a': {'required': False}, 'b': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullFn{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullFn_9(self):
        request = [{}, {'fn.test': {'value': {'objNullFn': {'a': {'required': False}, 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullFn{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullFn_10(self):
        request = [{}, {'fn.test': {'value': {'objNullFn': {'a': {'required': False}, 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullFn{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullFn_11(self):
        request = [{}, {'fn.test': {'value': {'objNullFn': {'a': {'required': False}, 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullFn{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullFn_12(self):
        request = [{'ok': {'value': {'objNullFn': {'a': {'required': False}, 'b': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullFn{b}.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullFn_13(self):
        request = [{'ok': {'value': {'objNullFn': {'a': {'required': False}, 'b': {'required': False, 'a': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullFn{b}.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullFn_14(self):
        request = [{'ok': {'value': {'objNullFn': {'a': {'required': False}, 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullFn{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullFn_15(self):
        request = [{'ok': {'value': {'objNullFn': {'a': {'required': False}, 'b': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullFn{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullFn_16(self):
        request = [{'ok': {'value': {'objNullFn': {'a': {'required': False}, 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullFn{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullFn_17(self):
        request = [{'ok': {'value': {'objNullFn': {'a': {'required': False}, 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullFn{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullFn_18(self):
        request = [{'ok': {'value': {'objNullFn': {'a': {'required': False}, 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullFn{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructFn_0(self):
        request = [{'ok': {'value': {'pStrFn': {'wrap': {'required': False}}}}}, {'fn.test': {'value': {'pStrFn': {'wrap': {'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrFn': {'wrap': {'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructFn_1(self):
        request = [{'ok': {'value': {'pStrFn': {'wrap': {'optional': False, 'required': False}}}}}, {'fn.test': {'value': {'pStrFn': {'wrap': {'optional': False, 'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrFn': {'wrap': {'optional': False, 'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructFn_2(self):
        request = [{}, {'fn.test': {'value': {'pStrFn': {'wrap': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrFn.wrap', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructFn_3(self):
        request = [{}, {'fn.test': {'value': {'pStrFn': {'wrap': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrFn.wrap.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructFn_4(self):
        request = [{}, {'fn.test': {'value': {'pStrFn': {'wrap': {'required': False, 'a': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrFn.wrap.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructFn_5(self):
        request = [{}, {'fn.test': {'value': {'pStrFn': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructFn_6(self):
        request = [{}, {'fn.test': {'value': {'pStrFn': {'wrap': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructFn_7(self):
        request = [{}, {'fn.test': {'value': {'pStrFn': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructFn_8(self):
        request = [{}, {'fn.test': {'value': {'pStrFn': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructFn_9(self):
        request = [{}, {'fn.test': {'value': {'pStrFn': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructFn_10(self):
        request = [{'ok': {'value': {'pStrFn': {'wrap': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrFn.wrap', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructFn_11(self):
        request = [{'ok': {'value': {'pStrFn': {'wrap': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrFn.wrap.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructFn_12(self):
        request = [{'ok': {'value': {'pStrFn': {'wrap': {'required': False, 'a': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrFn.wrap.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructFn_13(self):
        request = [{'ok': {'value': {'pStrFn': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructFn_14(self):
        request = [{'ok': {'value': {'pStrFn': {'wrap': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructFn_15(self):
        request = [{'ok': {'value': {'pStrFn': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructFn_16(self):
        request = [{'ok': {'value': {'pStrFn': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructFn_17(self):
        request = [{'ok': {'value': {'pStrFn': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullFn_0(self):
        request = [{'ok': {'value': {'pStrNullFn': {'wrap': None}}}}, {'fn.test': {'value': {'pStrNullFn': {'wrap': None}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullFn': {'wrap': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullFn_1(self):
        request = [{'ok': {'value': {'pStrNullFn': {'wrap': {'required': False}}}}}, {'fn.test': {'value': {'pStrNullFn': {'wrap': {'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullFn': {'wrap': {'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullFn_2(self):
        request = [{'ok': {'value': {'pStrNullFn': {'wrap': {'optional': False, 'required': False}}}}}, {'fn.test': {'value': {'pStrNullFn': {'wrap': {'optional': False, 'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullFn': {'wrap': {'optional': False, 'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullFn_3(self):
        request = [{}, {'fn.test': {'value': {'pStrNullFn': {'wrap': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullFn.wrap.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullFn_4(self):
        request = [{}, {'fn.test': {'value': {'pStrNullFn': {'wrap': {'required': False, 'a': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullFn.wrap.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullFn_5(self):
        request = [{}, {'fn.test': {'value': {'pStrNullFn': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullFn_6(self):
        request = [{}, {'fn.test': {'value': {'pStrNullFn': {'wrap': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullFn_7(self):
        request = [{}, {'fn.test': {'value': {'pStrNullFn': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullFn_8(self):
        request = [{}, {'fn.test': {'value': {'pStrNullFn': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullFn_9(self):
        request = [{}, {'fn.test': {'value': {'pStrNullFn': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullFn_10(self):
        request = [{'ok': {'value': {'pStrNullFn': {'wrap': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullFn.wrap.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullFn_11(self):
        request = [{'ok': {'value': {'pStrNullFn': {'wrap': {'required': False, 'a': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullFn.wrap.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullFn_12(self):
        request = [{'ok': {'value': {'pStrNullFn': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullFn_13(self):
        request = [{'ok': {'value': {'pStrNullFn': {'wrap': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullFn_14(self):
        request = [{'ok': {'value': {'pStrNullFn': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullFn_15(self):
        request = [{'ok': {'value': {'pStrNullFn': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullFn_16(self):
        request = [{'ok': {'value': {'pStrNullFn': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumFn_0(self):
        request = [{'ok': {'value': {'pEnumFn': {'one': {}}}}}, {'fn.test': {'value': {'pEnumFn': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumFn': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumFn_1(self):
        request = [{'ok': {'value': {'pEnumFn': {'two': {'ewrap': {'required': False}}}}}}, {'fn.test': {'value': {'pEnumFn': {'two': {'ewrap': {'required': False}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumFn': {'two': {'ewrap': {'required': False}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumFn_2(self):
        request = [{'ok': {'value': {'pEnumFn': {'two': {'ewrap': {'optional': False, 'required': False}}}}}}, {'fn.test': {'value': {'pEnumFn': {'two': {'ewrap': {'optional': False, 'required': False}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumFn': {'two': {'ewrap': {'optional': False, 'required': False}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumFn_3(self):
        request = [{}, {'fn.test': {'value': {'pEnumFn': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumFn.two.ewrap', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumFn_4(self):
        request = [{}, {'fn.test': {'value': {'pEnumFn': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumFn.two.ewrap.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumFn_5(self):
        request = [{}, {'fn.test': {'value': {'pEnumFn': {'two': {'ewrap': {'required': False, 'a': False}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumFn.two.ewrap.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumFn_6(self):
        request = [{}, {'fn.test': {'value': {'pEnumFn': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumFn_7(self):
        request = [{}, {'fn.test': {'value': {'pEnumFn': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumFn_8(self):
        request = [{}, {'fn.test': {'value': {'pEnumFn': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumFn_9(self):
        request = [{}, {'fn.test': {'value': {'pEnumFn': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumFn_10(self):
        request = [{}, {'fn.test': {'value': {'pEnumFn': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumFn_11(self):
        request = [{'ok': {'value': {'pEnumFn': {'two': {'ewrap': None}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumFn.two.ewrap', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumFn_12(self):
        request = [{'ok': {'value': {'pEnumFn': {'two': {'ewrap': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumFn.two.ewrap.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumFn_13(self):
        request = [{'ok': {'value': {'pEnumFn': {'two': {'ewrap': {'required': False, 'a': False}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumFn.two.ewrap.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumFn_14(self):
        request = [{'ok': {'value': {'pEnumFn': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumFn_15(self):
        request = [{'ok': {'value': {'pEnumFn': {'two': {'ewrap': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumFn_16(self):
        request = [{'ok': {'value': {'pEnumFn': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumFn_17(self):
        request = [{'ok': {'value': {'pEnumFn': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumFn_18(self):
        request = [{'ok': {'value': {'pEnumFn': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullFn_0(self):
        request = [{'ok': {'value': {'pEnumNullFn': {'one': {}}}}}, {'fn.test': {'value': {'pEnumNullFn': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullFn': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullFn_1(self):
        request = [{'ok': {'value': {'pEnumNullFn': {'two': {'ewrap': None}}}}}, {'fn.test': {'value': {'pEnumNullFn': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullFn': {'two': {'ewrap': None}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullFn_2(self):
        request = [{'ok': {'value': {'pEnumNullFn': {'two': {'ewrap': {'required': False}}}}}}, {'fn.test': {'value': {'pEnumNullFn': {'two': {'ewrap': {'required': False}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullFn': {'two': {'ewrap': {'required': False}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullFn_3(self):
        request = [{'ok': {'value': {'pEnumNullFn': {'two': {'ewrap': {'optional': False, 'required': False}}}}}}, {'fn.test': {'value': {'pEnumNullFn': {'two': {'ewrap': {'optional': False, 'required': False}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullFn': {'two': {'ewrap': {'optional': False, 'required': False}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullFn_4(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullFn': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullFn.two.ewrap.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullFn_5(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullFn': {'two': {'ewrap': {'required': False, 'a': False}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullFn.two.ewrap.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullFn_6(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullFn': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullFn_7(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullFn': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullFn_8(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullFn': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullFn_9(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullFn': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullFn_10(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullFn': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullFn_11(self):
        request = [{'ok': {'value': {'pEnumNullFn': {'two': {'ewrap': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullFn.two.ewrap.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullFn_12(self):
        request = [{'ok': {'value': {'pEnumNullFn': {'two': {'ewrap': {'required': False, 'a': False}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullFn.two.ewrap.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullFn_13(self):
        request = [{'ok': {'value': {'pEnumNullFn': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullFn_14(self):
        request = [{'ok': {'value': {'pEnumNullFn': {'two': {'ewrap': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullFn_15(self):
        request = [{'ok': {'value': {'pEnumNullFn': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullFn_16(self):
        request = [{'ok': {'value': {'pEnumNullFn': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullFn_17(self):
        request = [{'ok': {'value': {'pEnumNullFn': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Str_0(self):
        request = [{'ok': {'value': {'p2Str': {'wrap': False, 'nest': [0]}}}}, {'fn.test': {'value': {'p2Str': {'wrap': False, 'nest': [0]}}}}]
        expected_response = [{}, {'ok': {'value': {'p2Str': {'wrap': False, 'nest': [0]}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Str_1(self):
        request = [{'ok': {'value': {'p2Str': {'wrap': True, 'nest': [1]}}}}, {'fn.test': {'value': {'p2Str': {'wrap': True, 'nest': [1]}}}}]
        expected_response = [{}, {'ok': {'value': {'p2Str': {'wrap': True, 'nest': [1]}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Str_2(self):
        request = [{}, {'fn.test': {'value': {'p2Str': None}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Str', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Str_3(self):
        request = [{}, {'fn.test': {'value': {'p2Str': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Str', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Str_4(self):
        request = [{}, {'fn.test': {'value': {'p2Str': 0}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Str', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Str_5(self):
        request = [{}, {'fn.test': {'value': {'p2Str': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Str', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Str_6(self):
        request = [{}, {'fn.test': {'value': {'p2Str': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Str', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Str_7(self):
        request = [{}, {'fn.test': {'value': {'p2Str': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Str', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Str_8(self):
        request = [{}, {'fn.test': {'value': {'p2Str': {'wrap': 0, 'nest': [0]}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Str_9(self):
        request = [{}, {'fn.test': {'value': {'p2Str': {'wrap': '', 'nest': [0]}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Str_10(self):
        request = [{}, {'fn.test': {'value': {'p2Str': {'wrap': [], 'nest': [0]}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Str_11(self):
        request = [{}, {'fn.test': {'value': {'p2Str': {'wrap': {}, 'nest': [0]}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Str_12(self):
        request = [{}, {'fn.test': {'value': {'p2Str': {'wrap': False, 'nest': [0, False]}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Str_13(self):
        request = [{}, {'fn.test': {'value': {'p2Str': {'wrap': False, 'nest': [0, 0.1]}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Str_14(self):
        request = [{}, {'fn.test': {'value': {'p2Str': {'wrap': False, 'nest': [0, '']}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Str_15(self):
        request = [{}, {'fn.test': {'value': {'p2Str': {'wrap': False, 'nest': [0, []]}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Str_16(self):
        request = [{}, {'fn.test': {'value': {'p2Str': {'wrap': False, 'nest': [0, {}]}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Str_17(self):
        request = [{'ok': {'value': {'p2Str': None}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Str', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Str_18(self):
        request = [{'ok': {'value': {'p2Str': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Str', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Str_19(self):
        request = [{'ok': {'value': {'p2Str': 0}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Str', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Str_20(self):
        request = [{'ok': {'value': {'p2Str': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Str', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Str_21(self):
        request = [{'ok': {'value': {'p2Str': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Str', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Str_22(self):
        request = [{'ok': {'value': {'p2Str': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Str', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Str_23(self):
        request = [{'ok': {'value': {'p2Str': {'wrap': 0, 'nest': [0]}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Str_24(self):
        request = [{'ok': {'value': {'p2Str': {'wrap': '', 'nest': [0]}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Str_25(self):
        request = [{'ok': {'value': {'p2Str': {'wrap': [], 'nest': [0]}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Str_26(self):
        request = [{'ok': {'value': {'p2Str': {'wrap': {}, 'nest': [0]}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Str_27(self):
        request = [{'ok': {'value': {'p2Str': {'wrap': False, 'nest': [0, False]}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Str_28(self):
        request = [{'ok': {'value': {'p2Str': {'wrap': False, 'nest': [0, 0.1]}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Str_29(self):
        request = [{'ok': {'value': {'p2Str': {'wrap': False, 'nest': [0, '']}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Str_30(self):
        request = [{'ok': {'value': {'p2Str': {'wrap': False, 'nest': [0, []]}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Str_31(self):
        request = [{'ok': {'value': {'p2Str': {'wrap': False, 'nest': [0, {}]}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Str_0(self):
        request = [{'ok': {'value': {'nullP2Str': None}}}, {'fn.test': {'value': {'nullP2Str': None}}}]
        expected_response = [{}, {'ok': {'value': {'nullP2Str': None}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Str_1(self):
        request = [{'ok': {'value': {'nullP2Str': {'wrap': False, 'nest': [0]}}}}, {'fn.test': {'value': {'nullP2Str': {'wrap': False, 'nest': [0]}}}}]
        expected_response = [{}, {'ok': {'value': {'nullP2Str': {'wrap': False, 'nest': [0]}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Str_2(self):
        request = [{'ok': {'value': {'nullP2Str': {'wrap': True, 'nest': [1]}}}}, {'fn.test': {'value': {'nullP2Str': {'wrap': True, 'nest': [1]}}}}]
        expected_response = [{}, {'ok': {'value': {'nullP2Str': {'wrap': True, 'nest': [1]}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Str_3(self):
        request = [{}, {'fn.test': {'value': {'nullP2Str': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Str', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Str_4(self):
        request = [{}, {'fn.test': {'value': {'nullP2Str': 0}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Str', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Str_5(self):
        request = [{}, {'fn.test': {'value': {'nullP2Str': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Str', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Str_6(self):
        request = [{}, {'fn.test': {'value': {'nullP2Str': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Str', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Str_7(self):
        request = [{}, {'fn.test': {'value': {'nullP2Str': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Str', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Str_8(self):
        request = [{}, {'fn.test': {'value': {'nullP2Str': {'wrap': 0, 'nest': [0]}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Str_9(self):
        request = [{}, {'fn.test': {'value': {'nullP2Str': {'wrap': '', 'nest': [0]}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Str_10(self):
        request = [{}, {'fn.test': {'value': {'nullP2Str': {'wrap': [], 'nest': [0]}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Str_11(self):
        request = [{}, {'fn.test': {'value': {'nullP2Str': {'wrap': {}, 'nest': [0]}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Str_12(self):
        request = [{}, {'fn.test': {'value': {'nullP2Str': {'wrap': False, 'nest': [0, False]}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Str_13(self):
        request = [{}, {'fn.test': {'value': {'nullP2Str': {'wrap': False, 'nest': [0, 0.1]}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Str_14(self):
        request = [{}, {'fn.test': {'value': {'nullP2Str': {'wrap': False, 'nest': [0, '']}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Str_15(self):
        request = [{}, {'fn.test': {'value': {'nullP2Str': {'wrap': False, 'nest': [0, []]}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Str_16(self):
        request = [{}, {'fn.test': {'value': {'nullP2Str': {'wrap': False, 'nest': [0, {}]}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Str_17(self):
        request = [{'ok': {'value': {'nullP2Str': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Str', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Str_18(self):
        request = [{'ok': {'value': {'nullP2Str': 0}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Str', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Str_19(self):
        request = [{'ok': {'value': {'nullP2Str': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Str', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Str_20(self):
        request = [{'ok': {'value': {'nullP2Str': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Str', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Str_21(self):
        request = [{'ok': {'value': {'nullP2Str': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Str', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Str_22(self):
        request = [{'ok': {'value': {'nullP2Str': {'wrap': 0, 'nest': [0]}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Str_23(self):
        request = [{'ok': {'value': {'nullP2Str': {'wrap': '', 'nest': [0]}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Str_24(self):
        request = [{'ok': {'value': {'nullP2Str': {'wrap': [], 'nest': [0]}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Str_25(self):
        request = [{'ok': {'value': {'nullP2Str': {'wrap': {}, 'nest': [0]}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Str_26(self):
        request = [{'ok': {'value': {'nullP2Str': {'wrap': False, 'nest': [0, False]}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Str_27(self):
        request = [{'ok': {'value': {'nullP2Str': {'wrap': False, 'nest': [0, 0.1]}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Str_28(self):
        request = [{'ok': {'value': {'nullP2Str': {'wrap': False, 'nest': [0, '']}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Str_29(self):
        request = [{'ok': {'value': {'nullP2Str': {'wrap': False, 'nest': [0, []]}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Str_30(self):
        request = [{'ok': {'value': {'nullP2Str': {'wrap': False, 'nest': [0, {}]}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Str_0(self):
        request = [{'ok': {'value': {'arrP2Str': []}}}, {'fn.test': {'value': {'arrP2Str': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrP2Str': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Str_1(self):
        request = [{'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}]}}}, {'fn.test': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Str_2(self):
        request = [{'ok': {'value': {'arrP2Str': [{'wrap': True, 'nest': [1]}]}}}, {'fn.test': {'value': {'arrP2Str': [{'wrap': True, 'nest': [1]}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrP2Str': [{'wrap': True, 'nest': [1]}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Str_3(self):
        request = [{'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': True, 'nest': [1]}]}}}, {'fn.test': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': True, 'nest': [1]}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': True, 'nest': [1]}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Str_4(self):
        request = [{}, {'fn.test': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, None]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Str[1]', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Str_5(self):
        request = [{}, {'fn.test': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Str_6(self):
        request = [{}, {'fn.test': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, 0]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Str_7(self):
        request = [{}, {'fn.test': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Str_8(self):
        request = [{}, {'fn.test': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Str_9(self):
        request = [{}, {'fn.test': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Str_10(self):
        request = [{}, {'fn.test': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': 0, 'nest': [0]}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Str[1].wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Str_11(self):
        request = [{}, {'fn.test': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': '', 'nest': [0]}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Str[1].wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Str_12(self):
        request = [{}, {'fn.test': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': [], 'nest': [0]}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Str[1].wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Str_13(self):
        request = [{}, {'fn.test': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': {}, 'nest': [0]}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Str[1].wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Str_14(self):
        request = [{}, {'fn.test': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, False]}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Str_15(self):
        request = [{}, {'fn.test': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, 0.1]}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Str_16(self):
        request = [{}, {'fn.test': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, '']}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Str_17(self):
        request = [{}, {'fn.test': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, []]}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Str_18(self):
        request = [{}, {'fn.test': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, {}]}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Str_19(self):
        request = [{'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, None]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Str[1]', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Str_20(self):
        request = [{'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Str_21(self):
        request = [{'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, 0]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Str_22(self):
        request = [{'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Str_23(self):
        request = [{'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Str_24(self):
        request = [{'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Str_25(self):
        request = [{'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': 0, 'nest': [0]}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Str[1].wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Str_26(self):
        request = [{'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': '', 'nest': [0]}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Str[1].wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Str_27(self):
        request = [{'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': [], 'nest': [0]}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Str[1].wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Str_28(self):
        request = [{'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': {}, 'nest': [0]}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Str[1].wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Str_29(self):
        request = [{'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, False]}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Str_30(self):
        request = [{'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, 0.1]}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Str_31(self):
        request = [{'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, '']}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Str_32(self):
        request = [{'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, []]}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Str_33(self):
        request = [{'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, {}]}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Str_0(self):
        request = [{'ok': {'value': {'arrNullP2Str': []}}}, {'fn.test': {'value': {'arrNullP2Str': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullP2Str': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Str_1(self):
        request = [{'ok': {'value': {'arrNullP2Str': [None]}}}, {'fn.test': {'value': {'arrNullP2Str': [None]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullP2Str': [None]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Str_2(self):
        request = [{'ok': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}]}}}, {'fn.test': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Str_3(self):
        request = [{'ok': {'value': {'arrNullP2Str': [{'wrap': True, 'nest': [1]}]}}}, {'fn.test': {'value': {'arrNullP2Str': [{'wrap': True, 'nest': [1]}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullP2Str': [{'wrap': True, 'nest': [1]}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Str_4(self):
        request = [{'ok': {'value': {'arrNullP2Str': [None, {'wrap': False, 'nest': [0]}, {'wrap': True, 'nest': [1]}]}}}, {'fn.test': {'value': {'arrNullP2Str': [None, {'wrap': False, 'nest': [0]}, {'wrap': True, 'nest': [1]}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullP2Str': [None, {'wrap': False, 'nest': [0]}, {'wrap': True, 'nest': [1]}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Str_5(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Str_6(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, 0]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Str_7(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Str_8(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Str_9(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Str_10(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': 0, 'nest': [0]}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Str[1].wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Str_11(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': '', 'nest': [0]}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Str[1].wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Str_12(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': [], 'nest': [0]}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Str[1].wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Str_13(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': {}, 'nest': [0]}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Str[1].wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Str_14(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, False]}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Str_15(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, 0.1]}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Str_16(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, '']}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Str_17(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, []]}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Str_18(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, {}]}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Str_19(self):
        request = [{'ok': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Str_20(self):
        request = [{'ok': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, 0]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Str_21(self):
        request = [{'ok': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Str_22(self):
        request = [{'ok': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Str_23(self):
        request = [{'ok': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Str_24(self):
        request = [{'ok': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': 0, 'nest': [0]}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Str[1].wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Str_25(self):
        request = [{'ok': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': '', 'nest': [0]}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Str[1].wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Str_26(self):
        request = [{'ok': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': [], 'nest': [0]}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Str[1].wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Str_27(self):
        request = [{'ok': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': {}, 'nest': [0]}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Str[1].wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Str_28(self):
        request = [{'ok': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, False]}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Str_29(self):
        request = [{'ok': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, 0.1]}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Str_30(self):
        request = [{'ok': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, '']}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Str_31(self):
        request = [{'ok': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, []]}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Str_32(self):
        request = [{'ok': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, {}]}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Str_0(self):
        request = [{'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}}}}}, {'fn.test': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}}}}}]
        expected_response = [{}, {'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Str_1(self):
        request = [{'ok': {'value': {'objP2Str': {'a': {'wrap': True, 'nest': [1]}}}}}, {'fn.test': {'value': {'objP2Str': {'a': {'wrap': True, 'nest': [1]}}}}}]
        expected_response = [{}, {'ok': {'value': {'objP2Str': {'a': {'wrap': True, 'nest': [1]}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Str_2(self):
        request = [{'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': True, 'nest': [1]}}}}}, {'fn.test': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': True, 'nest': [1]}}}}}]
        expected_response = [{}, {'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': True, 'nest': [1]}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Str_3(self):
        request = [{}, {'fn.test': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Str{b}', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Str_4(self):
        request = [{}, {'fn.test': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Str_5(self):
        request = [{}, {'fn.test': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Str_6(self):
        request = [{}, {'fn.test': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Str_7(self):
        request = [{}, {'fn.test': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Str_8(self):
        request = [{}, {'fn.test': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Str_9(self):
        request = [{}, {'fn.test': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': 0, 'nest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Str{b}.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Str_10(self):
        request = [{}, {'fn.test': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': '', 'nest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Str{b}.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Str_11(self):
        request = [{}, {'fn.test': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': [], 'nest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Str{b}.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Str_12(self):
        request = [{}, {'fn.test': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': {}, 'nest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Str{b}.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Str_13(self):
        request = [{}, {'fn.test': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, False]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Str_14(self):
        request = [{}, {'fn.test': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, 0.1]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Str_15(self):
        request = [{}, {'fn.test': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, '']}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Str_16(self):
        request = [{}, {'fn.test': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, []]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Str_17(self):
        request = [{}, {'fn.test': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, {}]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Str_18(self):
        request = [{'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Str{b}', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Str_19(self):
        request = [{'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Str_20(self):
        request = [{'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Str_21(self):
        request = [{'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Str_22(self):
        request = [{'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Str_23(self):
        request = [{'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Str_24(self):
        request = [{'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': 0, 'nest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Str{b}.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Str_25(self):
        request = [{'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': '', 'nest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Str{b}.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Str_26(self):
        request = [{'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': [], 'nest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Str{b}.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Str_27(self):
        request = [{'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': {}, 'nest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Str{b}.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Str_28(self):
        request = [{'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, False]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Str_29(self):
        request = [{'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, 0.1]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Str_30(self):
        request = [{'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, '']}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Str_31(self):
        request = [{'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, []]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Str_32(self):
        request = [{'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, {}]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Str_0(self):
        request = [{'ok': {'value': {'objNullP2Str': {'a': None}}}}, {'fn.test': {'value': {'objNullP2Str': {'a': None}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullP2Str': {'a': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Str_1(self):
        request = [{'ok': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}}}}}, {'fn.test': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Str_2(self):
        request = [{'ok': {'value': {'objNullP2Str': {'a': {'wrap': True, 'nest': [1]}}}}}, {'fn.test': {'value': {'objNullP2Str': {'a': {'wrap': True, 'nest': [1]}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullP2Str': {'a': {'wrap': True, 'nest': [1]}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Str_3(self):
        request = [{'ok': {'value': {'objNullP2Str': {'a': None, 'b': {'wrap': False, 'nest': [0]}, 'c': {'wrap': True, 'nest': [1]}}}}}, {'fn.test': {'value': {'objNullP2Str': {'a': None, 'b': {'wrap': False, 'nest': [0]}, 'c': {'wrap': True, 'nest': [1]}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullP2Str': {'a': None, 'b': {'wrap': False, 'nest': [0]}, 'c': {'wrap': True, 'nest': [1]}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Str_4(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Str_5(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Str_6(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Str_7(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Str_8(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Str_9(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': 0, 'nest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Str{b}.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Str_10(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': '', 'nest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Str{b}.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Str_11(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': [], 'nest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Str{b}.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Str_12(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': {}, 'nest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Str{b}.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Str_13(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, False]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Str_14(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, 0.1]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Str_15(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, '']}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Str_16(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, []]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Str_17(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, {}]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Str_18(self):
        request = [{'ok': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Str_19(self):
        request = [{'ok': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Str_20(self):
        request = [{'ok': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Str_21(self):
        request = [{'ok': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Str_22(self):
        request = [{'ok': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Str_23(self):
        request = [{'ok': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': 0, 'nest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Str{b}.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Str_24(self):
        request = [{'ok': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': '', 'nest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Str{b}.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Str_25(self):
        request = [{'ok': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': [], 'nest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Str{b}.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Str_26(self):
        request = [{'ok': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': {}, 'nest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Str{b}.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Str_27(self):
        request = [{'ok': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, False]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Str_28(self):
        request = [{'ok': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, 0.1]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Str_29(self):
        request = [{'ok': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, '']}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Str_30(self):
        request = [{'ok': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, []]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Str_31(self):
        request = [{'ok': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, {}]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Str_0(self):
        request = [{'ok': {'value': {'pStrP2Str': {'wrap': {'wrap': False, 'nest': [0]}}}}}, {'fn.test': {'value': {'pStrP2Str': {'wrap': {'wrap': False, 'nest': [0]}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrP2Str': {'wrap': {'wrap': False, 'nest': [0]}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Str_1(self):
        request = [{'ok': {'value': {'pStrP2Str': {'wrap': {'wrap': True, 'nest': [1]}}}}}, {'fn.test': {'value': {'pStrP2Str': {'wrap': {'wrap': True, 'nest': [1]}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrP2Str': {'wrap': {'wrap': True, 'nest': [1]}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Str_2(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Str': {'wrap': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Str.wrap', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Str_3(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Str': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Str_4(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Str': {'wrap': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Str_5(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Str': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Str_6(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Str': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Str_7(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Str': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Str_8(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Str': {'wrap': {'wrap': 0, 'nest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Str.wrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Str_9(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Str': {'wrap': {'wrap': '', 'nest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Str.wrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Str_10(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Str': {'wrap': {'wrap': [], 'nest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Str.wrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Str_11(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Str': {'wrap': {'wrap': {}, 'nest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Str.wrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Str_12(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Str': {'wrap': {'wrap': False, 'nest': [0, False]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Str_13(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Str': {'wrap': {'wrap': False, 'nest': [0, 0.1]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Str_14(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Str': {'wrap': {'wrap': False, 'nest': [0, '']}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Str_15(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Str': {'wrap': {'wrap': False, 'nest': [0, []]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Str_16(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Str': {'wrap': {'wrap': False, 'nest': [0, {}]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Str_17(self):
        request = [{'ok': {'value': {'pStrP2Str': {'wrap': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Str.wrap', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Str_18(self):
        request = [{'ok': {'value': {'pStrP2Str': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Str_19(self):
        request = [{'ok': {'value': {'pStrP2Str': {'wrap': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Str_20(self):
        request = [{'ok': {'value': {'pStrP2Str': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Str_21(self):
        request = [{'ok': {'value': {'pStrP2Str': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Str_22(self):
        request = [{'ok': {'value': {'pStrP2Str': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Str_23(self):
        request = [{'ok': {'value': {'pStrP2Str': {'wrap': {'wrap': 0, 'nest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Str.wrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Str_24(self):
        request = [{'ok': {'value': {'pStrP2Str': {'wrap': {'wrap': '', 'nest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Str.wrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Str_25(self):
        request = [{'ok': {'value': {'pStrP2Str': {'wrap': {'wrap': [], 'nest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Str.wrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Str_26(self):
        request = [{'ok': {'value': {'pStrP2Str': {'wrap': {'wrap': {}, 'nest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Str.wrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Str_27(self):
        request = [{'ok': {'value': {'pStrP2Str': {'wrap': {'wrap': False, 'nest': [0, False]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Str_28(self):
        request = [{'ok': {'value': {'pStrP2Str': {'wrap': {'wrap': False, 'nest': [0, 0.1]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Str_29(self):
        request = [{'ok': {'value': {'pStrP2Str': {'wrap': {'wrap': False, 'nest': [0, '']}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Str_30(self):
        request = [{'ok': {'value': {'pStrP2Str': {'wrap': {'wrap': False, 'nest': [0, []]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Str_31(self):
        request = [{'ok': {'value': {'pStrP2Str': {'wrap': {'wrap': False, 'nest': [0, {}]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Str_0(self):
        request = [{'ok': {'value': {'pStrNullP2Str': {'wrap': None}}}}, {'fn.test': {'value': {'pStrNullP2Str': {'wrap': None}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullP2Str': {'wrap': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Str_1(self):
        request = [{'ok': {'value': {'pStrNullP2Str': {'wrap': {'wrap': False, 'nest': [0]}}}}}, {'fn.test': {'value': {'pStrNullP2Str': {'wrap': {'wrap': False, 'nest': [0]}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullP2Str': {'wrap': {'wrap': False, 'nest': [0]}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Str_2(self):
        request = [{'ok': {'value': {'pStrNullP2Str': {'wrap': {'wrap': True, 'nest': [1]}}}}}, {'fn.test': {'value': {'pStrNullP2Str': {'wrap': {'wrap': True, 'nest': [1]}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullP2Str': {'wrap': {'wrap': True, 'nest': [1]}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Str_3(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Str': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Str_4(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Str': {'wrap': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Str_5(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Str': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Str_6(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Str': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Str_7(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Str': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Str_8(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Str': {'wrap': {'wrap': 0, 'nest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Str.wrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Str_9(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Str': {'wrap': {'wrap': '', 'nest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Str.wrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Str_10(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Str': {'wrap': {'wrap': [], 'nest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Str.wrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Str_11(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Str': {'wrap': {'wrap': {}, 'nest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Str.wrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Str_12(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Str': {'wrap': {'wrap': False, 'nest': [0, False]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Str_13(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Str': {'wrap': {'wrap': False, 'nest': [0, 0.1]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Str_14(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Str': {'wrap': {'wrap': False, 'nest': [0, '']}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Str_15(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Str': {'wrap': {'wrap': False, 'nest': [0, []]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Str_16(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Str': {'wrap': {'wrap': False, 'nest': [0, {}]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Str_17(self):
        request = [{'ok': {'value': {'pStrNullP2Str': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Str_18(self):
        request = [{'ok': {'value': {'pStrNullP2Str': {'wrap': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Str_19(self):
        request = [{'ok': {'value': {'pStrNullP2Str': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Str_20(self):
        request = [{'ok': {'value': {'pStrNullP2Str': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Str_21(self):
        request = [{'ok': {'value': {'pStrNullP2Str': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Str_22(self):
        request = [{'ok': {'value': {'pStrNullP2Str': {'wrap': {'wrap': 0, 'nest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Str.wrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Str_23(self):
        request = [{'ok': {'value': {'pStrNullP2Str': {'wrap': {'wrap': '', 'nest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Str.wrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Str_24(self):
        request = [{'ok': {'value': {'pStrNullP2Str': {'wrap': {'wrap': [], 'nest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Str.wrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Str_25(self):
        request = [{'ok': {'value': {'pStrNullP2Str': {'wrap': {'wrap': {}, 'nest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Str.wrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Str_26(self):
        request = [{'ok': {'value': {'pStrNullP2Str': {'wrap': {'wrap': False, 'nest': [0, False]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Str_27(self):
        request = [{'ok': {'value': {'pStrNullP2Str': {'wrap': {'wrap': False, 'nest': [0, 0.1]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Str_28(self):
        request = [{'ok': {'value': {'pStrNullP2Str': {'wrap': {'wrap': False, 'nest': [0, '']}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Str_29(self):
        request = [{'ok': {'value': {'pStrNullP2Str': {'wrap': {'wrap': False, 'nest': [0, []]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Str_30(self):
        request = [{'ok': {'value': {'pStrNullP2Str': {'wrap': {'wrap': False, 'nest': [0, {}]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Str_0(self):
        request = [{'ok': {'value': {'pEnumP2Str': {'one': {}}}}}, {'fn.test': {'value': {'pEnumP2Str': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumP2Str': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Str_1(self):
        request = [{'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0]}}}}}}, {'fn.test': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0]}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0]}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Str_2(self):
        request = [{'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': True, 'nest': [1]}}}}}}, {'fn.test': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': True, 'nest': [1]}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': True, 'nest': [1]}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Str_3(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Str': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Str.two.ewrap', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Str_4(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Str': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Str_5(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Str': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Str_6(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Str': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Str_7(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Str': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Str_8(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Str': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Str_9(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': 0, 'nest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Str.two.ewrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Str_10(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': '', 'nest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Str.two.ewrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Str_11(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': [], 'nest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Str.two.ewrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Str_12(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': {}, 'nest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Str.two.ewrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Str_13(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, False]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Str_14(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, 0.1]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Str_15(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, '']}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Str_16(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, []]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Str_17(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, {}]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Str_18(self):
        request = [{'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': None}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Str.two.ewrap', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Str_19(self):
        request = [{'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Str_20(self):
        request = [{'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Str_21(self):
        request = [{'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Str_22(self):
        request = [{'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Str_23(self):
        request = [{'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Str_24(self):
        request = [{'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': 0, 'nest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Str.two.ewrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Str_25(self):
        request = [{'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': '', 'nest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Str.two.ewrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Str_26(self):
        request = [{'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': [], 'nest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Str.two.ewrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Str_27(self):
        request = [{'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': {}, 'nest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Str.two.ewrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Str_28(self):
        request = [{'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, False]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Str_29(self):
        request = [{'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, 0.1]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Str_30(self):
        request = [{'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, '']}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Str_31(self):
        request = [{'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, []]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Str_32(self):
        request = [{'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, {}]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Str_0(self):
        request = [{'ok': {'value': {'pEnumNullP2Str': {'one': {}}}}}, {'fn.test': {'value': {'pEnumNullP2Str': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullP2Str': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Str_1(self):
        request = [{'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': None}}}}}, {'fn.test': {'value': {'pEnumNullP2Str': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': None}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Str_2(self):
        request = [{'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0]}}}}}}, {'fn.test': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0]}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0]}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Str_3(self):
        request = [{'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': True, 'nest': [1]}}}}}}, {'fn.test': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': True, 'nest': [1]}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': True, 'nest': [1]}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Str_4(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Str': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Str_5(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Str': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Str_6(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Str': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Str_7(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Str': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Str_8(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Str': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Str_9(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': 0, 'nest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Str.two.ewrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Str_10(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': '', 'nest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Str.two.ewrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Str_11(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': [], 'nest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Str.two.ewrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Str_12(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': {}, 'nest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Str.two.ewrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Str_13(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, False]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Str_14(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, 0.1]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Str_15(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, '']}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Str_16(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, []]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Str_17(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, {}]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Str_18(self):
        request = [{'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Str_19(self):
        request = [{'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Str_20(self):
        request = [{'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Str_21(self):
        request = [{'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Str_22(self):
        request = [{'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Str_23(self):
        request = [{'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': 0, 'nest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Str.two.ewrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Str_24(self):
        request = [{'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': '', 'nest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Str.two.ewrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Str_25(self):
        request = [{'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': [], 'nest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Str.two.ewrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Str_26(self):
        request = [{'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': {}, 'nest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Str.two.ewrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Str_27(self):
        request = [{'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, False]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Str_28(self):
        request = [{'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, 0.1]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Str_29(self):
        request = [{'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, '']}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Str_30(self):
        request = [{'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, []]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Str_31(self):
        request = [{'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, {}]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Enum_0(self):
        request = [{'ok': {'value': {'p2Enum': {'two': {'ewrap': False, 'enest': [0]}}}}}, {'fn.test': {'value': {'p2Enum': {'two': {'ewrap': False, 'enest': [0]}}}}}]
        expected_response = [{}, {'ok': {'value': {'p2Enum': {'two': {'ewrap': False, 'enest': [0]}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Enum_1(self):
        request = [{'ok': {'value': {'p2Enum': {'two': {'ewrap': True, 'enest': [1]}}}}}, {'fn.test': {'value': {'p2Enum': {'two': {'ewrap': True, 'enest': [1]}}}}}]
        expected_response = [{}, {'ok': {'value': {'p2Enum': {'two': {'ewrap': True, 'enest': [1]}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Enum_2(self):
        request = [{}, {'fn.test': {'value': {'p2Enum': None}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Enum', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Enum_3(self):
        request = [{}, {'fn.test': {'value': {'p2Enum': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Enum', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Enum_4(self):
        request = [{}, {'fn.test': {'value': {'p2Enum': 0}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Enum', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Enum_5(self):
        request = [{}, {'fn.test': {'value': {'p2Enum': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Enum', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Enum_6(self):
        request = [{}, {'fn.test': {'value': {'p2Enum': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Enum', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Enum_7(self):
        request = [{}, {'fn.test': {'value': {'p2Enum': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Enum', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Enum_8(self):
        request = [{}, {'fn.test': {'value': {'p2Enum': {'two': {'ewrap': 0, 'enest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Enum_9(self):
        request = [{}, {'fn.test': {'value': {'p2Enum': {'two': {'ewrap': '', 'enest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Enum_10(self):
        request = [{}, {'fn.test': {'value': {'p2Enum': {'two': {'ewrap': [], 'enest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Enum_11(self):
        request = [{}, {'fn.test': {'value': {'p2Enum': {'two': {'ewrap': {}, 'enest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Enum_12(self):
        request = [{}, {'fn.test': {'value': {'p2Enum': {'two': {'ewrap': False, 'enest': [0, False]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Enum_13(self):
        request = [{}, {'fn.test': {'value': {'p2Enum': {'two': {'ewrap': False, 'enest': [0, 0.1]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Enum_14(self):
        request = [{}, {'fn.test': {'value': {'p2Enum': {'two': {'ewrap': False, 'enest': [0, '']}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Enum_15(self):
        request = [{}, {'fn.test': {'value': {'p2Enum': {'two': {'ewrap': False, 'enest': [0, []]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Enum_16(self):
        request = [{}, {'fn.test': {'value': {'p2Enum': {'two': {'ewrap': False, 'enest': [0, {}]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Enum_17(self):
        request = [{'ok': {'value': {'p2Enum': None}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Enum', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Enum_18(self):
        request = [{'ok': {'value': {'p2Enum': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Enum', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Enum_19(self):
        request = [{'ok': {'value': {'p2Enum': 0}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Enum', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Enum_20(self):
        request = [{'ok': {'value': {'p2Enum': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Enum', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Enum_21(self):
        request = [{'ok': {'value': {'p2Enum': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Enum', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Enum_22(self):
        request = [{'ok': {'value': {'p2Enum': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Enum', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Enum_23(self):
        request = [{'ok': {'value': {'p2Enum': {'two': {'ewrap': 0, 'enest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Enum_24(self):
        request = [{'ok': {'value': {'p2Enum': {'two': {'ewrap': '', 'enest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Enum_25(self):
        request = [{'ok': {'value': {'p2Enum': {'two': {'ewrap': [], 'enest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Enum_26(self):
        request = [{'ok': {'value': {'p2Enum': {'two': {'ewrap': {}, 'enest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Enum_27(self):
        request = [{'ok': {'value': {'p2Enum': {'two': {'ewrap': False, 'enest': [0, False]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Enum_28(self):
        request = [{'ok': {'value': {'p2Enum': {'two': {'ewrap': False, 'enest': [0, 0.1]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Enum_29(self):
        request = [{'ok': {'value': {'p2Enum': {'two': {'ewrap': False, 'enest': [0, '']}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Enum_30(self):
        request = [{'ok': {'value': {'p2Enum': {'two': {'ewrap': False, 'enest': [0, []]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testP2Enum_31(self):
        request = [{'ok': {'value': {'p2Enum': {'two': {'ewrap': False, 'enest': [0, {}]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Enum_0(self):
        request = [{'ok': {'value': {'nullP2Enum': None}}}, {'fn.test': {'value': {'nullP2Enum': None}}}]
        expected_response = [{}, {'ok': {'value': {'nullP2Enum': None}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Enum_1(self):
        request = [{'ok': {'value': {'nullP2Enum': {'two': {'ewrap': False, 'enest': [0]}}}}}, {'fn.test': {'value': {'nullP2Enum': {'two': {'ewrap': False, 'enest': [0]}}}}}]
        expected_response = [{}, {'ok': {'value': {'nullP2Enum': {'two': {'ewrap': False, 'enest': [0]}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Enum_2(self):
        request = [{'ok': {'value': {'nullP2Enum': {'two': {'ewrap': True, 'enest': [1]}}}}}, {'fn.test': {'value': {'nullP2Enum': {'two': {'ewrap': True, 'enest': [1]}}}}}]
        expected_response = [{}, {'ok': {'value': {'nullP2Enum': {'two': {'ewrap': True, 'enest': [1]}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Enum_3(self):
        request = [{}, {'fn.test': {'value': {'nullP2Enum': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Enum', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Enum_4(self):
        request = [{}, {'fn.test': {'value': {'nullP2Enum': 0}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Enum', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Enum_5(self):
        request = [{}, {'fn.test': {'value': {'nullP2Enum': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Enum', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Enum_6(self):
        request = [{}, {'fn.test': {'value': {'nullP2Enum': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Enum', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Enum_7(self):
        request = [{}, {'fn.test': {'value': {'nullP2Enum': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Enum', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Enum_8(self):
        request = [{}, {'fn.test': {'value': {'nullP2Enum': {'two': {'ewrap': 0, 'enest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Enum_9(self):
        request = [{}, {'fn.test': {'value': {'nullP2Enum': {'two': {'ewrap': '', 'enest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Enum_10(self):
        request = [{}, {'fn.test': {'value': {'nullP2Enum': {'two': {'ewrap': [], 'enest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Enum_11(self):
        request = [{}, {'fn.test': {'value': {'nullP2Enum': {'two': {'ewrap': {}, 'enest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Enum_12(self):
        request = [{}, {'fn.test': {'value': {'nullP2Enum': {'two': {'ewrap': False, 'enest': [0, False]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Enum_13(self):
        request = [{}, {'fn.test': {'value': {'nullP2Enum': {'two': {'ewrap': False, 'enest': [0, 0.1]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Enum_14(self):
        request = [{}, {'fn.test': {'value': {'nullP2Enum': {'two': {'ewrap': False, 'enest': [0, '']}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Enum_15(self):
        request = [{}, {'fn.test': {'value': {'nullP2Enum': {'two': {'ewrap': False, 'enest': [0, []]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Enum_16(self):
        request = [{}, {'fn.test': {'value': {'nullP2Enum': {'two': {'ewrap': False, 'enest': [0, {}]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Enum_17(self):
        request = [{'ok': {'value': {'nullP2Enum': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Enum', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Enum_18(self):
        request = [{'ok': {'value': {'nullP2Enum': 0}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Enum', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Enum_19(self):
        request = [{'ok': {'value': {'nullP2Enum': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Enum', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Enum_20(self):
        request = [{'ok': {'value': {'nullP2Enum': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Enum', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Enum_21(self):
        request = [{'ok': {'value': {'nullP2Enum': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Enum', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Enum_22(self):
        request = [{'ok': {'value': {'nullP2Enum': {'two': {'ewrap': 0, 'enest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Enum_23(self):
        request = [{'ok': {'value': {'nullP2Enum': {'two': {'ewrap': '', 'enest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Enum_24(self):
        request = [{'ok': {'value': {'nullP2Enum': {'two': {'ewrap': [], 'enest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Enum_25(self):
        request = [{'ok': {'value': {'nullP2Enum': {'two': {'ewrap': {}, 'enest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Enum_26(self):
        request = [{'ok': {'value': {'nullP2Enum': {'two': {'ewrap': False, 'enest': [0, False]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Enum_27(self):
        request = [{'ok': {'value': {'nullP2Enum': {'two': {'ewrap': False, 'enest': [0, 0.1]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Enum_28(self):
        request = [{'ok': {'value': {'nullP2Enum': {'two': {'ewrap': False, 'enest': [0, '']}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Enum_29(self):
        request = [{'ok': {'value': {'nullP2Enum': {'two': {'ewrap': False, 'enest': [0, []]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testNullableP2Enum_30(self):
        request = [{'ok': {'value': {'nullP2Enum': {'two': {'ewrap': False, 'enest': [0, {}]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Enum_0(self):
        request = [{'ok': {'value': {'arrP2Enum': []}}}, {'fn.test': {'value': {'arrP2Enum': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrP2Enum': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Enum_1(self):
        request = [{'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}]}}}, {'fn.test': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Enum_2(self):
        request = [{'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': True, 'enest': [1]}}]}}}, {'fn.test': {'value': {'arrP2Enum': [{'two': {'ewrap': True, 'enest': [1]}}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': True, 'enest': [1]}}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Enum_3(self):
        request = [{'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': True, 'enest': [1]}}]}}}, {'fn.test': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': True, 'enest': [1]}}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': True, 'enest': [1]}}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Enum_4(self):
        request = [{}, {'fn.test': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, None]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Enum[1]', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Enum_5(self):
        request = [{}, {'fn.test': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Enum_6(self):
        request = [{}, {'fn.test': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, 0]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Enum_7(self):
        request = [{}, {'fn.test': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Enum_8(self):
        request = [{}, {'fn.test': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Enum_9(self):
        request = [{}, {'fn.test': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Enum_10(self):
        request = [{}, {'fn.test': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': 0, 'enest': [0]}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Enum[1].two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Enum_11(self):
        request = [{}, {'fn.test': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': '', 'enest': [0]}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Enum[1].two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Enum_12(self):
        request = [{}, {'fn.test': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': [], 'enest': [0]}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Enum[1].two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Enum_13(self):
        request = [{}, {'fn.test': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': {}, 'enest': [0]}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Enum[1].two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Enum_14(self):
        request = [{}, {'fn.test': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, False]}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Enum_15(self):
        request = [{}, {'fn.test': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, 0.1]}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Enum_16(self):
        request = [{}, {'fn.test': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, '']}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Enum_17(self):
        request = [{}, {'fn.test': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, []]}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Enum_18(self):
        request = [{}, {'fn.test': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, {}]}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Enum_19(self):
        request = [{'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, None]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Enum[1]', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Enum_20(self):
        request = [{'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Enum_21(self):
        request = [{'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, 0]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Enum_22(self):
        request = [{'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Enum_23(self):
        request = [{'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Enum_24(self):
        request = [{'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Enum_25(self):
        request = [{'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': 0, 'enest': [0]}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Enum[1].two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Enum_26(self):
        request = [{'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': '', 'enest': [0]}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Enum[1].two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Enum_27(self):
        request = [{'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': [], 'enest': [0]}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Enum[1].two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Enum_28(self):
        request = [{'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': {}, 'enest': [0]}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Enum[1].two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Enum_29(self):
        request = [{'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, False]}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Enum_30(self):
        request = [{'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, 0.1]}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Enum_31(self):
        request = [{'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, '']}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Enum_32(self):
        request = [{'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, []]}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayP2Enum_33(self):
        request = [{'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, {}]}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Enum_0(self):
        request = [{'ok': {'value': {'arrNullP2Enum': []}}}, {'fn.test': {'value': {'arrNullP2Enum': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullP2Enum': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Enum_1(self):
        request = [{'ok': {'value': {'arrNullP2Enum': [None]}}}, {'fn.test': {'value': {'arrNullP2Enum': [None]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullP2Enum': [None]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Enum_2(self):
        request = [{'ok': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}]}}}, {'fn.test': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Enum_3(self):
        request = [{'ok': {'value': {'arrNullP2Enum': [{'two': {'ewrap': True, 'enest': [1]}}]}}}, {'fn.test': {'value': {'arrNullP2Enum': [{'two': {'ewrap': True, 'enest': [1]}}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullP2Enum': [{'two': {'ewrap': True, 'enest': [1]}}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Enum_4(self):
        request = [{'ok': {'value': {'arrNullP2Enum': [None, {'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': True, 'enest': [1]}}]}}}, {'fn.test': {'value': {'arrNullP2Enum': [None, {'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': True, 'enest': [1]}}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullP2Enum': [None, {'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': True, 'enest': [1]}}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Enum_5(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Enum_6(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, 0]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Enum_7(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Enum_8(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Enum_9(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Enum_10(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': 0, 'enest': [0]}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Enum[1].two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Enum_11(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': '', 'enest': [0]}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Enum[1].two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Enum_12(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': [], 'enest': [0]}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Enum[1].two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Enum_13(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': {}, 'enest': [0]}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Enum[1].two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Enum_14(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, False]}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Enum_15(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, 0.1]}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Enum_16(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, '']}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Enum_17(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, []]}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Enum_18(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, {}]}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Enum_19(self):
        request = [{'ok': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Enum_20(self):
        request = [{'ok': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, 0]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Enum_21(self):
        request = [{'ok': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Enum_22(self):
        request = [{'ok': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Enum_23(self):
        request = [{'ok': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Enum_24(self):
        request = [{'ok': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': 0, 'enest': [0]}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Enum[1].two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Enum_25(self):
        request = [{'ok': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': '', 'enest': [0]}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Enum[1].two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Enum_26(self):
        request = [{'ok': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': [], 'enest': [0]}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Enum[1].two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Enum_27(self):
        request = [{'ok': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': {}, 'enest': [0]}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Enum[1].two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Enum_28(self):
        request = [{'ok': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, False]}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Enum_29(self):
        request = [{'ok': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, 0.1]}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Enum_30(self):
        request = [{'ok': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, '']}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Enum_31(self):
        request = [{'ok': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, []]}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testArrayNullP2Enum_32(self):
        request = [{'ok': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, {}]}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Enum_0(self):
        request = [{'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}}}}}, {'fn.test': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}}}}}]
        expected_response = [{}, {'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Enum_1(self):
        request = [{'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': True, 'enest': [1]}}}}}}, {'fn.test': {'value': {'objP2Enum': {'a': {'two': {'ewrap': True, 'enest': [1]}}}}}}]
        expected_response = [{}, {'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': True, 'enest': [1]}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Enum_2(self):
        request = [{'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': True, 'enest': [1]}}}}}}, {'fn.test': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': True, 'enest': [1]}}}}}}]
        expected_response = [{}, {'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': True, 'enest': [1]}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Enum_3(self):
        request = [{}, {'fn.test': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Enum{b}', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Enum_4(self):
        request = [{}, {'fn.test': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Enum_5(self):
        request = [{}, {'fn.test': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Enum_6(self):
        request = [{}, {'fn.test': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Enum_7(self):
        request = [{}, {'fn.test': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Enum_8(self):
        request = [{}, {'fn.test': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Enum_9(self):
        request = [{}, {'fn.test': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': 0, 'enest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Enum{b}.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Enum_10(self):
        request = [{}, {'fn.test': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': '', 'enest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Enum{b}.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Enum_11(self):
        request = [{}, {'fn.test': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': [], 'enest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Enum{b}.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Enum_12(self):
        request = [{}, {'fn.test': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': {}, 'enest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Enum{b}.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Enum_13(self):
        request = [{}, {'fn.test': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, False]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Enum_14(self):
        request = [{}, {'fn.test': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, 0.1]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Enum_15(self):
        request = [{}, {'fn.test': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, '']}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Enum_16(self):
        request = [{}, {'fn.test': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, []]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Enum_17(self):
        request = [{}, {'fn.test': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, {}]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Enum_18(self):
        request = [{'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Enum{b}', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Enum_19(self):
        request = [{'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Enum_20(self):
        request = [{'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Enum_21(self):
        request = [{'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Enum_22(self):
        request = [{'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Enum_23(self):
        request = [{'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Enum_24(self):
        request = [{'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': 0, 'enest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Enum{b}.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Enum_25(self):
        request = [{'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': '', 'enest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Enum{b}.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Enum_26(self):
        request = [{'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': [], 'enest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Enum{b}.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Enum_27(self):
        request = [{'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': {}, 'enest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Enum{b}.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Enum_28(self):
        request = [{'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, False]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Enum_29(self):
        request = [{'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, 0.1]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Enum_30(self):
        request = [{'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, '']}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Enum_31(self):
        request = [{'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, []]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectP2Enum_32(self):
        request = [{'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, {}]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Enum_0(self):
        request = [{'ok': {'value': {'objNullP2Enum': {'a': None}}}}, {'fn.test': {'value': {'objNullP2Enum': {'a': None}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullP2Enum': {'a': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Enum_1(self):
        request = [{'ok': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}}}}}, {'fn.test': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Enum_2(self):
        request = [{'ok': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': True, 'enest': [1]}}}}}}, {'fn.test': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': True, 'enest': [1]}}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': True, 'enest': [1]}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Enum_3(self):
        request = [{'ok': {'value': {'objNullP2Enum': {'a': None, 'b': {'two': {'ewrap': False, 'enest': [0]}}, 'c': {'two': {'ewrap': True, 'enest': [1]}}}}}}, {'fn.test': {'value': {'objNullP2Enum': {'a': None, 'b': {'two': {'ewrap': False, 'enest': [0]}}, 'c': {'two': {'ewrap': True, 'enest': [1]}}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullP2Enum': {'a': None, 'b': {'two': {'ewrap': False, 'enest': [0]}}, 'c': {'two': {'ewrap': True, 'enest': [1]}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Enum_4(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Enum_5(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Enum_6(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Enum_7(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Enum_8(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Enum_9(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': 0, 'enest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Enum{b}.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Enum_10(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': '', 'enest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Enum{b}.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Enum_11(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': [], 'enest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Enum{b}.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Enum_12(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': {}, 'enest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Enum{b}.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Enum_13(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, False]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Enum_14(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, 0.1]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Enum_15(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, '']}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Enum_16(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, []]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Enum_17(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, {}]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Enum_18(self):
        request = [{'ok': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Enum_19(self):
        request = [{'ok': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Enum_20(self):
        request = [{'ok': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Enum_21(self):
        request = [{'ok': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Enum_22(self):
        request = [{'ok': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Enum_23(self):
        request = [{'ok': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': 0, 'enest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Enum{b}.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Enum_24(self):
        request = [{'ok': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': '', 'enest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Enum{b}.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Enum_25(self):
        request = [{'ok': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': [], 'enest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Enum{b}.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Enum_26(self):
        request = [{'ok': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': {}, 'enest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Enum{b}.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Enum_27(self):
        request = [{'ok': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, False]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Enum_28(self):
        request = [{'ok': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, 0.1]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Enum_29(self):
        request = [{'ok': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, '']}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Enum_30(self):
        request = [{'ok': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, []]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testObjectNullP2Enum_31(self):
        request = [{'ok': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, {}]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Enum_0(self):
        request = [{'ok': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0]}}}}}}, {'fn.test': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0]}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0]}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Enum_1(self):
        request = [{'ok': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': True, 'enest': [1]}}}}}}, {'fn.test': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': True, 'enest': [1]}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': True, 'enest': [1]}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Enum_2(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Enum': {'wrap': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Enum.wrap', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Enum_3(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Enum': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Enum_4(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Enum': {'wrap': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Enum_5(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Enum': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Enum_6(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Enum': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Enum_7(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Enum': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Enum_8(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': 0, 'enest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Enum.wrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Enum_9(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': '', 'enest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Enum.wrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Enum_10(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': [], 'enest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Enum.wrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Enum_11(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': {}, 'enest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Enum.wrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Enum_12(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, False]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Enum_13(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, 0.1]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Enum_14(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, '']}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Enum_15(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, []]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Enum_16(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, {}]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Enum_17(self):
        request = [{'ok': {'value': {'pStrP2Enum': {'wrap': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Enum.wrap', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Enum_18(self):
        request = [{'ok': {'value': {'pStrP2Enum': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Enum_19(self):
        request = [{'ok': {'value': {'pStrP2Enum': {'wrap': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Enum_20(self):
        request = [{'ok': {'value': {'pStrP2Enum': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Enum_21(self):
        request = [{'ok': {'value': {'pStrP2Enum': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Enum_22(self):
        request = [{'ok': {'value': {'pStrP2Enum': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Enum_23(self):
        request = [{'ok': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': 0, 'enest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Enum.wrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Enum_24(self):
        request = [{'ok': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': '', 'enest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Enum.wrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Enum_25(self):
        request = [{'ok': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': [], 'enest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Enum.wrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Enum_26(self):
        request = [{'ok': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': {}, 'enest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Enum.wrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Enum_27(self):
        request = [{'ok': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, False]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Enum_28(self):
        request = [{'ok': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, 0.1]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Enum_29(self):
        request = [{'ok': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, '']}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Enum_30(self):
        request = [{'ok': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, []]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructP2Enum_31(self):
        request = [{'ok': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, {}]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Enum_0(self):
        request = [{'ok': {'value': {'pStrNullP2Enum': {'wrap': None}}}}, {'fn.test': {'value': {'pStrNullP2Enum': {'wrap': None}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullP2Enum': {'wrap': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Enum_1(self):
        request = [{'ok': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0]}}}}}}, {'fn.test': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0]}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0]}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Enum_2(self):
        request = [{'ok': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': True, 'enest': [1]}}}}}}, {'fn.test': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': True, 'enest': [1]}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': True, 'enest': [1]}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Enum_3(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Enum': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Enum_4(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Enum': {'wrap': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Enum_5(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Enum': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Enum_6(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Enum': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Enum_7(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Enum': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Enum_8(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': 0, 'enest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Enum.wrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Enum_9(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': '', 'enest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Enum.wrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Enum_10(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': [], 'enest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Enum.wrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Enum_11(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': {}, 'enest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Enum.wrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Enum_12(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, False]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Enum_13(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, 0.1]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Enum_14(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, '']}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Enum_15(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, []]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Enum_16(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, {}]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Enum_17(self):
        request = [{'ok': {'value': {'pStrNullP2Enum': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Enum_18(self):
        request = [{'ok': {'value': {'pStrNullP2Enum': {'wrap': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Enum_19(self):
        request = [{'ok': {'value': {'pStrNullP2Enum': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Enum_20(self):
        request = [{'ok': {'value': {'pStrNullP2Enum': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Enum_21(self):
        request = [{'ok': {'value': {'pStrNullP2Enum': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Enum_22(self):
        request = [{'ok': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': 0, 'enest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Enum.wrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Enum_23(self):
        request = [{'ok': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': '', 'enest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Enum.wrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Enum_24(self):
        request = [{'ok': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': [], 'enest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Enum.wrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Enum_25(self):
        request = [{'ok': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': {}, 'enest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Enum.wrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Enum_26(self):
        request = [{'ok': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, False]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Enum_27(self):
        request = [{'ok': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, 0.1]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Enum_28(self):
        request = [{'ok': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, '']}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Enum_29(self):
        request = [{'ok': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, []]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPStructNullP2Enum_30(self):
        request = [{'ok': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, {}]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Enum_0(self):
        request = [{'ok': {'value': {'pEnumP2Enum': {'one': {}}}}}, {'fn.test': {'value': {'pEnumP2Enum': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumP2Enum': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Enum_1(self):
        request = [{'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0]}}}}}}}, {'fn.test': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0]}}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0]}}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Enum_2(self):
        request = [{'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': True, 'enest': [1]}}}}}}}, {'fn.test': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': True, 'enest': [1]}}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': True, 'enest': [1]}}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Enum_3(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Enum': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Enum.two.ewrap', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Enum_4(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Enum': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Enum_5(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Enum': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Enum_6(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Enum': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Enum_7(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Enum': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Enum_8(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Enum': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Enum_9(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': 0, 'enest': [0]}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Enum.two.ewrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Enum_10(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': '', 'enest': [0]}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Enum.two.ewrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Enum_11(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': [], 'enest': [0]}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Enum.two.ewrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Enum_12(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': {}, 'enest': [0]}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Enum.two.ewrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Enum_13(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, False]}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Enum_14(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, 0.1]}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Enum_15(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, '']}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Enum_16(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, []]}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Enum_17(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, {}]}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Enum_18(self):
        request = [{'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': None}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Enum.two.ewrap', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Enum_19(self):
        request = [{'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Enum_20(self):
        request = [{'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Enum_21(self):
        request = [{'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Enum_22(self):
        request = [{'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Enum_23(self):
        request = [{'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Enum_24(self):
        request = [{'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': 0, 'enest': [0]}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Enum.two.ewrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Enum_25(self):
        request = [{'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': '', 'enest': [0]}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Enum.two.ewrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Enum_26(self):
        request = [{'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': [], 'enest': [0]}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Enum.two.ewrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Enum_27(self):
        request = [{'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': {}, 'enest': [0]}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Enum.two.ewrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Enum_28(self):
        request = [{'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, False]}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Enum_29(self):
        request = [{'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, 0.1]}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Enum_30(self):
        request = [{'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, '']}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Enum_31(self):
        request = [{'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, []]}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumP2Enum_32(self):
        request = [{'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, {}]}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Enum_0(self):
        request = [{'ok': {'value': {'pEnumNullP2Enum': {'one': {}}}}}, {'fn.test': {'value': {'pEnumNullP2Enum': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullP2Enum': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Enum_1(self):
        request = [{'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': None}}}}}, {'fn.test': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': None}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Enum_2(self):
        request = [{'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0]}}}}}}}, {'fn.test': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0]}}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0]}}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Enum_3(self):
        request = [{'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': True, 'enest': [1]}}}}}}}, {'fn.test': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': True, 'enest': [1]}}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': True, 'enest': [1]}}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Enum_4(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Enum_5(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Enum_6(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Enum_7(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Enum_8(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Enum_9(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': 0, 'enest': [0]}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Enum.two.ewrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Enum_10(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': '', 'enest': [0]}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Enum.two.ewrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Enum_11(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': [], 'enest': [0]}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Enum.two.ewrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Enum_12(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': {}, 'enest': [0]}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Enum.two.ewrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Enum_13(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, False]}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Enum_14(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, 0.1]}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Enum_15(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, '']}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Enum_16(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, []]}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Enum_17(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, {}]}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Enum_18(self):
        request = [{'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Enum_19(self):
        request = [{'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Enum_20(self):
        request = [{'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Enum_21(self):
        request = [{'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Enum_22(self):
        request = [{'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Enum_23(self):
        request = [{'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': 0, 'enest': [0]}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Enum.two.ewrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Enum_24(self):
        request = [{'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': '', 'enest': [0]}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Enum.two.ewrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Enum_25(self):
        request = [{'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': [], 'enest': [0]}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Enum.two.ewrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Enum_26(self):
        request = [{'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': {}, 'enest': [0]}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Enum.two.ewrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Enum_27(self):
        request = [{'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, False]}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Enum_28(self):
        request = [{'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, 0.1]}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Enum_29(self):
        request = [{'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, '']}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Enum_30(self):
        request = [{'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, []]}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPEnumNullP2Enum_31(self):
        request = [{'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, {}]}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPdStr_0(self):
        request = [{'ok': {'value': {'pdStr': {'dwrap': {'wrap': False}}}}}, {'fn.test': {'value': {'pdStr': {'dwrap': {'wrap': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'pdStr': {'dwrap': {'wrap': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testPing_0(self):
        request = [{}, {'fn._ping': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testCallId_0(self):
        request = [{'_id': 'abcd'}, {'fn._ping': {}}]
        expected_response = [{'_id': 'abcd'}, {'ok': {}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testCallId_1(self):
        request = [{'_id': 1234}, {'fn._ping': {}}]
        expected_response = [{'_id': 1234}, {'ok': {}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testUnknownFunction_0(self):
        request = [{}, {'fn.notFound': {}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.notFound', 'reason': {'FunctionUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testErrors_0(self):
        request = [{'result': {'errorExample': {'property': 'a'}}}, {'fn.test': {}}]
        expected_response = [{}, {'errorExample': {'property': 'a'}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testErrors_1(self):
        request = [{'result': {'errorExample': {'wrong': 'a'}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'errorExample.property', 'reason': {'RequiredStructFieldMissing': {}}}, {'path': 'errorExample.wrong', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testErrors_2(self):
        request = [{'result': {'errorUnknown': {'property': 'a'}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'errorUnknown', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testSelectFields_0(self):
        request = [{'_sel': {'struct.ExStruct': ['optional']}, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'ok': {'value': {'struct': {'optional': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testSelectFields_1(self):
        request = [{'_sel': {'struct.ExStruct': ['optional']}, 'ok': {'value': {'struct': {'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'ok': {'value': {'struct': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testSelectFields_2(self):
        request = [{'_sel': {'struct.ExStruct': ['optional', 'required']}, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'ok': {'value': {'struct': {'optional': False, 'required': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testSelectFields_3(self):
        request = [{'_sel': {'struct.ExStruct': ['optional', 'required']}, 'ok': {'value': {'struct': {'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'ok': {'value': {'struct': {'required': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testSelectFields_4(self):
        request = [{'_sel': {'struct.ExStruct': []}, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'ok': {'value': {'struct': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testSelectFields_5(self):
        request = [{'_sel': {'struct.ExStruct': []}, 'ok': {'value': {'struct': {'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'ok': {'value': {'struct': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testSelectFields_6(self):
        request = [{'_sel': {'->.ok': []}, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testSelectFields_7(self):
        request = [{'_sel': {'fn.example': ['optional']}, 'ok': {'value': {'fn': {'required': True, 'optional': True}}}}, {'fn.test': {}}]
        expected_response = [{}, {'ok': {'value': {'fn': {'optional': True}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testSelectFields_8(self):
        request = [{'_sel': {'struct.ExStruct': ['optional']}, 'ok': {'value': {'arrStruct': [{'required': False}, {'optional': False, 'required': False}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'ok': {'value': {'arrStruct': [{}, {'optional': False}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testSelectFields_9(self):
        request = [{'_sel': {'struct.ExStruct': ['optional']}, 'ok': {'value': {'objStruct': {'a': {'required': False}, 'b': {'optional': False, 'required': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'ok': {'value': {'objStruct': {'a': {}, 'b': {'optional': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testSelectFields_10(self):
        request = [{'_sel': False, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_sel}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testSelectFields_11(self):
        request = [{'_sel': 0, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_sel}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testSelectFields_12(self):
        request = [{'_sel': '', 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_sel}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testSelectFields_13(self):
        request = [{'_sel': [], 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_sel}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testSelectFields_14(self):
        request = [{'_sel': {'': []}, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_sel}{}', 'reason': {'SelectHeaderKeyMustBeStructReference': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testSelectFields_15(self):
        request = [{'_sel': {'notStruct': []}, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_sel}{notStruct}', 'reason': {'SelectHeaderKeyMustBeStructReference': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testSelectFields_16(self):
        request = [{'_sel': {'struct.Unknown': []}, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_sel}{struct.Unknown}', 'reason': {'StructNameUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testSelectFields_17(self):
        request = [{'_sel': {'struct.ExStruct': False}, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_sel}{struct.ExStruct}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testSelectFields_18(self):
        request = [{'_sel': {'struct.ExStruct': 0}, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_sel}{struct.ExStruct}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testSelectFields_19(self):
        request = [{'_sel': {'struct.ExStruct': ''}, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_sel}{struct.ExStruct}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testSelectFields_20(self):
        request = [{'_sel': {'struct.ExStruct': {}}, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_sel}{struct.ExStruct}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testSelectFields_21(self):
        request = [{'_sel': {'struct.ExStruct': [False]}, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_sel}{struct.ExStruct}[0]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testSelectFields_22(self):
        request = [{'_sel': {'struct.ExStruct': [0]}, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_sel}{struct.ExStruct}[0]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testSelectFields_23(self):
        request = [{'_sel': {'struct.ExStruct': [[]]}, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_sel}{struct.ExStruct}[0]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testSelectFields_24(self):
        request = [{'_sel': {'struct.ExStruct': [{}]}, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_sel}{struct.ExStruct}[0]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testSelectFields_25(self):
        request = [{'_sel': {'struct.ExStruct': ['unknownField']}, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_sel}{struct.ExStruct}[0]', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testSelectFields_26(self):
        request = [{'_sel': {'struct.ExStruct': ['']}, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_sel}{struct.ExStruct}[0]', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testUnsafe_0(self):
        request = [{'_unsafe': True, 'result': {'ok': {'value': {'bool': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'ok': {'value': {'bool': 0}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testUnsafe_1(self):
        request = [{'_unsafe': True, 'result': {'errorExample': {'wrong': 'a'}}}, {'fn.test': {}}]
        expected_response = [{}, {'errorExample': {'wrong': 'a'}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_testApplicationFailure_0(self):
        request = [{'throw': True}, {'fn.test': {}}]
        expected_response = [{}, {'_errorUnknown': {}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)

    def test_client_api_0(self):
        request = [{}, {'fn._api': {}}]
        expected_response = [{}, {'ok': {'api': [{'///': [' This is the example schema. It is focussed on outlining type edge cases for use in tests. ', '                                                                                           ', ' As a reminder:                                                                            ', ' - ! means optional field                                                                  ', ' - ? means nullable type                                                                   '], 'info.Example': {}}, {'///': ' A struct value demonstrating all common type permutations. ', 'struct.Value': {'bool!': ['boolean'], 'nullBool!': ['boolean?'], 'arrBool!': ['array', ['boolean']], 'arrNullBool!': ['array', ['boolean?']], 'objBool!': ['object', ['boolean']], 'objNullBool!': ['object', ['boolean?']], 'pStrBool!': ['struct<1>.PStr', ['boolean']], 'pStrNullBool!': ['struct<1>.PStr', ['boolean?']], 'pEnumBool!': ['enum<1>.PEnum', ['boolean']], 'pEnumNullBool!': ['enum<1>.PEnum', ['boolean?']], 'int!': ['integer'], 'nullInt!': ['integer?'], 'arrInt!': ['array', ['integer']], 'arrNullInt!': ['array', ['integer?']], 'objInt!': ['object', ['integer']], 'objNullInt!': ['object', ['integer?']], 'pStrInt!': ['struct<1>.PStr', ['integer']], 'pStrNullInt!': ['struct<1>.PStr', ['integer?']], 'pEnumInt!': ['enum<1>.PEnum', ['integer']], 'pEnumNullInt!': ['enum<1>.PEnum', ['integer?']], 'num!': ['number'], 'nullNum!': ['number?'], 'arrNum!': ['array', ['number']], 'arrNullNum!': ['array', ['number?']], 'objNum!': ['object', ['number']], 'objNullNum!': ['object', ['number?']], 'pStrNum!': ['struct<1>.PStr', ['number']], 'pStrNullNum!': ['struct<1>.PStr', ['number?']], 'pEnumNum!': ['enum<1>.PEnum', ['number']], 'pEnumNullNum!': ['enum<1>.PEnum', ['number?']], 'str!': ['string'], 'nullStr!': ['string?'], 'arrStr!': ['array', ['string']], 'arrNullStr!': ['array', ['string?']], 'objStr!': ['object', ['string']], 'objNullStr!': ['object', ['string?']], 'pStrStr!': ['struct<1>.PStr', ['string']], 'pStrNullStr!': ['struct<1>.PStr', ['string?']], 'pEnumStr!': ['enum<1>.PEnum', ['string']], 'pEnumNullStr!': ['enum<1>.PEnum', ['string?']], 'arr!': ['array', ['any']], 'nullArr!': ['array?', ['any']], 'arrArr!': ['array', ['array', ['any']]], 'arrNullArr!': ['array', ['array?', ['any']]], 'objArr!': ['object', ['array', ['any']]], 'objNullArr!': ['object', ['array?', ['any']]], 'pStrArr!': ['struct<1>.PStr', ['array', ['any']]], 'pStrNullArr!': ['struct<1>.PStr', ['array?', ['any']]], 'pEnumArr!': ['enum<1>.PEnum', ['array', ['any']]], 'pEnumNullArr!': ['enum<1>.PEnum', ['array?', ['any']]], 'obj!': ['object', ['any']], 'nullObj!': ['object?', ['any']], 'arrObj!': ['array', ['object', ['any']]], 'arrNullObj!': ['array', ['object?', ['any']]], 'objObj!': ['object', ['object', ['any']]], 'objNullObj!': ['object', ['object?', ['any']]], 'pStrObj!': ['struct<1>.PStr', ['object', ['any']]], 'pStrNullObj!': ['struct<1>.PStr', ['object?', ['any']]], 'pEnumObj!': ['enum<1>.PEnum', ['object', ['any']]], 'pEnumNullObj!': ['enum<1>.PEnum', ['object?', ['any']]], 'any!': ['any'], 'nullAny!': ['any?'], 'arrAny!': ['array', ['any']], 'arrNullAny!': ['array', ['any?']], 'objAny!': ['object', ['any']], 'objNullAny!': ['object', ['any?']], 'pStrAny!': ['struct<1>.PStr', ['any']], 'pStrNullAny!': ['struct<1>.PStr', ['any?']], 'pEnumAny!': ['enum<1>.PEnum', ['any']], 'pEnumNullAny!': ['enum<1>.PEnum', ['any?']], 'struct!': ['struct.ExStruct'], 'nullStruct!': ['struct.ExStruct?'], 'arrStruct!': ['array', ['struct.ExStruct']], 'arrNullStruct!': ['array', ['struct.ExStruct?']], 'objStruct!': ['object', ['struct.ExStruct']], 'objNullStruct!': ['object', ['struct.ExStruct?']], 'pStrStruct!': ['struct<1>.PStr', ['struct.ExStruct']], 'pStrNullStruct!': ['struct<1>.PStr', ['struct.ExStruct?']], 'pEnumStruct!': ['enum<1>.PEnum', ['struct.ExStruct']], 'pEnumNullStruct!': ['enum<1>.PEnum', ['struct.ExStruct?']], 'enum!': ['enum.ExEnum'], 'nullEnum!': ['enum.ExEnum?'], 'arrEnum!': ['array', ['enum.ExEnum']], 'arrNullEnum!': ['array', ['enum.ExEnum?']], 'objEnum!': ['object', ['enum.ExEnum']], 'objNullEnum!': ['object', ['enum.ExEnum?']], 'pStrEnum!': ['struct<1>.PStr', ['enum.ExEnum']], 'pStrNullEnum!': ['struct<1>.PStr', ['enum.ExEnum?']], 'pEnumEnum!': ['enum<1>.PEnum', ['enum.ExEnum']], 'pEnumNullEnum!': ['enum<1>.PEnum', ['enum.ExEnum?']], 'fn!': ['fn.example'], 'nullFn!': ['fn.example?'], 'arrFn!': ['array', ['fn.example']], 'arrNullFn!': ['array', ['fn.example?']], 'objFn!': ['object', ['fn.example']], 'objNullFn!': ['object', ['fn.example?']], 'pStrFn!': ['struct<1>.PStr', ['fn.example']], 'pStrNullFn!': ['struct<1>.PStr', ['fn.example?']], 'pEnumFn!': ['enum<1>.PEnum', ['fn.example']], 'pEnumNullFn!': ['enum<1>.PEnum', ['fn.example?']], 'p2Str!': ['struct<2>.P2Str', ['boolean'], ['integer']], 'nullP2Str!': ['struct<2>.P2Str?', ['boolean'], ['integer']], 'arrP2Str!': ['array', ['struct<2>.P2Str', ['boolean'], ['integer']]], 'arrNullP2Str!': ['array', ['struct<2>.P2Str?', ['boolean'], ['integer']]], 'objP2Str!': ['object', ['struct<2>.P2Str', ['boolean'], ['integer']]], 'objNullP2Str!': ['object', ['struct<2>.P2Str?', ['boolean'], ['integer']]], 'pStrP2Str!': ['struct<1>.PStr', ['struct<2>.P2Str', ['boolean'], ['integer']]], 'pStrNullP2Str!': ['struct<1>.PStr', ['struct<2>.P2Str?', ['boolean'], ['integer']]], 'pEnumP2Str!': ['enum<1>.PEnum', ['struct<2>.P2Str', ['boolean'], ['integer']]], 'pEnumNullP2Str!': ['enum<1>.PEnum', ['struct<2>.P2Str?', ['boolean'], ['integer']]], 'p2Enum!': ['enum<2>.P2Enum', ['boolean'], ['integer']], 'nullP2Enum!': ['enum<2>.P2Enum?', ['boolean'], ['integer']], 'arrP2Enum!': ['array', ['enum<2>.P2Enum', ['boolean'], ['integer']]], 'arrNullP2Enum!': ['array', ['enum<2>.P2Enum?', ['boolean'], ['integer']]], 'objP2Enum!': ['object', ['enum<2>.P2Enum', ['boolean'], ['integer']]], 'objNullP2Enum!': ['object', ['enum<2>.P2Enum?', ['boolean'], ['integer']]], 'pStrP2Enum!': ['struct<1>.PStr', ['enum<2>.P2Enum', ['boolean'], ['integer']]], 'pStrNullP2Enum!': ['struct<1>.PStr', ['enum<2>.P2Enum?', ['boolean'], ['integer']]], 'pEnumP2Enum!': ['enum<1>.PEnum', ['enum<2>.P2Enum', ['boolean'], ['integer']]], 'pEnumNullP2Enum!': ['enum<1>.PEnum', ['enum<2>.P2Enum?', ['boolean'], ['integer']]], 'pdStr!': ['struct<1>.PdStr', ['struct<1>.PStr', ['boolean']]]}}, {'///': [' The main struct example.                                                                ', '                                                                                         ', ' The [required] field must be supplied. The optional field does not need to be supplied. '], 'struct.ExStruct': {'required': ['boolean'], 'optional!': ['boolean']}}, {'enum.ExEnum': {'one': {}, 'two': {'required': ['boolean'], 'optional!': ['boolean']}}}, {'struct<1>.PStr': {'wrap': ['T.0']}}, {'struct<1>.PdStr': {'dwrap': ['struct<1>.PStr', ['boolean']]}}, {'struct<2>.P2Str': {'wrap': ['T.0'], 'nest': ['array', ['T.1']]}}, {'enum<1>.PEnum': {'one': {}, 'two': {'ewrap': ['T.0']}}}, {'enum<2>.P2Enum': {'one': {}, 'two': {'ewrap': ['T.0'], 'enest': ['array', ['T.1']]}}}, {'///': 'An example function.', 'fn.example': {'required': ['boolean'], 'optional!': ['boolean']}, '->': {'ok': {}}}, {'fn.test': {'value!': ['struct.Value']}, '->': {'ok': {'value!': ['struct.Value']}, 'errorExample': {'property': ['string']}}}, {'///': ' Ping the server. ', 'fn._ping': {}, '->': {'ok': {}}}, {'///': ' Get the jAPI `schema` of this server. ', 'fn._api': {}, '->': {'ok': {'api': ['array', ['object', ['any']]]}}}, {'///': ' A placeholder function when the requested function is unknown. ', 'fn._unknown': {}, '->': {'ok': {}}}, {'///': ' A type. ', 'enum._Type': {'Boolean': {}, 'Integer': {}, 'Number': {}, 'String': {}, 'Array': {}, 'Object': {}, 'Unknown': {}}}, {'///': ' A reason for the validation failure in the body. ', 'enum._BodyValidationFailureReason': {'TypeUnexpected': {'expected': ['enum._Type'], 'actual': ['enum._Type']}, 'NullDisallowed': {}, 'StructFieldUnknown': {}, 'RequiredStructFieldMissing': {}, 'NumberOutOfRange': {}, 'ZeroOrManyEnumFieldsDisallowed': {}, 'EnumFieldUnknown': {}, 'ExtensionValidationFailure': {'message': ['string']}, 'FunctionUnknown': {}}}, {'///': ' A reason for the validation failure in the header. ', 'enum._HeaderValidationFailureReason': {'TypeUnexpected': {'expected': ['enum._Type'], 'actual': ['enum._Type']}, 'SelectHeaderKeyMustBeStructReference': {}, 'StructNameUnknown': {}, 'StructFieldUnknown': {}}}, {'///': ' A validation failure located at a `path` explained by a `reason`. ', 'struct._BodyValidationFailure': {'path': ['string'], 'reason': ['enum._BodyValidationFailureReason']}}, {'///': ' A validation failure located at a `path` explained by a `reason`. ', 'struct._HeaderValidationFailure': {'path': ['string'], 'reason': ['enum._HeaderValidationFailureReason']}}, {'///': [' All functions may return a validation error:                                                             ', ' - `_errorInvalidRequestHeaders`: The Headers on the Request is invalid as outlined by a list of `cases`. ', ' - `_errorInvalidRequestBody`: The Body on the Request is invalid as outlined by a list of `cases`.       ', ' - `_errorInvalidResponseBody`: The Body that the Server attempted to put on the Response is invalid as   ', '     outlined by a list of `cases.                                                                        ', ' - `_errorParseFailure`: The Request could not be parsed as a jAPI Message.                               '], 'trait._Validated': {'fn._?*': {}, '->': {'_errorUnknown': {}, '_errorInvalidRequestHeaders': {'cases': ['array', ['struct._HeaderValidationFailure']]}, '_errorInvalidRequestBody': {'cases': ['array', ['struct._BodyValidationFailure']]}, '_errorInvalidResponseBody': {'cases': ['array', ['struct._BodyValidationFailure']]}, '_errorParseFailure': {'reasons': ['array', ['string']]}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=0x01, use_client=True)


class BinaryClientTestCases(unittest.TestCase):
                              
    @classmethod
    def setUpClass(cls):
        initial_list = [0] * 10000
        cls.backdoor_results = ShareableList(initial_list)
        cls.client_backdoor_results = ShareableList(initial_list)
        cls.process = multiprocessing.Process(target=backdoor_handler, args=(path, cls.backdoor_results,))
        cls.process.start()
        cls.client_process = multiprocessing.Process(target=client_backdoor_handler, args=(path, cls.client_backdoor_results,))
        cls.client_process.start()                                                                            
        
        cls.servers = client_server.start('../../test/example.japi.json')
                              
        request = [{'_binary': True}, {'fn._ping': {}}]
        expected_response = [{}, {'ok':{}}]
        verify_case(None, request, expected_response, path, use_client=True, skip_assertion=True)
    
    @classmethod
    def tearDownClass(cls):
        cls.backdoor_results.shm.close()
        cls.backdoor_results.shm.unlink()
        cls.client_backdoor_results.shm.close()
        cls.client_backdoor_results.shm.unlink()
        cls.process.terminate()
        cls.process.join()
        cls.client_process.terminate()
        cls.client_process.join()
        for server in cls.servers:
            server.terminate()
        for server in cls.servers:
            server.wait()

    def setUp(self):
        self.__class__.backdoor_results[0] += 1
        self.__class__.client_backdoor_results[0] += 1
                        
    
    def test_binary_client_boolean_0(self):
        request = [{'ok': {'value': {'bool': False}}}, {'fn.test': {'value': {'bool': False}}}]
        expected_response = [{}, {'ok': {'value': {'bool': False}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_1(self):
        request = [{'ok': {'value': {'bool': True}}}, {'fn.test': {'value': {'bool': True}}}]
        expected_response = [{}, {'ok': {'value': {'bool': True}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_2(self):
        request = [{}, {'fn.test': {'value': {'bool': None}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.bool', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_3(self):
        request = [{}, {'fn.test': {'value': {'bool': 0}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.bool', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_4(self):
        request = [{}, {'fn.test': {'value': {'bool': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.bool', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_5(self):
        request = [{}, {'fn.test': {'value': {'bool': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.bool', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_6(self):
        request = [{}, {'fn.test': {'value': {'bool': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.bool', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_7(self):
        request = [{}, {'fn.test': {'value': {'bool': {}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.bool', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_8(self):
        request = [{'ok': {'value': {'bool': None}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.bool', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_9(self):
        request = [{'ok': {'value': {'bool': 0}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.bool', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_10(self):
        request = [{'ok': {'value': {'bool': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.bool', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_11(self):
        request = [{'ok': {'value': {'bool': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.bool', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_12(self):
        request = [{'ok': {'value': {'bool': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.bool', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_13(self):
        request = [{'ok': {'value': {'bool': {}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.bool', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_14(self):
        request = [{'ok': {'value': {'nullBool': None}}}, {'fn.test': {'value': {'nullBool': None}}}]
        expected_response = [{}, {'ok': {'value': {'nullBool': None}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_15(self):
        request = [{'ok': {'value': {'nullBool': False}}}, {'fn.test': {'value': {'nullBool': False}}}]
        expected_response = [{}, {'ok': {'value': {'nullBool': False}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_16(self):
        request = [{'ok': {'value': {'nullBool': True}}}, {'fn.test': {'value': {'nullBool': True}}}]
        expected_response = [{}, {'ok': {'value': {'nullBool': True}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_17(self):
        request = [{}, {'fn.test': {'value': {'nullBool': 0}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullBool', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_18(self):
        request = [{}, {'fn.test': {'value': {'nullBool': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullBool', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_19(self):
        request = [{}, {'fn.test': {'value': {'nullBool': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullBool', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_20(self):
        request = [{}, {'fn.test': {'value': {'nullBool': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullBool', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_21(self):
        request = [{}, {'fn.test': {'value': {'nullBool': {}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullBool', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_22(self):
        request = [{'ok': {'value': {'nullBool': 0}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullBool', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_23(self):
        request = [{'ok': {'value': {'nullBool': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullBool', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_24(self):
        request = [{'ok': {'value': {'nullBool': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullBool', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_25(self):
        request = [{'ok': {'value': {'nullBool': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullBool', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_26(self):
        request = [{'ok': {'value': {'nullBool': {}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullBool', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_27(self):
        request = [{'ok': {'value': {'arrBool': []}}}, {'fn.test': {'value': {'arrBool': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrBool': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_28(self):
        request = [{'ok': {'value': {'arrBool': [False]}}}, {'fn.test': {'value': {'arrBool': [False]}}}]
        expected_response = [{}, {'ok': {'value': {'arrBool': [False]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_29(self):
        request = [{'ok': {'value': {'arrBool': [True]}}}, {'fn.test': {'value': {'arrBool': [True]}}}]
        expected_response = [{}, {'ok': {'value': {'arrBool': [True]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_30(self):
        request = [{'ok': {'value': {'arrBool': [False, True]}}}, {'fn.test': {'value': {'arrBool': [False, True]}}}]
        expected_response = [{}, {'ok': {'value': {'arrBool': [False, True]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_31(self):
        request = [{}, {'fn.test': {'value': {'arrBool': [False, None]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrBool[1]', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_32(self):
        request = [{}, {'fn.test': {'value': {'arrBool': [False, 0]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrBool[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_33(self):
        request = [{}, {'fn.test': {'value': {'arrBool': [False, 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrBool[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_34(self):
        request = [{}, {'fn.test': {'value': {'arrBool': [False, '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrBool[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_35(self):
        request = [{}, {'fn.test': {'value': {'arrBool': [False, []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrBool[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_36(self):
        request = [{}, {'fn.test': {'value': {'arrBool': [False, {}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrBool[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_37(self):
        request = [{'ok': {'value': {'arrBool': [False, None]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrBool[1]', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_38(self):
        request = [{'ok': {'value': {'arrBool': [False, 0]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrBool[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_39(self):
        request = [{'ok': {'value': {'arrBool': [False, 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrBool[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_40(self):
        request = [{'ok': {'value': {'arrBool': [False, '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrBool[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_41(self):
        request = [{'ok': {'value': {'arrBool': [False, []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrBool[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_42(self):
        request = [{'ok': {'value': {'arrBool': [False, {}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrBool[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_43(self):
        request = [{'ok': {'value': {'arrNullBool': []}}}, {'fn.test': {'value': {'arrNullBool': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullBool': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_44(self):
        request = [{'ok': {'value': {'arrNullBool': [None]}}}, {'fn.test': {'value': {'arrNullBool': [None]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullBool': [None]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_45(self):
        request = [{'ok': {'value': {'arrNullBool': [False]}}}, {'fn.test': {'value': {'arrNullBool': [False]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullBool': [False]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_46(self):
        request = [{'ok': {'value': {'arrNullBool': [True]}}}, {'fn.test': {'value': {'arrNullBool': [True]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullBool': [True]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_47(self):
        request = [{'ok': {'value': {'arrNullBool': [None, False, True]}}}, {'fn.test': {'value': {'arrNullBool': [None, False, True]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullBool': [None, False, True]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_48(self):
        request = [{}, {'fn.test': {'value': {'arrNullBool': [False, 0]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullBool[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_49(self):
        request = [{}, {'fn.test': {'value': {'arrNullBool': [False, 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullBool[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_50(self):
        request = [{}, {'fn.test': {'value': {'arrNullBool': [False, '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullBool[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_51(self):
        request = [{}, {'fn.test': {'value': {'arrNullBool': [False, []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullBool[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_52(self):
        request = [{}, {'fn.test': {'value': {'arrNullBool': [False, {}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullBool[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_53(self):
        request = [{'ok': {'value': {'arrNullBool': [False, 0]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullBool[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_54(self):
        request = [{'ok': {'value': {'arrNullBool': [False, 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullBool[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_55(self):
        request = [{'ok': {'value': {'arrNullBool': [False, '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullBool[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_56(self):
        request = [{'ok': {'value': {'arrNullBool': [False, []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullBool[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_57(self):
        request = [{'ok': {'value': {'arrNullBool': [False, {}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullBool[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_58(self):
        request = [{'ok': {'value': {'objBool': {}}}}, {'fn.test': {'value': {'objBool': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objBool': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_59(self):
        request = [{'ok': {'value': {'objBool': {'a': False}}}}, {'fn.test': {'value': {'objBool': {'a': False}}}}]
        expected_response = [{}, {'ok': {'value': {'objBool': {'a': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_60(self):
        request = [{'ok': {'value': {'objBool': {'a': True}}}}, {'fn.test': {'value': {'objBool': {'a': True}}}}]
        expected_response = [{}, {'ok': {'value': {'objBool': {'a': True}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_61(self):
        request = [{'ok': {'value': {'objBool': {'a': False, 'b': True}}}}, {'fn.test': {'value': {'objBool': {'a': False, 'b': True}}}}]
        expected_response = [{}, {'ok': {'value': {'objBool': {'a': False, 'b': True}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_62(self):
        request = [{}, {'fn.test': {'value': {'objBool': {'a': False, 'b': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objBool{b}', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_63(self):
        request = [{}, {'fn.test': {'value': {'objBool': {'a': False, 'b': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objBool{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_64(self):
        request = [{}, {'fn.test': {'value': {'objBool': {'a': False, 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objBool{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_65(self):
        request = [{}, {'fn.test': {'value': {'objBool': {'a': False, 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objBool{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_66(self):
        request = [{}, {'fn.test': {'value': {'objBool': {'a': False, 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objBool{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_67(self):
        request = [{}, {'fn.test': {'value': {'objBool': {'a': False, 'b': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objBool{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_68(self):
        request = [{'ok': {'value': {'objBool': {'a': False, 'b': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objBool{b}', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_69(self):
        request = [{'ok': {'value': {'objBool': {'a': False, 'b': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objBool{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_70(self):
        request = [{'ok': {'value': {'objBool': {'a': False, 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objBool{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_71(self):
        request = [{'ok': {'value': {'objBool': {'a': False, 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objBool{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_72(self):
        request = [{'ok': {'value': {'objBool': {'a': False, 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objBool{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_73(self):
        request = [{'ok': {'value': {'objBool': {'a': False, 'b': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objBool{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_74(self):
        request = [{'ok': {'value': {'objNullBool': {}}}}, {'fn.test': {'value': {'objNullBool': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullBool': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_75(self):
        request = [{'ok': {'value': {'objNullBool': {'a': None}}}}, {'fn.test': {'value': {'objNullBool': {'a': None}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullBool': {'a': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_76(self):
        request = [{'ok': {'value': {'objNullBool': {'a': False}}}}, {'fn.test': {'value': {'objNullBool': {'a': False}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullBool': {'a': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_77(self):
        request = [{'ok': {'value': {'objNullBool': {'a': True}}}}, {'fn.test': {'value': {'objNullBool': {'a': True}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullBool': {'a': True}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_78(self):
        request = [{'ok': {'value': {'objNullBool': {'a': None, 'b': False, 'c': True}}}}, {'fn.test': {'value': {'objNullBool': {'a': None, 'b': False, 'c': True}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullBool': {'a': None, 'b': False, 'c': True}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_79(self):
        request = [{}, {'fn.test': {'value': {'objNullBool': {'a': False, 'b': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullBool{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_80(self):
        request = [{}, {'fn.test': {'value': {'objNullBool': {'a': False, 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullBool{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_81(self):
        request = [{}, {'fn.test': {'value': {'objNullBool': {'a': False, 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullBool{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_82(self):
        request = [{}, {'fn.test': {'value': {'objNullBool': {'a': False, 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullBool{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_83(self):
        request = [{}, {'fn.test': {'value': {'objNullBool': {'a': False, 'b': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullBool{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_84(self):
        request = [{'ok': {'value': {'objNullBool': {'a': False, 'b': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullBool{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_85(self):
        request = [{'ok': {'value': {'objNullBool': {'a': False, 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullBool{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_86(self):
        request = [{'ok': {'value': {'objNullBool': {'a': False, 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullBool{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_87(self):
        request = [{'ok': {'value': {'objNullBool': {'a': False, 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullBool{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_88(self):
        request = [{'ok': {'value': {'objNullBool': {'a': False, 'b': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullBool{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_89(self):
        request = [{'ok': {'value': {'pStrBool': {'wrap': False}}}}, {'fn.test': {'value': {'pStrBool': {'wrap': False}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrBool': {'wrap': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_90(self):
        request = [{'ok': {'value': {'pStrBool': {'wrap': True}}}}, {'fn.test': {'value': {'pStrBool': {'wrap': True}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrBool': {'wrap': True}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_91(self):
        request = [{}, {'fn.test': {'value': {'pStrBool': {'wrap': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_92(self):
        request = [{}, {'fn.test': {'value': {'pStrBool': {'wrap': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_93(self):
        request = [{}, {'fn.test': {'value': {'pStrBool': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_94(self):
        request = [{}, {'fn.test': {'value': {'pStrBool': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_95(self):
        request = [{}, {'fn.test': {'value': {'pStrBool': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_96(self):
        request = [{}, {'fn.test': {'value': {'pStrBool': {'wrap': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_97(self):
        request = [{'ok': {'value': {'pStrBool': {'wrap': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_98(self):
        request = [{'ok': {'value': {'pStrBool': {'wrap': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_99(self):
        request = [{'ok': {'value': {'pStrBool': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_100(self):
        request = [{'ok': {'value': {'pStrBool': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_101(self):
        request = [{'ok': {'value': {'pStrBool': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_102(self):
        request = [{'ok': {'value': {'pStrBool': {'wrap': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_103(self):
        request = [{'ok': {'value': {'pStrNullBool': {'wrap': None}}}}, {'fn.test': {'value': {'pStrNullBool': {'wrap': None}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullBool': {'wrap': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_104(self):
        request = [{'ok': {'value': {'pStrNullBool': {'wrap': False}}}}, {'fn.test': {'value': {'pStrNullBool': {'wrap': False}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullBool': {'wrap': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_105(self):
        request = [{'ok': {'value': {'pStrNullBool': {'wrap': True}}}}, {'fn.test': {'value': {'pStrNullBool': {'wrap': True}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullBool': {'wrap': True}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_106(self):
        request = [{}, {'fn.test': {'value': {'pStrNullBool': {'wrap': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_107(self):
        request = [{}, {'fn.test': {'value': {'pStrNullBool': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_108(self):
        request = [{}, {'fn.test': {'value': {'pStrNullBool': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_109(self):
        request = [{}, {'fn.test': {'value': {'pStrNullBool': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_110(self):
        request = [{}, {'fn.test': {'value': {'pStrNullBool': {'wrap': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_111(self):
        request = [{'ok': {'value': {'pStrNullBool': {'wrap': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_112(self):
        request = [{'ok': {'value': {'pStrNullBool': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_113(self):
        request = [{'ok': {'value': {'pStrNullBool': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_114(self):
        request = [{'ok': {'value': {'pStrNullBool': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_115(self):
        request = [{'ok': {'value': {'pStrNullBool': {'wrap': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullBool.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_116(self):
        request = [{'ok': {'value': {'pEnumBool': {'one': {}}}}}, {'fn.test': {'value': {'pEnumBool': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumBool': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_117(self):
        request = [{'ok': {'value': {'pEnumBool': {'two': {'ewrap': False}}}}}, {'fn.test': {'value': {'pEnumBool': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumBool': {'two': {'ewrap': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_118(self):
        request = [{'ok': {'value': {'pEnumBool': {'two': {'ewrap': True}}}}}, {'fn.test': {'value': {'pEnumBool': {'two': {'ewrap': True}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumBool': {'two': {'ewrap': True}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_119(self):
        request = [{}, {'fn.test': {'value': {'pEnumBool': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_120(self):
        request = [{}, {'fn.test': {'value': {'pEnumBool': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_121(self):
        request = [{}, {'fn.test': {'value': {'pEnumBool': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_122(self):
        request = [{}, {'fn.test': {'value': {'pEnumBool': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_123(self):
        request = [{}, {'fn.test': {'value': {'pEnumBool': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_124(self):
        request = [{}, {'fn.test': {'value': {'pEnumBool': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_125(self):
        request = [{'ok': {'value': {'pEnumBool': {'two': {'ewrap': None}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_126(self):
        request = [{'ok': {'value': {'pEnumBool': {'two': {'ewrap': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_127(self):
        request = [{'ok': {'value': {'pEnumBool': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_128(self):
        request = [{'ok': {'value': {'pEnumBool': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_129(self):
        request = [{'ok': {'value': {'pEnumBool': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_130(self):
        request = [{'ok': {'value': {'pEnumBool': {'two': {'ewrap': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_131(self):
        request = [{'ok': {'value': {'pEnumNullBool': {'one': {}}}}}, {'fn.test': {'value': {'pEnumNullBool': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullBool': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_132(self):
        request = [{'ok': {'value': {'pEnumNullBool': {'two': {'ewrap': None}}}}}, {'fn.test': {'value': {'pEnumNullBool': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullBool': {'two': {'ewrap': None}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_133(self):
        request = [{'ok': {'value': {'pEnumNullBool': {'two': {'ewrap': False}}}}}, {'fn.test': {'value': {'pEnumNullBool': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullBool': {'two': {'ewrap': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_134(self):
        request = [{'ok': {'value': {'pEnumNullBool': {'two': {'ewrap': True}}}}}, {'fn.test': {'value': {'pEnumNullBool': {'two': {'ewrap': True}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullBool': {'two': {'ewrap': True}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_135(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullBool': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_136(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullBool': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_137(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullBool': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_138(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullBool': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_139(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullBool': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_140(self):
        request = [{'ok': {'value': {'pEnumNullBool': {'two': {'ewrap': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_141(self):
        request = [{'ok': {'value': {'pEnumNullBool': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_142(self):
        request = [{'ok': {'value': {'pEnumNullBool': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_143(self):
        request = [{'ok': {'value': {'pEnumNullBool': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_boolean_144(self):
        request = [{'ok': {'value': {'pEnumNullBool': {'two': {'ewrap': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullBool.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_0(self):
        request = [{'ok': {'value': {'int': 0}}}, {'fn.test': {'value': {'int': 0}}}]
        expected_response = [{}, {'ok': {'value': {'int': 0}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_1(self):
        request = [{'ok': {'value': {'int': -1}}}, {'fn.test': {'value': {'int': -1}}}]
        expected_response = [{}, {'ok': {'value': {'int': -1}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_2(self):
        request = [{'ok': {'value': {'int': 1}}}, {'fn.test': {'value': {'int': 1}}}]
        expected_response = [{}, {'ok': {'value': {'int': 1}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_3(self):
        request = [{'ok': {'value': {'int': 9223372036854775807}}}, {'fn.test': {'value': {'int': 9223372036854775807}}}]
        expected_response = [{}, {'ok': {'value': {'int': 9223372036854775807}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_4(self):
        request = [{'ok': {'value': {'int': -9223372036854775808}}}, {'fn.test': {'value': {'int': -9223372036854775808}}}]
        expected_response = [{}, {'ok': {'value': {'int': -9223372036854775808}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_5(self):
        request = [{}, {'fn.test': {'value': {'int': 9223372036854775808}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.int', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_6(self):
        request = [{}, {'fn.test': {'value': {'int': -9223372036854775809}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.int', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_7(self):
        request = [{}, {'fn.test': {'value': {'int': None}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.int', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_8(self):
        request = [{}, {'fn.test': {'value': {'int': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.int', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_9(self):
        request = [{}, {'fn.test': {'value': {'int': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.int', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_10(self):
        request = [{}, {'fn.test': {'value': {'int': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.int', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_11(self):
        request = [{}, {'fn.test': {'value': {'int': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.int', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_12(self):
        request = [{}, {'fn.test': {'value': {'int': {}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.int', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_13(self):
        request = [{'ok': {'value': {'int': 9223372036854775808}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.int', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_14(self):
        request = [{'ok': {'value': {'int': -9223372036854775809}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.int', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_15(self):
        request = [{'ok': {'value': {'int': None}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.int', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_16(self):
        request = [{'ok': {'value': {'int': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.int', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_17(self):
        request = [{'ok': {'value': {'int': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.int', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_18(self):
        request = [{'ok': {'value': {'int': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.int', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_19(self):
        request = [{'ok': {'value': {'int': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.int', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_20(self):
        request = [{'ok': {'value': {'int': {}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.int', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_21(self):
        request = [{'ok': {'value': {'nullInt': None}}}, {'fn.test': {'value': {'nullInt': None}}}]
        expected_response = [{}, {'ok': {'value': {'nullInt': None}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_22(self):
        request = [{'ok': {'value': {'nullInt': 0}}}, {'fn.test': {'value': {'nullInt': 0}}}]
        expected_response = [{}, {'ok': {'value': {'nullInt': 0}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_23(self):
        request = [{'ok': {'value': {'nullInt': -1}}}, {'fn.test': {'value': {'nullInt': -1}}}]
        expected_response = [{}, {'ok': {'value': {'nullInt': -1}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_24(self):
        request = [{'ok': {'value': {'nullInt': 1}}}, {'fn.test': {'value': {'nullInt': 1}}}]
        expected_response = [{}, {'ok': {'value': {'nullInt': 1}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_25(self):
        request = [{'ok': {'value': {'nullInt': 9223372036854775807}}}, {'fn.test': {'value': {'nullInt': 9223372036854775807}}}]
        expected_response = [{}, {'ok': {'value': {'nullInt': 9223372036854775807}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_26(self):
        request = [{'ok': {'value': {'nullInt': -9223372036854775808}}}, {'fn.test': {'value': {'nullInt': -9223372036854775808}}}]
        expected_response = [{}, {'ok': {'value': {'nullInt': -9223372036854775808}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_27(self):
        request = [{}, {'fn.test': {'value': {'nullInt': 9223372036854775808}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullInt', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_28(self):
        request = [{}, {'fn.test': {'value': {'nullInt': -9223372036854775809}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullInt', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_29(self):
        request = [{}, {'fn.test': {'value': {'nullInt': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullInt', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_30(self):
        request = [{}, {'fn.test': {'value': {'nullInt': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullInt', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_31(self):
        request = [{}, {'fn.test': {'value': {'nullInt': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullInt', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_32(self):
        request = [{}, {'fn.test': {'value': {'nullInt': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullInt', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_33(self):
        request = [{}, {'fn.test': {'value': {'nullInt': {}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullInt', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_34(self):
        request = [{'ok': {'value': {'nullInt': 9223372036854775808}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullInt', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_35(self):
        request = [{'ok': {'value': {'nullInt': -9223372036854775809}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullInt', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_36(self):
        request = [{'ok': {'value': {'nullInt': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullInt', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_37(self):
        request = [{'ok': {'value': {'nullInt': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullInt', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_38(self):
        request = [{'ok': {'value': {'nullInt': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullInt', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_39(self):
        request = [{'ok': {'value': {'nullInt': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullInt', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_40(self):
        request = [{'ok': {'value': {'nullInt': {}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullInt', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_41(self):
        request = [{'ok': {'value': {'arrInt': []}}}, {'fn.test': {'value': {'arrInt': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrInt': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_42(self):
        request = [{'ok': {'value': {'arrInt': [0]}}}, {'fn.test': {'value': {'arrInt': [0]}}}]
        expected_response = [{}, {'ok': {'value': {'arrInt': [0]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_43(self):
        request = [{'ok': {'value': {'arrInt': [-1]}}}, {'fn.test': {'value': {'arrInt': [-1]}}}]
        expected_response = [{}, {'ok': {'value': {'arrInt': [-1]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_44(self):
        request = [{'ok': {'value': {'arrInt': [1]}}}, {'fn.test': {'value': {'arrInt': [1]}}}]
        expected_response = [{}, {'ok': {'value': {'arrInt': [1]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_45(self):
        request = [{'ok': {'value': {'arrInt': [9223372036854775807]}}}, {'fn.test': {'value': {'arrInt': [9223372036854775807]}}}]
        expected_response = [{}, {'ok': {'value': {'arrInt': [9223372036854775807]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_46(self):
        request = [{'ok': {'value': {'arrInt': [-9223372036854775808]}}}, {'fn.test': {'value': {'arrInt': [-9223372036854775808]}}}]
        expected_response = [{}, {'ok': {'value': {'arrInt': [-9223372036854775808]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_47(self):
        request = [{'ok': {'value': {'arrInt': [0, -1, 1, 9223372036854775807, -9223372036854775808]}}}, {'fn.test': {'value': {'arrInt': [0, -1, 1, 9223372036854775807, -9223372036854775808]}}}]
        expected_response = [{}, {'ok': {'value': {'arrInt': [0, -1, 1, 9223372036854775807, -9223372036854775808]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=231, use_client=True, use_binary=True)

    def test_binary_client_integer_48(self):
        request = [{}, {'fn.test': {'value': {'arrInt': [0, 9223372036854775808]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrInt[1]', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_49(self):
        request = [{}, {'fn.test': {'value': {'arrInt': [0, -9223372036854775809]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrInt[1]', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_50(self):
        request = [{}, {'fn.test': {'value': {'arrInt': [0, None]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrInt[1]', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_51(self):
        request = [{}, {'fn.test': {'value': {'arrInt': [0, False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrInt[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_52(self):
        request = [{}, {'fn.test': {'value': {'arrInt': [0, 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrInt[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_53(self):
        request = [{}, {'fn.test': {'value': {'arrInt': [0, '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrInt[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_54(self):
        request = [{}, {'fn.test': {'value': {'arrInt': [0, []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrInt[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_55(self):
        request = [{}, {'fn.test': {'value': {'arrInt': [0, {}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrInt[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_56(self):
        request = [{'ok': {'value': {'arrInt': [0, 9223372036854775808]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrInt[1]', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_57(self):
        request = [{'ok': {'value': {'arrInt': [0, -9223372036854775809]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrInt[1]', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_58(self):
        request = [{'ok': {'value': {'arrInt': [0, None]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrInt[1]', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_59(self):
        request = [{'ok': {'value': {'arrInt': [0, False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrInt[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_60(self):
        request = [{'ok': {'value': {'arrInt': [0, 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrInt[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_61(self):
        request = [{'ok': {'value': {'arrInt': [0, '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrInt[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_62(self):
        request = [{'ok': {'value': {'arrInt': [0, []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrInt[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_63(self):
        request = [{'ok': {'value': {'arrInt': [0, {}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrInt[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_64(self):
        request = [{'ok': {'value': {'arrNullInt': []}}}, {'fn.test': {'value': {'arrNullInt': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullInt': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_65(self):
        request = [{'ok': {'value': {'arrNullInt': [None]}}}, {'fn.test': {'value': {'arrNullInt': [None]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullInt': [None]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_66(self):
        request = [{'ok': {'value': {'arrNullInt': [0]}}}, {'fn.test': {'value': {'arrNullInt': [0]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullInt': [0]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_67(self):
        request = [{'ok': {'value': {'arrNullInt': [-1]}}}, {'fn.test': {'value': {'arrNullInt': [-1]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullInt': [-1]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_68(self):
        request = [{'ok': {'value': {'arrNullInt': [1]}}}, {'fn.test': {'value': {'arrNullInt': [1]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullInt': [1]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_69(self):
        request = [{'ok': {'value': {'arrNullInt': [9223372036854775807]}}}, {'fn.test': {'value': {'arrNullInt': [9223372036854775807]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullInt': [9223372036854775807]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_70(self):
        request = [{'ok': {'value': {'arrNullInt': [-9223372036854775808]}}}, {'fn.test': {'value': {'arrNullInt': [-9223372036854775808]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullInt': [-9223372036854775808]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_71(self):
        request = [{'ok': {'value': {'arrNullInt': [None, 0, -1, 1, 9223372036854775807, -9223372036854775808]}}}, {'fn.test': {'value': {'arrNullInt': [None, 0, -1, 1, 9223372036854775807, -9223372036854775808]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullInt': [None, 0, -1, 1, 9223372036854775807, -9223372036854775808]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=231, use_client=True, use_binary=True)

    def test_binary_client_integer_72(self):
        request = [{}, {'fn.test': {'value': {'arrNullInt': [0, 9223372036854775808]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullInt[1]', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_73(self):
        request = [{}, {'fn.test': {'value': {'arrNullInt': [0, -9223372036854775809]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullInt[1]', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_74(self):
        request = [{}, {'fn.test': {'value': {'arrNullInt': [0, False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullInt[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_75(self):
        request = [{}, {'fn.test': {'value': {'arrNullInt': [0, 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullInt[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_76(self):
        request = [{}, {'fn.test': {'value': {'arrNullInt': [0, '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullInt[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_77(self):
        request = [{}, {'fn.test': {'value': {'arrNullInt': [0, []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullInt[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_78(self):
        request = [{}, {'fn.test': {'value': {'arrNullInt': [0, {}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullInt[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_79(self):
        request = [{'ok': {'value': {'arrNullInt': [0, 9223372036854775808]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullInt[1]', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_80(self):
        request = [{'ok': {'value': {'arrNullInt': [0, -9223372036854775809]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullInt[1]', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_81(self):
        request = [{'ok': {'value': {'arrNullInt': [0, False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullInt[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_82(self):
        request = [{'ok': {'value': {'arrNullInt': [0, 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullInt[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_83(self):
        request = [{'ok': {'value': {'arrNullInt': [0, '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullInt[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_84(self):
        request = [{'ok': {'value': {'arrNullInt': [0, []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullInt[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_85(self):
        request = [{'ok': {'value': {'arrNullInt': [0, {}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullInt[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_86(self):
        request = [{'ok': {'value': {'objInt': {}}}}, {'fn.test': {'value': {'objInt': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objInt': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_87(self):
        request = [{'ok': {'value': {'objInt': {'a': 0}}}}, {'fn.test': {'value': {'objInt': {'a': 0}}}}]
        expected_response = [{}, {'ok': {'value': {'objInt': {'a': 0}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_88(self):
        request = [{'ok': {'value': {'objInt': {'a': -1}}}}, {'fn.test': {'value': {'objInt': {'a': -1}}}}]
        expected_response = [{}, {'ok': {'value': {'objInt': {'a': -1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_89(self):
        request = [{'ok': {'value': {'objInt': {'a': 1}}}}, {'fn.test': {'value': {'objInt': {'a': 1}}}}]
        expected_response = [{}, {'ok': {'value': {'objInt': {'a': 1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_90(self):
        request = [{'ok': {'value': {'objInt': {'a': 9223372036854775807}}}}, {'fn.test': {'value': {'objInt': {'a': 9223372036854775807}}}}]
        expected_response = [{}, {'ok': {'value': {'objInt': {'a': 9223372036854775807}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_91(self):
        request = [{'ok': {'value': {'objInt': {'a': -9223372036854775808}}}}, {'fn.test': {'value': {'objInt': {'a': -9223372036854775808}}}}]
        expected_response = [{}, {'ok': {'value': {'objInt': {'a': -9223372036854775808}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_92(self):
        request = [{'ok': {'value': {'objInt': {'a': 0, 'b': -1, 'c': 1, 'd': 9223372036854775807, 'e': -9223372036854775808}}}}, {'fn.test': {'value': {'objInt': {'a': 0, 'b': -1, 'c': 1, 'd': 9223372036854775807, 'e': -9223372036854775808}}}}]
        expected_response = [{}, {'ok': {'value': {'objInt': {'a': 0, 'b': -1, 'c': 1, 'd': 9223372036854775807, 'e': -9223372036854775808}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=231, use_client=True, use_binary=True)

    def test_binary_client_integer_93(self):
        request = [{}, {'fn.test': {'value': {'objInt': {'a': 0, 'b': 9223372036854775808}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objInt{b}', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_94(self):
        request = [{}, {'fn.test': {'value': {'objInt': {'a': 0, 'b': -9223372036854775809}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objInt{b}', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_95(self):
        request = [{}, {'fn.test': {'value': {'objInt': {'a': 0, 'b': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objInt{b}', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_96(self):
        request = [{}, {'fn.test': {'value': {'objInt': {'a': 0, 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objInt{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_97(self):
        request = [{}, {'fn.test': {'value': {'objInt': {'a': 0, 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objInt{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_98(self):
        request = [{}, {'fn.test': {'value': {'objInt': {'a': 0, 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objInt{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_99(self):
        request = [{}, {'fn.test': {'value': {'objInt': {'a': 0, 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objInt{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_100(self):
        request = [{}, {'fn.test': {'value': {'objInt': {'a': 0, 'b': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objInt{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_101(self):
        request = [{'ok': {'value': {'objInt': {'a': 0, 'b': 9223372036854775808}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objInt{b}', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_102(self):
        request = [{'ok': {'value': {'objInt': {'a': 0, 'b': -9223372036854775809}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objInt{b}', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_103(self):
        request = [{'ok': {'value': {'objInt': {'a': 0, 'b': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objInt{b}', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_104(self):
        request = [{'ok': {'value': {'objInt': {'a': 0, 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objInt{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_105(self):
        request = [{'ok': {'value': {'objInt': {'a': 0, 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objInt{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_106(self):
        request = [{'ok': {'value': {'objInt': {'a': 0, 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objInt{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_107(self):
        request = [{'ok': {'value': {'objInt': {'a': 0, 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objInt{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_108(self):
        request = [{'ok': {'value': {'objInt': {'a': 0, 'b': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objInt{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_109(self):
        request = [{'ok': {'value': {'objNullInt': {}}}}, {'fn.test': {'value': {'objNullInt': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullInt': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_110(self):
        request = [{'ok': {'value': {'objNullInt': {'a': None}}}}, {'fn.test': {'value': {'objNullInt': {'a': None}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullInt': {'a': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_111(self):
        request = [{'ok': {'value': {'objNullInt': {'a': 0}}}}, {'fn.test': {'value': {'objNullInt': {'a': 0}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullInt': {'a': 0}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_112(self):
        request = [{'ok': {'value': {'objNullInt': {'a': -1}}}}, {'fn.test': {'value': {'objNullInt': {'a': -1}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullInt': {'a': -1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_113(self):
        request = [{'ok': {'value': {'objNullInt': {'a': 1}}}}, {'fn.test': {'value': {'objNullInt': {'a': 1}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullInt': {'a': 1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_114(self):
        request = [{'ok': {'value': {'objNullInt': {'a': 9223372036854775807}}}}, {'fn.test': {'value': {'objNullInt': {'a': 9223372036854775807}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullInt': {'a': 9223372036854775807}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_115(self):
        request = [{'ok': {'value': {'objNullInt': {'a': -9223372036854775808}}}}, {'fn.test': {'value': {'objNullInt': {'a': -9223372036854775808}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullInt': {'a': -9223372036854775808}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_116(self):
        request = [{'ok': {'value': {'objNullInt': {'a': None, 'b': 0, 'c': -1, 'd': 1, 'e': 9223372036854775807, 'f': -9223372036854775808}}}}, {'fn.test': {'value': {'objNullInt': {'a': None, 'b': 0, 'c': -1, 'd': 1, 'e': 9223372036854775807, 'f': -9223372036854775808}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullInt': {'a': None, 'b': 0, 'c': -1, 'd': 1, 'e': 9223372036854775807, 'f': -9223372036854775808}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=231, use_client=True, use_binary=True)

    def test_binary_client_integer_117(self):
        request = [{}, {'fn.test': {'value': {'objNullInt': {'a': 0, 'b': 9223372036854775808}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullInt{b}', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_118(self):
        request = [{}, {'fn.test': {'value': {'objNullInt': {'a': 0, 'b': -9223372036854775809}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullInt{b}', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_119(self):
        request = [{}, {'fn.test': {'value': {'objNullInt': {'a': 0, 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullInt{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_120(self):
        request = [{}, {'fn.test': {'value': {'objNullInt': {'a': 0, 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullInt{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_121(self):
        request = [{}, {'fn.test': {'value': {'objNullInt': {'a': 0, 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullInt{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_122(self):
        request = [{}, {'fn.test': {'value': {'objNullInt': {'a': 0, 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullInt{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_123(self):
        request = [{}, {'fn.test': {'value': {'objNullInt': {'a': 0, 'b': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullInt{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_124(self):
        request = [{'ok': {'value': {'objNullInt': {'a': 0, 'b': 9223372036854775808}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullInt{b}', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_125(self):
        request = [{'ok': {'value': {'objNullInt': {'a': 0, 'b': -9223372036854775809}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullInt{b}', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_126(self):
        request = [{'ok': {'value': {'objNullInt': {'a': 0, 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullInt{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_127(self):
        request = [{'ok': {'value': {'objNullInt': {'a': 0, 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullInt{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_128(self):
        request = [{'ok': {'value': {'objNullInt': {'a': 0, 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullInt{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_129(self):
        request = [{'ok': {'value': {'objNullInt': {'a': 0, 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullInt{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_130(self):
        request = [{'ok': {'value': {'objNullInt': {'a': 0, 'b': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullInt{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_131(self):
        request = [{'ok': {'value': {'pStrInt': {'wrap': 0}}}}, {'fn.test': {'value': {'pStrInt': {'wrap': 0}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrInt': {'wrap': 0}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_132(self):
        request = [{'ok': {'value': {'pStrInt': {'wrap': -1}}}}, {'fn.test': {'value': {'pStrInt': {'wrap': -1}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrInt': {'wrap': -1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_133(self):
        request = [{'ok': {'value': {'pStrInt': {'wrap': 1}}}}, {'fn.test': {'value': {'pStrInt': {'wrap': 1}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrInt': {'wrap': 1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_134(self):
        request = [{'ok': {'value': {'pStrInt': {'wrap': 9223372036854775807}}}}, {'fn.test': {'value': {'pStrInt': {'wrap': 9223372036854775807}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrInt': {'wrap': 9223372036854775807}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_135(self):
        request = [{'ok': {'value': {'pStrInt': {'wrap': -9223372036854775808}}}}, {'fn.test': {'value': {'pStrInt': {'wrap': -9223372036854775808}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrInt': {'wrap': -9223372036854775808}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_136(self):
        request = [{}, {'fn.test': {'value': {'pStrInt': {'wrap': 9223372036854775808}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrInt.wrap', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_137(self):
        request = [{}, {'fn.test': {'value': {'pStrInt': {'wrap': -9223372036854775809}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrInt.wrap', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_138(self):
        request = [{}, {'fn.test': {'value': {'pStrInt': {'wrap': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_139(self):
        request = [{}, {'fn.test': {'value': {'pStrInt': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_140(self):
        request = [{}, {'fn.test': {'value': {'pStrInt': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_141(self):
        request = [{}, {'fn.test': {'value': {'pStrInt': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_142(self):
        request = [{}, {'fn.test': {'value': {'pStrInt': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_143(self):
        request = [{}, {'fn.test': {'value': {'pStrInt': {'wrap': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_144(self):
        request = [{'ok': {'value': {'pStrInt': {'wrap': 9223372036854775808}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrInt.wrap', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_145(self):
        request = [{'ok': {'value': {'pStrInt': {'wrap': -9223372036854775809}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrInt.wrap', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_146(self):
        request = [{'ok': {'value': {'pStrInt': {'wrap': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_147(self):
        request = [{'ok': {'value': {'pStrInt': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_148(self):
        request = [{'ok': {'value': {'pStrInt': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_149(self):
        request = [{'ok': {'value': {'pStrInt': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_150(self):
        request = [{'ok': {'value': {'pStrInt': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_151(self):
        request = [{'ok': {'value': {'pStrInt': {'wrap': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_152(self):
        request = [{'ok': {'value': {'pStrNullInt': {'wrap': None}}}}, {'fn.test': {'value': {'pStrNullInt': {'wrap': None}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullInt': {'wrap': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_153(self):
        request = [{'ok': {'value': {'pStrNullInt': {'wrap': 0}}}}, {'fn.test': {'value': {'pStrNullInt': {'wrap': 0}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullInt': {'wrap': 0}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_154(self):
        request = [{'ok': {'value': {'pStrNullInt': {'wrap': -1}}}}, {'fn.test': {'value': {'pStrNullInt': {'wrap': -1}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullInt': {'wrap': -1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_155(self):
        request = [{'ok': {'value': {'pStrNullInt': {'wrap': 1}}}}, {'fn.test': {'value': {'pStrNullInt': {'wrap': 1}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullInt': {'wrap': 1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_156(self):
        request = [{'ok': {'value': {'pStrNullInt': {'wrap': 9223372036854775807}}}}, {'fn.test': {'value': {'pStrNullInt': {'wrap': 9223372036854775807}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullInt': {'wrap': 9223372036854775807}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_157(self):
        request = [{'ok': {'value': {'pStrNullInt': {'wrap': -9223372036854775808}}}}, {'fn.test': {'value': {'pStrNullInt': {'wrap': -9223372036854775808}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullInt': {'wrap': -9223372036854775808}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_158(self):
        request = [{}, {'fn.test': {'value': {'pStrNullInt': {'wrap': 9223372036854775808}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullInt.wrap', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_159(self):
        request = [{}, {'fn.test': {'value': {'pStrNullInt': {'wrap': -9223372036854775809}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullInt.wrap', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_160(self):
        request = [{}, {'fn.test': {'value': {'pStrNullInt': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_161(self):
        request = [{}, {'fn.test': {'value': {'pStrNullInt': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_162(self):
        request = [{}, {'fn.test': {'value': {'pStrNullInt': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_163(self):
        request = [{}, {'fn.test': {'value': {'pStrNullInt': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_164(self):
        request = [{}, {'fn.test': {'value': {'pStrNullInt': {'wrap': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_165(self):
        request = [{'ok': {'value': {'pStrNullInt': {'wrap': 9223372036854775808}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullInt.wrap', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_166(self):
        request = [{'ok': {'value': {'pStrNullInt': {'wrap': -9223372036854775809}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullInt.wrap', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_167(self):
        request = [{'ok': {'value': {'pStrNullInt': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_168(self):
        request = [{'ok': {'value': {'pStrNullInt': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_169(self):
        request = [{'ok': {'value': {'pStrNullInt': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_170(self):
        request = [{'ok': {'value': {'pStrNullInt': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_171(self):
        request = [{'ok': {'value': {'pStrNullInt': {'wrap': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullInt.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_172(self):
        request = [{'ok': {'value': {'pEnumInt': {'one': {}}}}}, {'fn.test': {'value': {'pEnumInt': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumInt': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_173(self):
        request = [{'ok': {'value': {'pEnumInt': {'two': {'ewrap': 0}}}}}, {'fn.test': {'value': {'pEnumInt': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumInt': {'two': {'ewrap': 0}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_174(self):
        request = [{'ok': {'value': {'pEnumInt': {'two': {'ewrap': -1}}}}}, {'fn.test': {'value': {'pEnumInt': {'two': {'ewrap': -1}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumInt': {'two': {'ewrap': -1}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_175(self):
        request = [{'ok': {'value': {'pEnumInt': {'two': {'ewrap': 1}}}}}, {'fn.test': {'value': {'pEnumInt': {'two': {'ewrap': 1}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumInt': {'two': {'ewrap': 1}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_176(self):
        request = [{'ok': {'value': {'pEnumInt': {'two': {'ewrap': 9223372036854775807}}}}}, {'fn.test': {'value': {'pEnumInt': {'two': {'ewrap': 9223372036854775807}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumInt': {'two': {'ewrap': 9223372036854775807}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_177(self):
        request = [{'ok': {'value': {'pEnumInt': {'two': {'ewrap': -9223372036854775808}}}}}, {'fn.test': {'value': {'pEnumInt': {'two': {'ewrap': -9223372036854775808}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumInt': {'two': {'ewrap': -9223372036854775808}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_178(self):
        request = [{}, {'fn.test': {'value': {'pEnumInt': {'two': {'ewrap': 9223372036854775808}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumInt.two.ewrap', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_179(self):
        request = [{}, {'fn.test': {'value': {'pEnumInt': {'two': {'ewrap': -9223372036854775809}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumInt.two.ewrap', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_180(self):
        request = [{}, {'fn.test': {'value': {'pEnumInt': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_181(self):
        request = [{}, {'fn.test': {'value': {'pEnumInt': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_182(self):
        request = [{}, {'fn.test': {'value': {'pEnumInt': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_183(self):
        request = [{}, {'fn.test': {'value': {'pEnumInt': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_184(self):
        request = [{}, {'fn.test': {'value': {'pEnumInt': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_185(self):
        request = [{}, {'fn.test': {'value': {'pEnumInt': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_186(self):
        request = [{'ok': {'value': {'pEnumInt': {'two': {'ewrap': 9223372036854775808}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumInt.two.ewrap', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_187(self):
        request = [{'ok': {'value': {'pEnumInt': {'two': {'ewrap': -9223372036854775809}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumInt.two.ewrap', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_188(self):
        request = [{'ok': {'value': {'pEnumInt': {'two': {'ewrap': None}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_189(self):
        request = [{'ok': {'value': {'pEnumInt': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_190(self):
        request = [{'ok': {'value': {'pEnumInt': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_191(self):
        request = [{'ok': {'value': {'pEnumInt': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_192(self):
        request = [{'ok': {'value': {'pEnumInt': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_193(self):
        request = [{'ok': {'value': {'pEnumInt': {'two': {'ewrap': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_194(self):
        request = [{'ok': {'value': {'pEnumNullInt': {'one': {}}}}}, {'fn.test': {'value': {'pEnumNullInt': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullInt': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_195(self):
        request = [{'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': None}}}}}, {'fn.test': {'value': {'pEnumNullInt': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': None}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_196(self):
        request = [{'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': 0}}}}}, {'fn.test': {'value': {'pEnumNullInt': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': 0}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_197(self):
        request = [{'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': -1}}}}}, {'fn.test': {'value': {'pEnumNullInt': {'two': {'ewrap': -1}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': -1}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_198(self):
        request = [{'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': 1}}}}}, {'fn.test': {'value': {'pEnumNullInt': {'two': {'ewrap': 1}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': 1}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_199(self):
        request = [{'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': 9223372036854775807}}}}}, {'fn.test': {'value': {'pEnumNullInt': {'two': {'ewrap': 9223372036854775807}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': 9223372036854775807}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_200(self):
        request = [{'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': -9223372036854775808}}}}}, {'fn.test': {'value': {'pEnumNullInt': {'two': {'ewrap': -9223372036854775808}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': -9223372036854775808}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_201(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullInt': {'two': {'ewrap': 9223372036854775808}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullInt.two.ewrap', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_202(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullInt': {'two': {'ewrap': -9223372036854775809}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullInt.two.ewrap', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_203(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullInt': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_204(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullInt': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_205(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullInt': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_206(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullInt': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_207(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullInt': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_208(self):
        request = [{'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': 9223372036854775808}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullInt.two.ewrap', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_209(self):
        request = [{'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': -9223372036854775809}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullInt.two.ewrap', 'reason': {'NumberOutOfRange': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_210(self):
        request = [{'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_211(self):
        request = [{'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_212(self):
        request = [{'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_213(self):
        request = [{'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_integer_214(self):
        request = [{'ok': {'value': {'pEnumNullInt': {'two': {'ewrap': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullInt.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_0(self):
        request = [{'ok': {'value': {'num': 0}}}, {'fn.test': {'value': {'num': 0}}}]
        expected_response = [{}, {'ok': {'value': {'num': 0}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_1(self):
        request = [{'ok': {'value': {'num': -1}}}, {'fn.test': {'value': {'num': -1}}}]
        expected_response = [{}, {'ok': {'value': {'num': -1}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_2(self):
        request = [{'ok': {'value': {'num': 1}}}, {'fn.test': {'value': {'num': 1}}}]
        expected_response = [{}, {'ok': {'value': {'num': 1}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_3(self):
        request = [{'ok': {'value': {'num': -1.7976931348623157e+308}}}, {'fn.test': {'value': {'num': -1.7976931348623157e+308}}}]
        expected_response = [{}, {'ok': {'value': {'num': -1.7976931348623157e+308}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_4(self):
        request = [{'ok': {'value': {'num': -2.2250738585072014e-308}}}, {'fn.test': {'value': {'num': -2.2250738585072014e-308}}}]
        expected_response = [{}, {'ok': {'value': {'num': -2.2250738585072014e-308}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_5(self):
        request = [{'ok': {'value': {'num': 2.2250738585072014e-308}}}, {'fn.test': {'value': {'num': 2.2250738585072014e-308}}}]
        expected_response = [{}, {'ok': {'value': {'num': 2.2250738585072014e-308}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_6(self):
        request = [{'ok': {'value': {'num': 1.7976931348623157e+308}}}, {'fn.test': {'value': {'num': 1.7976931348623157e+308}}}]
        expected_response = [{}, {'ok': {'value': {'num': 1.7976931348623157e+308}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_7(self):
        request = [{'ok': {'value': {'num': -0.1}}}, {'fn.test': {'value': {'num': -0.1}}}]
        expected_response = [{}, {'ok': {'value': {'num': -0.1}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_8(self):
        request = [{'ok': {'value': {'num': 0.1}}}, {'fn.test': {'value': {'num': 0.1}}}]
        expected_response = [{}, {'ok': {'value': {'num': 0.1}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_9(self):
        request = [{}, {'fn.test': {'value': {'num': None}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.num', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_10(self):
        request = [{}, {'fn.test': {'value': {'num': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.num', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_11(self):
        request = [{}, {'fn.test': {'value': {'num': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.num', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_12(self):
        request = [{}, {'fn.test': {'value': {'num': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.num', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_13(self):
        request = [{}, {'fn.test': {'value': {'num': {}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.num', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_14(self):
        request = [{'ok': {'value': {'num': None}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.num', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_15(self):
        request = [{'ok': {'value': {'num': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.num', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_16(self):
        request = [{'ok': {'value': {'num': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.num', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_17(self):
        request = [{'ok': {'value': {'num': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.num', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_18(self):
        request = [{'ok': {'value': {'num': {}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.num', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_19(self):
        request = [{'ok': {'value': {'nullNum': None}}}, {'fn.test': {'value': {'nullNum': None}}}]
        expected_response = [{}, {'ok': {'value': {'nullNum': None}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_20(self):
        request = [{'ok': {'value': {'nullNum': 0}}}, {'fn.test': {'value': {'nullNum': 0}}}]
        expected_response = [{}, {'ok': {'value': {'nullNum': 0}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_21(self):
        request = [{'ok': {'value': {'nullNum': -1}}}, {'fn.test': {'value': {'nullNum': -1}}}]
        expected_response = [{}, {'ok': {'value': {'nullNum': -1}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_22(self):
        request = [{'ok': {'value': {'nullNum': 1}}}, {'fn.test': {'value': {'nullNum': 1}}}]
        expected_response = [{}, {'ok': {'value': {'nullNum': 1}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_23(self):
        request = [{'ok': {'value': {'nullNum': -1.7976931348623157e+308}}}, {'fn.test': {'value': {'nullNum': -1.7976931348623157e+308}}}]
        expected_response = [{}, {'ok': {'value': {'nullNum': -1.7976931348623157e+308}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_24(self):
        request = [{'ok': {'value': {'nullNum': -2.2250738585072014e-308}}}, {'fn.test': {'value': {'nullNum': -2.2250738585072014e-308}}}]
        expected_response = [{}, {'ok': {'value': {'nullNum': -2.2250738585072014e-308}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_25(self):
        request = [{'ok': {'value': {'nullNum': 2.2250738585072014e-308}}}, {'fn.test': {'value': {'nullNum': 2.2250738585072014e-308}}}]
        expected_response = [{}, {'ok': {'value': {'nullNum': 2.2250738585072014e-308}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_26(self):
        request = [{'ok': {'value': {'nullNum': 1.7976931348623157e+308}}}, {'fn.test': {'value': {'nullNum': 1.7976931348623157e+308}}}]
        expected_response = [{}, {'ok': {'value': {'nullNum': 1.7976931348623157e+308}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_27(self):
        request = [{'ok': {'value': {'nullNum': -0.1}}}, {'fn.test': {'value': {'nullNum': -0.1}}}]
        expected_response = [{}, {'ok': {'value': {'nullNum': -0.1}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_28(self):
        request = [{'ok': {'value': {'nullNum': 0.1}}}, {'fn.test': {'value': {'nullNum': 0.1}}}]
        expected_response = [{}, {'ok': {'value': {'nullNum': 0.1}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_29(self):
        request = [{}, {'fn.test': {'value': {'nullNum': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullNum', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_30(self):
        request = [{}, {'fn.test': {'value': {'nullNum': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullNum', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_31(self):
        request = [{}, {'fn.test': {'value': {'nullNum': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullNum', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_32(self):
        request = [{}, {'fn.test': {'value': {'nullNum': {}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullNum', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_33(self):
        request = [{'ok': {'value': {'nullNum': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullNum', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_34(self):
        request = [{'ok': {'value': {'nullNum': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullNum', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_35(self):
        request = [{'ok': {'value': {'nullNum': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullNum', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_36(self):
        request = [{'ok': {'value': {'nullNum': {}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullNum', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_37(self):
        request = [{'ok': {'value': {'arrNum': []}}}, {'fn.test': {'value': {'arrNum': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrNum': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_38(self):
        request = [{'ok': {'value': {'arrNum': [0]}}}, {'fn.test': {'value': {'arrNum': [0]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNum': [0]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_39(self):
        request = [{'ok': {'value': {'arrNum': [-1]}}}, {'fn.test': {'value': {'arrNum': [-1]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNum': [-1]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_40(self):
        request = [{'ok': {'value': {'arrNum': [1]}}}, {'fn.test': {'value': {'arrNum': [1]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNum': [1]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_41(self):
        request = [{'ok': {'value': {'arrNum': [-1.7976931348623157e+308]}}}, {'fn.test': {'value': {'arrNum': [-1.7976931348623157e+308]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNum': [-1.7976931348623157e+308]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_42(self):
        request = [{'ok': {'value': {'arrNum': [-2.2250738585072014e-308]}}}, {'fn.test': {'value': {'arrNum': [-2.2250738585072014e-308]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNum': [-2.2250738585072014e-308]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_43(self):
        request = [{'ok': {'value': {'arrNum': [2.2250738585072014e-308]}}}, {'fn.test': {'value': {'arrNum': [2.2250738585072014e-308]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNum': [2.2250738585072014e-308]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_44(self):
        request = [{'ok': {'value': {'arrNum': [1.7976931348623157e+308]}}}, {'fn.test': {'value': {'arrNum': [1.7976931348623157e+308]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNum': [1.7976931348623157e+308]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_45(self):
        request = [{'ok': {'value': {'arrNum': [-0.1]}}}, {'fn.test': {'value': {'arrNum': [-0.1]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNum': [-0.1]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_46(self):
        request = [{'ok': {'value': {'arrNum': [0.1]}}}, {'fn.test': {'value': {'arrNum': [0.1]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNum': [0.1]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_47(self):
        request = [{'ok': {'value': {'arrNum': [0, -1, 1, -1.7976931348623157e+308, -2.2250738585072014e-308, 2.2250738585072014e-308, 1.7976931348623157e+308, -0.1, 0.1]}}}, {'fn.test': {'value': {'arrNum': [0, -1, 1, -1.7976931348623157e+308, -2.2250738585072014e-308, 2.2250738585072014e-308, 1.7976931348623157e+308, -0.1, 0.1]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNum': [0, -1, 1, -1.7976931348623157e+308, -2.2250738585072014e-308, 2.2250738585072014e-308, 1.7976931348623157e+308, -0.1, 0.1]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=231, use_client=True, use_binary=True)

    def test_binary_client_number_48(self):
        request = [{}, {'fn.test': {'value': {'arrNum': [0, None]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNum[1]', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_49(self):
        request = [{}, {'fn.test': {'value': {'arrNum': [0, False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNum[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_50(self):
        request = [{}, {'fn.test': {'value': {'arrNum': [0, '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNum[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_51(self):
        request = [{}, {'fn.test': {'value': {'arrNum': [0, []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNum[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_52(self):
        request = [{}, {'fn.test': {'value': {'arrNum': [0, {}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNum[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_53(self):
        request = [{'ok': {'value': {'arrNum': [0, None]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNum[1]', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_54(self):
        request = [{'ok': {'value': {'arrNum': [0, False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNum[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_55(self):
        request = [{'ok': {'value': {'arrNum': [0, '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNum[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_56(self):
        request = [{'ok': {'value': {'arrNum': [0, []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNum[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_57(self):
        request = [{'ok': {'value': {'arrNum': [0, {}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNum[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_58(self):
        request = [{'ok': {'value': {'arrNullNum': []}}}, {'fn.test': {'value': {'arrNullNum': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullNum': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_59(self):
        request = [{'ok': {'value': {'arrNullNum': [None]}}}, {'fn.test': {'value': {'arrNullNum': [None]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullNum': [None]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_60(self):
        request = [{'ok': {'value': {'arrNullNum': [0]}}}, {'fn.test': {'value': {'arrNullNum': [0]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullNum': [0]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_61(self):
        request = [{'ok': {'value': {'arrNullNum': [-1]}}}, {'fn.test': {'value': {'arrNullNum': [-1]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullNum': [-1]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_62(self):
        request = [{'ok': {'value': {'arrNullNum': [1]}}}, {'fn.test': {'value': {'arrNullNum': [1]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullNum': [1]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_63(self):
        request = [{'ok': {'value': {'arrNullNum': [-1.7976931348623157e+308]}}}, {'fn.test': {'value': {'arrNullNum': [-1.7976931348623157e+308]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullNum': [-1.7976931348623157e+308]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_64(self):
        request = [{'ok': {'value': {'arrNullNum': [-2.2250738585072014e-308]}}}, {'fn.test': {'value': {'arrNullNum': [-2.2250738585072014e-308]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullNum': [-2.2250738585072014e-308]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_65(self):
        request = [{'ok': {'value': {'arrNullNum': [2.2250738585072014e-308]}}}, {'fn.test': {'value': {'arrNullNum': [2.2250738585072014e-308]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullNum': [2.2250738585072014e-308]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_66(self):
        request = [{'ok': {'value': {'arrNullNum': [1.7976931348623157e+308]}}}, {'fn.test': {'value': {'arrNullNum': [1.7976931348623157e+308]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullNum': [1.7976931348623157e+308]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_67(self):
        request = [{'ok': {'value': {'arrNullNum': [-0.1]}}}, {'fn.test': {'value': {'arrNullNum': [-0.1]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullNum': [-0.1]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_68(self):
        request = [{'ok': {'value': {'arrNullNum': [0.1]}}}, {'fn.test': {'value': {'arrNullNum': [0.1]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullNum': [0.1]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_69(self):
        request = [{'ok': {'value': {'arrNullNum': [None, 0, -1, 1, -1.7976931348623157e+308, -2.2250738585072014e-308, 2.2250738585072014e-308, 1.7976931348623157e+308, -0.1, 0.1]}}}, {'fn.test': {'value': {'arrNullNum': [None, 0, -1, 1, -1.7976931348623157e+308, -2.2250738585072014e-308, 2.2250738585072014e-308, 1.7976931348623157e+308, -0.1, 0.1]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullNum': [None, 0, -1, 1, -1.7976931348623157e+308, -2.2250738585072014e-308, 2.2250738585072014e-308, 1.7976931348623157e+308, -0.1, 0.1]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=231, use_client=True, use_binary=True)

    def test_binary_client_number_70(self):
        request = [{}, {'fn.test': {'value': {'arrNullNum': [0, False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullNum[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_71(self):
        request = [{}, {'fn.test': {'value': {'arrNullNum': [0, '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullNum[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_72(self):
        request = [{}, {'fn.test': {'value': {'arrNullNum': [0, []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullNum[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_73(self):
        request = [{}, {'fn.test': {'value': {'arrNullNum': [0, {}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullNum[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_74(self):
        request = [{'ok': {'value': {'arrNullNum': [0, False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullNum[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_75(self):
        request = [{'ok': {'value': {'arrNullNum': [0, '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullNum[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_76(self):
        request = [{'ok': {'value': {'arrNullNum': [0, []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullNum[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_77(self):
        request = [{'ok': {'value': {'arrNullNum': [0, {}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullNum[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_78(self):
        request = [{'ok': {'value': {'objNum': {}}}}, {'fn.test': {'value': {'objNum': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objNum': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_79(self):
        request = [{'ok': {'value': {'objNum': {'a': 0}}}}, {'fn.test': {'value': {'objNum': {'a': 0}}}}]
        expected_response = [{}, {'ok': {'value': {'objNum': {'a': 0}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_80(self):
        request = [{'ok': {'value': {'objNum': {'a': -1}}}}, {'fn.test': {'value': {'objNum': {'a': -1}}}}]
        expected_response = [{}, {'ok': {'value': {'objNum': {'a': -1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_81(self):
        request = [{'ok': {'value': {'objNum': {'a': 1}}}}, {'fn.test': {'value': {'objNum': {'a': 1}}}}]
        expected_response = [{}, {'ok': {'value': {'objNum': {'a': 1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_82(self):
        request = [{'ok': {'value': {'objNum': {'a': -1.7976931348623157e+308}}}}, {'fn.test': {'value': {'objNum': {'a': -1.7976931348623157e+308}}}}]
        expected_response = [{}, {'ok': {'value': {'objNum': {'a': -1.7976931348623157e+308}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_83(self):
        request = [{'ok': {'value': {'objNum': {'a': -2.2250738585072014e-308}}}}, {'fn.test': {'value': {'objNum': {'a': -2.2250738585072014e-308}}}}]
        expected_response = [{}, {'ok': {'value': {'objNum': {'a': -2.2250738585072014e-308}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_84(self):
        request = [{'ok': {'value': {'objNum': {'a': 2.2250738585072014e-308}}}}, {'fn.test': {'value': {'objNum': {'a': 2.2250738585072014e-308}}}}]
        expected_response = [{}, {'ok': {'value': {'objNum': {'a': 2.2250738585072014e-308}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_85(self):
        request = [{'ok': {'value': {'objNum': {'a': 1.7976931348623157e+308}}}}, {'fn.test': {'value': {'objNum': {'a': 1.7976931348623157e+308}}}}]
        expected_response = [{}, {'ok': {'value': {'objNum': {'a': 1.7976931348623157e+308}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_86(self):
        request = [{'ok': {'value': {'objNum': {'a': -0.1}}}}, {'fn.test': {'value': {'objNum': {'a': -0.1}}}}]
        expected_response = [{}, {'ok': {'value': {'objNum': {'a': -0.1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_87(self):
        request = [{'ok': {'value': {'objNum': {'a': 0.1}}}}, {'fn.test': {'value': {'objNum': {'a': 0.1}}}}]
        expected_response = [{}, {'ok': {'value': {'objNum': {'a': 0.1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_88(self):
        request = [{'ok': {'value': {'objNum': {'a': 0, 'b': -1, 'c': 1, 'd': -1.7976931348623157e+308, 'e': -2.2250738585072014e-308, 'f': 2.2250738585072014e-308, 'g': 1.7976931348623157e+308, 'h': -0.1, 'i': 0.1}}}}, {'fn.test': {'value': {'objNum': {'a': 0, 'b': -1, 'c': 1, 'd': -1.7976931348623157e+308, 'e': -2.2250738585072014e-308, 'f': 2.2250738585072014e-308, 'g': 1.7976931348623157e+308, 'h': -0.1, 'i': 0.1}}}}]
        expected_response = [{}, {'ok': {'value': {'objNum': {'a': 0, 'b': -1, 'c': 1, 'd': -1.7976931348623157e+308, 'e': -2.2250738585072014e-308, 'f': 2.2250738585072014e-308, 'g': 1.7976931348623157e+308, 'h': -0.1, 'i': 0.1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=231, use_client=True, use_binary=True)

    def test_binary_client_number_89(self):
        request = [{}, {'fn.test': {'value': {'objNum': {'a': 0, 'b': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNum{b}', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_90(self):
        request = [{}, {'fn.test': {'value': {'objNum': {'a': 0, 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNum{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_91(self):
        request = [{}, {'fn.test': {'value': {'objNum': {'a': 0, 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNum{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_92(self):
        request = [{}, {'fn.test': {'value': {'objNum': {'a': 0, 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNum{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_93(self):
        request = [{}, {'fn.test': {'value': {'objNum': {'a': 0, 'b': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNum{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_94(self):
        request = [{'ok': {'value': {'objNum': {'a': 0, 'b': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNum{b}', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_95(self):
        request = [{'ok': {'value': {'objNum': {'a': 0, 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNum{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_96(self):
        request = [{'ok': {'value': {'objNum': {'a': 0, 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNum{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_97(self):
        request = [{'ok': {'value': {'objNum': {'a': 0, 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNum{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_98(self):
        request = [{'ok': {'value': {'objNum': {'a': 0, 'b': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNum{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_99(self):
        request = [{'ok': {'value': {'objNullNum': {}}}}, {'fn.test': {'value': {'objNullNum': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullNum': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_100(self):
        request = [{'ok': {'value': {'objNullNum': {'a': None}}}}, {'fn.test': {'value': {'objNullNum': {'a': None}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullNum': {'a': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_101(self):
        request = [{'ok': {'value': {'objNullNum': {'a': 0}}}}, {'fn.test': {'value': {'objNullNum': {'a': 0}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullNum': {'a': 0}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_102(self):
        request = [{'ok': {'value': {'objNullNum': {'a': -1}}}}, {'fn.test': {'value': {'objNullNum': {'a': -1}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullNum': {'a': -1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_103(self):
        request = [{'ok': {'value': {'objNullNum': {'a': 1}}}}, {'fn.test': {'value': {'objNullNum': {'a': 1}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullNum': {'a': 1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_104(self):
        request = [{'ok': {'value': {'objNullNum': {'a': -1.7976931348623157e+308}}}}, {'fn.test': {'value': {'objNullNum': {'a': -1.7976931348623157e+308}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullNum': {'a': -1.7976931348623157e+308}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_105(self):
        request = [{'ok': {'value': {'objNullNum': {'a': -2.2250738585072014e-308}}}}, {'fn.test': {'value': {'objNullNum': {'a': -2.2250738585072014e-308}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullNum': {'a': -2.2250738585072014e-308}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_106(self):
        request = [{'ok': {'value': {'objNullNum': {'a': 2.2250738585072014e-308}}}}, {'fn.test': {'value': {'objNullNum': {'a': 2.2250738585072014e-308}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullNum': {'a': 2.2250738585072014e-308}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_107(self):
        request = [{'ok': {'value': {'objNullNum': {'a': 1.7976931348623157e+308}}}}, {'fn.test': {'value': {'objNullNum': {'a': 1.7976931348623157e+308}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullNum': {'a': 1.7976931348623157e+308}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_108(self):
        request = [{'ok': {'value': {'objNullNum': {'a': -0.1}}}}, {'fn.test': {'value': {'objNullNum': {'a': -0.1}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullNum': {'a': -0.1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_109(self):
        request = [{'ok': {'value': {'objNullNum': {'a': 0.1}}}}, {'fn.test': {'value': {'objNullNum': {'a': 0.1}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullNum': {'a': 0.1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_110(self):
        request = [{'ok': {'value': {'objNullNum': {'a': None, 'b': 0, 'c': -1, 'd': 1, 'e': -1.7976931348623157e+308, 'f': -2.2250738585072014e-308, 'g': 2.2250738585072014e-308, 'h': 1.7976931348623157e+308, 'i': -0.1, 'j': 0.1}}}}, {'fn.test': {'value': {'objNullNum': {'a': None, 'b': 0, 'c': -1, 'd': 1, 'e': -1.7976931348623157e+308, 'f': -2.2250738585072014e-308, 'g': 2.2250738585072014e-308, 'h': 1.7976931348623157e+308, 'i': -0.1, 'j': 0.1}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullNum': {'a': None, 'b': 0, 'c': -1, 'd': 1, 'e': -1.7976931348623157e+308, 'f': -2.2250738585072014e-308, 'g': 2.2250738585072014e-308, 'h': 1.7976931348623157e+308, 'i': -0.1, 'j': 0.1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=231, use_client=True, use_binary=True)

    def test_binary_client_number_111(self):
        request = [{}, {'fn.test': {'value': {'objNullNum': {'a': 0, 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullNum{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_112(self):
        request = [{}, {'fn.test': {'value': {'objNullNum': {'a': 0, 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullNum{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_113(self):
        request = [{}, {'fn.test': {'value': {'objNullNum': {'a': 0, 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullNum{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_114(self):
        request = [{}, {'fn.test': {'value': {'objNullNum': {'a': 0, 'b': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullNum{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_115(self):
        request = [{'ok': {'value': {'objNullNum': {'a': 0, 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullNum{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_116(self):
        request = [{'ok': {'value': {'objNullNum': {'a': 0, 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullNum{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_117(self):
        request = [{'ok': {'value': {'objNullNum': {'a': 0, 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullNum{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_118(self):
        request = [{'ok': {'value': {'objNullNum': {'a': 0, 'b': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullNum{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_119(self):
        request = [{'ok': {'value': {'pStrNum': {'wrap': 0}}}}, {'fn.test': {'value': {'pStrNum': {'wrap': 0}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNum': {'wrap': 0}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_120(self):
        request = [{'ok': {'value': {'pStrNum': {'wrap': -1}}}}, {'fn.test': {'value': {'pStrNum': {'wrap': -1}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNum': {'wrap': -1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_121(self):
        request = [{'ok': {'value': {'pStrNum': {'wrap': 1}}}}, {'fn.test': {'value': {'pStrNum': {'wrap': 1}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNum': {'wrap': 1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_122(self):
        request = [{'ok': {'value': {'pStrNum': {'wrap': -1.7976931348623157e+308}}}}, {'fn.test': {'value': {'pStrNum': {'wrap': -1.7976931348623157e+308}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNum': {'wrap': -1.7976931348623157e+308}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_123(self):
        request = [{'ok': {'value': {'pStrNum': {'wrap': -2.2250738585072014e-308}}}}, {'fn.test': {'value': {'pStrNum': {'wrap': -2.2250738585072014e-308}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNum': {'wrap': -2.2250738585072014e-308}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_124(self):
        request = [{'ok': {'value': {'pStrNum': {'wrap': 2.2250738585072014e-308}}}}, {'fn.test': {'value': {'pStrNum': {'wrap': 2.2250738585072014e-308}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNum': {'wrap': 2.2250738585072014e-308}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_125(self):
        request = [{'ok': {'value': {'pStrNum': {'wrap': 1.7976931348623157e+308}}}}, {'fn.test': {'value': {'pStrNum': {'wrap': 1.7976931348623157e+308}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNum': {'wrap': 1.7976931348623157e+308}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_126(self):
        request = [{'ok': {'value': {'pStrNum': {'wrap': -0.1}}}}, {'fn.test': {'value': {'pStrNum': {'wrap': -0.1}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNum': {'wrap': -0.1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_127(self):
        request = [{'ok': {'value': {'pStrNum': {'wrap': 0.1}}}}, {'fn.test': {'value': {'pStrNum': {'wrap': 0.1}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNum': {'wrap': 0.1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_128(self):
        request = [{}, {'fn.test': {'value': {'pStrNum': {'wrap': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_129(self):
        request = [{}, {'fn.test': {'value': {'pStrNum': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_130(self):
        request = [{}, {'fn.test': {'value': {'pStrNum': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNum.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_131(self):
        request = [{}, {'fn.test': {'value': {'pStrNum': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_132(self):
        request = [{}, {'fn.test': {'value': {'pStrNum': {'wrap': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_133(self):
        request = [{'ok': {'value': {'pStrNum': {'wrap': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_134(self):
        request = [{'ok': {'value': {'pStrNum': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_135(self):
        request = [{'ok': {'value': {'pStrNum': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNum.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_136(self):
        request = [{'ok': {'value': {'pStrNum': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_137(self):
        request = [{'ok': {'value': {'pStrNum': {'wrap': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_138(self):
        request = [{'ok': {'value': {'pStrNullNum': {'wrap': None}}}}, {'fn.test': {'value': {'pStrNullNum': {'wrap': None}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullNum': {'wrap': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_139(self):
        request = [{'ok': {'value': {'pStrNullNum': {'wrap': 0}}}}, {'fn.test': {'value': {'pStrNullNum': {'wrap': 0}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullNum': {'wrap': 0}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_140(self):
        request = [{'ok': {'value': {'pStrNullNum': {'wrap': -1}}}}, {'fn.test': {'value': {'pStrNullNum': {'wrap': -1}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullNum': {'wrap': -1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_141(self):
        request = [{'ok': {'value': {'pStrNullNum': {'wrap': 1}}}}, {'fn.test': {'value': {'pStrNullNum': {'wrap': 1}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullNum': {'wrap': 1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_142(self):
        request = [{'ok': {'value': {'pStrNullNum': {'wrap': -1.7976931348623157e+308}}}}, {'fn.test': {'value': {'pStrNullNum': {'wrap': -1.7976931348623157e+308}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullNum': {'wrap': -1.7976931348623157e+308}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_143(self):
        request = [{'ok': {'value': {'pStrNullNum': {'wrap': -2.2250738585072014e-308}}}}, {'fn.test': {'value': {'pStrNullNum': {'wrap': -2.2250738585072014e-308}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullNum': {'wrap': -2.2250738585072014e-308}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_144(self):
        request = [{'ok': {'value': {'pStrNullNum': {'wrap': 2.2250738585072014e-308}}}}, {'fn.test': {'value': {'pStrNullNum': {'wrap': 2.2250738585072014e-308}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullNum': {'wrap': 2.2250738585072014e-308}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_145(self):
        request = [{'ok': {'value': {'pStrNullNum': {'wrap': 1.7976931348623157e+308}}}}, {'fn.test': {'value': {'pStrNullNum': {'wrap': 1.7976931348623157e+308}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullNum': {'wrap': 1.7976931348623157e+308}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_146(self):
        request = [{'ok': {'value': {'pStrNullNum': {'wrap': -0.1}}}}, {'fn.test': {'value': {'pStrNullNum': {'wrap': -0.1}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullNum': {'wrap': -0.1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_147(self):
        request = [{'ok': {'value': {'pStrNullNum': {'wrap': 0.1}}}}, {'fn.test': {'value': {'pStrNullNum': {'wrap': 0.1}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullNum': {'wrap': 0.1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_148(self):
        request = [{}, {'fn.test': {'value': {'pStrNullNum': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullNum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_149(self):
        request = [{}, {'fn.test': {'value': {'pStrNullNum': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullNum.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_150(self):
        request = [{}, {'fn.test': {'value': {'pStrNullNum': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullNum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_151(self):
        request = [{}, {'fn.test': {'value': {'pStrNullNum': {'wrap': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullNum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_152(self):
        request = [{'ok': {'value': {'pStrNullNum': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullNum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_153(self):
        request = [{'ok': {'value': {'pStrNullNum': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullNum.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_154(self):
        request = [{'ok': {'value': {'pStrNullNum': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullNum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_155(self):
        request = [{'ok': {'value': {'pStrNullNum': {'wrap': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullNum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_156(self):
        request = [{'ok': {'value': {'pEnumNum': {'one': {}}}}}, {'fn.test': {'value': {'pEnumNum': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNum': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_157(self):
        request = [{'ok': {'value': {'pEnumNum': {'two': {'ewrap': 0}}}}}, {'fn.test': {'value': {'pEnumNum': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNum': {'two': {'ewrap': 0}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_158(self):
        request = [{'ok': {'value': {'pEnumNum': {'two': {'ewrap': -1}}}}}, {'fn.test': {'value': {'pEnumNum': {'two': {'ewrap': -1}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNum': {'two': {'ewrap': -1}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_159(self):
        request = [{'ok': {'value': {'pEnumNum': {'two': {'ewrap': 1}}}}}, {'fn.test': {'value': {'pEnumNum': {'two': {'ewrap': 1}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNum': {'two': {'ewrap': 1}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_160(self):
        request = [{'ok': {'value': {'pEnumNum': {'two': {'ewrap': -1.7976931348623157e+308}}}}}, {'fn.test': {'value': {'pEnumNum': {'two': {'ewrap': -1.7976931348623157e+308}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNum': {'two': {'ewrap': -1.7976931348623157e+308}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_161(self):
        request = [{'ok': {'value': {'pEnumNum': {'two': {'ewrap': -2.2250738585072014e-308}}}}}, {'fn.test': {'value': {'pEnumNum': {'two': {'ewrap': -2.2250738585072014e-308}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNum': {'two': {'ewrap': -2.2250738585072014e-308}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_162(self):
        request = [{'ok': {'value': {'pEnumNum': {'two': {'ewrap': 2.2250738585072014e-308}}}}}, {'fn.test': {'value': {'pEnumNum': {'two': {'ewrap': 2.2250738585072014e-308}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNum': {'two': {'ewrap': 2.2250738585072014e-308}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_163(self):
        request = [{'ok': {'value': {'pEnumNum': {'two': {'ewrap': 1.7976931348623157e+308}}}}}, {'fn.test': {'value': {'pEnumNum': {'two': {'ewrap': 1.7976931348623157e+308}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNum': {'two': {'ewrap': 1.7976931348623157e+308}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_164(self):
        request = [{'ok': {'value': {'pEnumNum': {'two': {'ewrap': -0.1}}}}}, {'fn.test': {'value': {'pEnumNum': {'two': {'ewrap': -0.1}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNum': {'two': {'ewrap': -0.1}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_165(self):
        request = [{'ok': {'value': {'pEnumNum': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {'value': {'pEnumNum': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNum': {'two': {'ewrap': 0.1}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_166(self):
        request = [{}, {'fn.test': {'value': {'pEnumNum': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_167(self):
        request = [{}, {'fn.test': {'value': {'pEnumNum': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_168(self):
        request = [{}, {'fn.test': {'value': {'pEnumNum': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_169(self):
        request = [{}, {'fn.test': {'value': {'pEnumNum': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_170(self):
        request = [{}, {'fn.test': {'value': {'pEnumNum': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_171(self):
        request = [{'ok': {'value': {'pEnumNum': {'two': {'ewrap': None}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_172(self):
        request = [{'ok': {'value': {'pEnumNum': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_173(self):
        request = [{'ok': {'value': {'pEnumNum': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_174(self):
        request = [{'ok': {'value': {'pEnumNum': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_175(self):
        request = [{'ok': {'value': {'pEnumNum': {'two': {'ewrap': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_176(self):
        request = [{'ok': {'value': {'pEnumNullNum': {'one': {}}}}}, {'fn.test': {'value': {'pEnumNullNum': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullNum': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_177(self):
        request = [{'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': None}}}}}, {'fn.test': {'value': {'pEnumNullNum': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': None}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_178(self):
        request = [{'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': 0}}}}}, {'fn.test': {'value': {'pEnumNullNum': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': 0}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_179(self):
        request = [{'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': -1}}}}}, {'fn.test': {'value': {'pEnumNullNum': {'two': {'ewrap': -1}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': -1}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_180(self):
        request = [{'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': 1}}}}}, {'fn.test': {'value': {'pEnumNullNum': {'two': {'ewrap': 1}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': 1}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_181(self):
        request = [{'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': -1.7976931348623157e+308}}}}}, {'fn.test': {'value': {'pEnumNullNum': {'two': {'ewrap': -1.7976931348623157e+308}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': -1.7976931348623157e+308}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_182(self):
        request = [{'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': -2.2250738585072014e-308}}}}}, {'fn.test': {'value': {'pEnumNullNum': {'two': {'ewrap': -2.2250738585072014e-308}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': -2.2250738585072014e-308}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_183(self):
        request = [{'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': 2.2250738585072014e-308}}}}}, {'fn.test': {'value': {'pEnumNullNum': {'two': {'ewrap': 2.2250738585072014e-308}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': 2.2250738585072014e-308}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_184(self):
        request = [{'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': 1.7976931348623157e+308}}}}}, {'fn.test': {'value': {'pEnumNullNum': {'two': {'ewrap': 1.7976931348623157e+308}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': 1.7976931348623157e+308}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_185(self):
        request = [{'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': -0.1}}}}}, {'fn.test': {'value': {'pEnumNullNum': {'two': {'ewrap': -0.1}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': -0.1}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_186(self):
        request = [{'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {'value': {'pEnumNullNum': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': 0.1}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_187(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullNum': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullNum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_188(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullNum': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullNum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_189(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullNum': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullNum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_190(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullNum': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullNum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_191(self):
        request = [{'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullNum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_192(self):
        request = [{'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullNum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_193(self):
        request = [{'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullNum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_number_194(self):
        request = [{'ok': {'value': {'pEnumNullNum': {'two': {'ewrap': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullNum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Number': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_0(self):
        request = [{'ok': {'value': {'str': ''}}}, {'fn.test': {'value': {'str': ''}}}]
        expected_response = [{}, {'ok': {'value': {'str': ''}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_1(self):
        request = [{'ok': {'value': {'str': 'abc'}}}, {'fn.test': {'value': {'str': 'abc'}}}]
        expected_response = [{}, {'ok': {'value': {'str': 'abc'}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_2(self):
        request = [{}, {'fn.test': {'value': {'str': None}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.str', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_3(self):
        request = [{}, {'fn.test': {'value': {'str': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.str', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_4(self):
        request = [{}, {'fn.test': {'value': {'str': 0}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.str', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_5(self):
        request = [{}, {'fn.test': {'value': {'str': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.str', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_6(self):
        request = [{}, {'fn.test': {'value': {'str': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.str', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_7(self):
        request = [{}, {'fn.test': {'value': {'str': {}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.str', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_8(self):
        request = [{'ok': {'value': {'str': None}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.str', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_9(self):
        request = [{'ok': {'value': {'str': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.str', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_10(self):
        request = [{'ok': {'value': {'str': 0}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.str', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_11(self):
        request = [{'ok': {'value': {'str': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.str', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_12(self):
        request = [{'ok': {'value': {'str': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.str', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_13(self):
        request = [{'ok': {'value': {'str': {}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.str', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_14(self):
        request = [{'ok': {'value': {'nullStr': None}}}, {'fn.test': {'value': {'nullStr': None}}}]
        expected_response = [{}, {'ok': {'value': {'nullStr': None}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_15(self):
        request = [{'ok': {'value': {'nullStr': ''}}}, {'fn.test': {'value': {'nullStr': ''}}}]
        expected_response = [{}, {'ok': {'value': {'nullStr': ''}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_16(self):
        request = [{'ok': {'value': {'nullStr': 'abc'}}}, {'fn.test': {'value': {'nullStr': 'abc'}}}]
        expected_response = [{}, {'ok': {'value': {'nullStr': 'abc'}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_17(self):
        request = [{}, {'fn.test': {'value': {'nullStr': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullStr', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_18(self):
        request = [{}, {'fn.test': {'value': {'nullStr': 0}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullStr', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_19(self):
        request = [{}, {'fn.test': {'value': {'nullStr': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullStr', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_20(self):
        request = [{}, {'fn.test': {'value': {'nullStr': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullStr', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_21(self):
        request = [{}, {'fn.test': {'value': {'nullStr': {}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullStr', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_22(self):
        request = [{'ok': {'value': {'nullStr': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullStr', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_23(self):
        request = [{'ok': {'value': {'nullStr': 0}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullStr', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_24(self):
        request = [{'ok': {'value': {'nullStr': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullStr', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_25(self):
        request = [{'ok': {'value': {'nullStr': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullStr', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_26(self):
        request = [{'ok': {'value': {'nullStr': {}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullStr', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_27(self):
        request = [{'ok': {'value': {'arrStr': []}}}, {'fn.test': {'value': {'arrStr': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrStr': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_28(self):
        request = [{'ok': {'value': {'arrStr': ['']}}}, {'fn.test': {'value': {'arrStr': ['']}}}]
        expected_response = [{}, {'ok': {'value': {'arrStr': ['']}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_29(self):
        request = [{'ok': {'value': {'arrStr': ['abc']}}}, {'fn.test': {'value': {'arrStr': ['abc']}}}]
        expected_response = [{}, {'ok': {'value': {'arrStr': ['abc']}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_30(self):
        request = [{'ok': {'value': {'arrStr': ['', 'abc']}}}, {'fn.test': {'value': {'arrStr': ['', 'abc']}}}]
        expected_response = [{}, {'ok': {'value': {'arrStr': ['', 'abc']}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_31(self):
        request = [{}, {'fn.test': {'value': {'arrStr': ['', None]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_32(self):
        request = [{}, {'fn.test': {'value': {'arrStr': ['', False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_33(self):
        request = [{}, {'fn.test': {'value': {'arrStr': ['', 0]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_34(self):
        request = [{}, {'fn.test': {'value': {'arrStr': ['', 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_35(self):
        request = [{}, {'fn.test': {'value': {'arrStr': ['', []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_36(self):
        request = [{}, {'fn.test': {'value': {'arrStr': ['', {}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_37(self):
        request = [{'ok': {'value': {'arrStr': ['', None]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_38(self):
        request = [{'ok': {'value': {'arrStr': ['', False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_39(self):
        request = [{'ok': {'value': {'arrStr': ['', 0]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_40(self):
        request = [{'ok': {'value': {'arrStr': ['', 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_41(self):
        request = [{'ok': {'value': {'arrStr': ['', []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_42(self):
        request = [{'ok': {'value': {'arrStr': ['', {}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_43(self):
        request = [{'ok': {'value': {'arrNullStr': []}}}, {'fn.test': {'value': {'arrNullStr': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullStr': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_44(self):
        request = [{'ok': {'value': {'arrNullStr': [None]}}}, {'fn.test': {'value': {'arrNullStr': [None]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullStr': [None]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_45(self):
        request = [{'ok': {'value': {'arrNullStr': ['']}}}, {'fn.test': {'value': {'arrNullStr': ['']}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullStr': ['']}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_46(self):
        request = [{'ok': {'value': {'arrNullStr': ['abc']}}}, {'fn.test': {'value': {'arrNullStr': ['abc']}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullStr': ['abc']}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_47(self):
        request = [{'ok': {'value': {'arrNullStr': [None, '', 'abc']}}}, {'fn.test': {'value': {'arrNullStr': [None, '', 'abc']}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullStr': [None, '', 'abc']}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_48(self):
        request = [{}, {'fn.test': {'value': {'arrNullStr': ['', False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_49(self):
        request = [{}, {'fn.test': {'value': {'arrNullStr': ['', 0]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_50(self):
        request = [{}, {'fn.test': {'value': {'arrNullStr': ['', 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_51(self):
        request = [{}, {'fn.test': {'value': {'arrNullStr': ['', []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_52(self):
        request = [{}, {'fn.test': {'value': {'arrNullStr': ['', {}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_53(self):
        request = [{'ok': {'value': {'arrNullStr': ['', False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_54(self):
        request = [{'ok': {'value': {'arrNullStr': ['', 0]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_55(self):
        request = [{'ok': {'value': {'arrNullStr': ['', 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_56(self):
        request = [{'ok': {'value': {'arrNullStr': ['', []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_57(self):
        request = [{'ok': {'value': {'arrNullStr': ['', {}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullStr[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_58(self):
        request = [{'ok': {'value': {'objStr': {}}}}, {'fn.test': {'value': {'objStr': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objStr': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_59(self):
        request = [{'ok': {'value': {'objStr': {'a': ''}}}}, {'fn.test': {'value': {'objStr': {'a': ''}}}}]
        expected_response = [{}, {'ok': {'value': {'objStr': {'a': ''}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_60(self):
        request = [{'ok': {'value': {'objStr': {'a': 'abc'}}}}, {'fn.test': {'value': {'objStr': {'a': 'abc'}}}}]
        expected_response = [{}, {'ok': {'value': {'objStr': {'a': 'abc'}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_61(self):
        request = [{'ok': {'value': {'objStr': {'a': '', 'b': 'abc'}}}}, {'fn.test': {'value': {'objStr': {'a': '', 'b': 'abc'}}}}]
        expected_response = [{}, {'ok': {'value': {'objStr': {'a': '', 'b': 'abc'}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_62(self):
        request = [{}, {'fn.test': {'value': {'objStr': {'a': '', 'b': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_63(self):
        request = [{}, {'fn.test': {'value': {'objStr': {'a': '', 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_64(self):
        request = [{}, {'fn.test': {'value': {'objStr': {'a': '', 'b': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_65(self):
        request = [{}, {'fn.test': {'value': {'objStr': {'a': '', 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_66(self):
        request = [{}, {'fn.test': {'value': {'objStr': {'a': '', 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_67(self):
        request = [{}, {'fn.test': {'value': {'objStr': {'a': '', 'b': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_68(self):
        request = [{'ok': {'value': {'objStr': {'a': '', 'b': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_69(self):
        request = [{'ok': {'value': {'objStr': {'a': '', 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_70(self):
        request = [{'ok': {'value': {'objStr': {'a': '', 'b': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_71(self):
        request = [{'ok': {'value': {'objStr': {'a': '', 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_72(self):
        request = [{'ok': {'value': {'objStr': {'a': '', 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_73(self):
        request = [{'ok': {'value': {'objStr': {'a': '', 'b': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_74(self):
        request = [{'ok': {'value': {'objNullStr': {}}}}, {'fn.test': {'value': {'objNullStr': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullStr': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_75(self):
        request = [{'ok': {'value': {'objNullStr': {'a': None}}}}, {'fn.test': {'value': {'objNullStr': {'a': None}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullStr': {'a': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_76(self):
        request = [{'ok': {'value': {'objNullStr': {'a': ''}}}}, {'fn.test': {'value': {'objNullStr': {'a': ''}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullStr': {'a': ''}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_77(self):
        request = [{'ok': {'value': {'objNullStr': {'a': 'abc'}}}}, {'fn.test': {'value': {'objNullStr': {'a': 'abc'}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullStr': {'a': 'abc'}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_78(self):
        request = [{'ok': {'value': {'objNullStr': {'a': None, 'b': '', 'c': 'abc'}}}}, {'fn.test': {'value': {'objNullStr': {'a': None, 'b': '', 'c': 'abc'}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullStr': {'a': None, 'b': '', 'c': 'abc'}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_79(self):
        request = [{}, {'fn.test': {'value': {'objNullStr': {'a': '', 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_80(self):
        request = [{}, {'fn.test': {'value': {'objNullStr': {'a': '', 'b': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_81(self):
        request = [{}, {'fn.test': {'value': {'objNullStr': {'a': '', 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_82(self):
        request = [{}, {'fn.test': {'value': {'objNullStr': {'a': '', 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_83(self):
        request = [{}, {'fn.test': {'value': {'objNullStr': {'a': '', 'b': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_84(self):
        request = [{'ok': {'value': {'objNullStr': {'a': '', 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_85(self):
        request = [{'ok': {'value': {'objNullStr': {'a': '', 'b': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_86(self):
        request = [{'ok': {'value': {'objNullStr': {'a': '', 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_87(self):
        request = [{'ok': {'value': {'objNullStr': {'a': '', 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_88(self):
        request = [{'ok': {'value': {'objNullStr': {'a': '', 'b': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullStr{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_89(self):
        request = [{'ok': {'value': {'pStrStr': {'wrap': ''}}}}, {'fn.test': {'value': {'pStrStr': {'wrap': ''}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrStr': {'wrap': ''}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_90(self):
        request = [{'ok': {'value': {'pStrStr': {'wrap': 'abc'}}}}, {'fn.test': {'value': {'pStrStr': {'wrap': 'abc'}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrStr': {'wrap': 'abc'}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_91(self):
        request = [{}, {'fn.test': {'value': {'pStrStr': {'wrap': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_92(self):
        request = [{}, {'fn.test': {'value': {'pStrStr': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_93(self):
        request = [{}, {'fn.test': {'value': {'pStrStr': {'wrap': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_94(self):
        request = [{}, {'fn.test': {'value': {'pStrStr': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_95(self):
        request = [{}, {'fn.test': {'value': {'pStrStr': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_96(self):
        request = [{}, {'fn.test': {'value': {'pStrStr': {'wrap': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_97(self):
        request = [{'ok': {'value': {'pStrStr': {'wrap': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_98(self):
        request = [{'ok': {'value': {'pStrStr': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_99(self):
        request = [{'ok': {'value': {'pStrStr': {'wrap': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_100(self):
        request = [{'ok': {'value': {'pStrStr': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_101(self):
        request = [{'ok': {'value': {'pStrStr': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_102(self):
        request = [{'ok': {'value': {'pStrStr': {'wrap': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_103(self):
        request = [{'ok': {'value': {'pStrNullStr': {'wrap': None}}}}, {'fn.test': {'value': {'pStrNullStr': {'wrap': None}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullStr': {'wrap': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_104(self):
        request = [{'ok': {'value': {'pStrNullStr': {'wrap': ''}}}}, {'fn.test': {'value': {'pStrNullStr': {'wrap': ''}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullStr': {'wrap': ''}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_105(self):
        request = [{'ok': {'value': {'pStrNullStr': {'wrap': 'abc'}}}}, {'fn.test': {'value': {'pStrNullStr': {'wrap': 'abc'}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullStr': {'wrap': 'abc'}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_106(self):
        request = [{}, {'fn.test': {'value': {'pStrNullStr': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_107(self):
        request = [{}, {'fn.test': {'value': {'pStrNullStr': {'wrap': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_108(self):
        request = [{}, {'fn.test': {'value': {'pStrNullStr': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_109(self):
        request = [{}, {'fn.test': {'value': {'pStrNullStr': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_110(self):
        request = [{}, {'fn.test': {'value': {'pStrNullStr': {'wrap': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_111(self):
        request = [{'ok': {'value': {'pStrNullStr': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_112(self):
        request = [{'ok': {'value': {'pStrNullStr': {'wrap': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_113(self):
        request = [{'ok': {'value': {'pStrNullStr': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_114(self):
        request = [{'ok': {'value': {'pStrNullStr': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_115(self):
        request = [{'ok': {'value': {'pStrNullStr': {'wrap': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullStr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_116(self):
        request = [{'ok': {'value': {'pEnumStr': {'one': {}}}}}, {'fn.test': {'value': {'pEnumStr': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumStr': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_117(self):
        request = [{'ok': {'value': {'pEnumStr': {'two': {'ewrap': ''}}}}}, {'fn.test': {'value': {'pEnumStr': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumStr': {'two': {'ewrap': ''}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_118(self):
        request = [{'ok': {'value': {'pEnumStr': {'two': {'ewrap': 'abc'}}}}}, {'fn.test': {'value': {'pEnumStr': {'two': {'ewrap': 'abc'}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumStr': {'two': {'ewrap': 'abc'}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_119(self):
        request = [{}, {'fn.test': {'value': {'pEnumStr': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_120(self):
        request = [{}, {'fn.test': {'value': {'pEnumStr': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_121(self):
        request = [{}, {'fn.test': {'value': {'pEnumStr': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_122(self):
        request = [{}, {'fn.test': {'value': {'pEnumStr': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_123(self):
        request = [{}, {'fn.test': {'value': {'pEnumStr': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_124(self):
        request = [{}, {'fn.test': {'value': {'pEnumStr': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_125(self):
        request = [{'ok': {'value': {'pEnumStr': {'two': {'ewrap': None}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_126(self):
        request = [{'ok': {'value': {'pEnumStr': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_127(self):
        request = [{'ok': {'value': {'pEnumStr': {'two': {'ewrap': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_128(self):
        request = [{'ok': {'value': {'pEnumStr': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_129(self):
        request = [{'ok': {'value': {'pEnumStr': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_130(self):
        request = [{'ok': {'value': {'pEnumStr': {'two': {'ewrap': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_131(self):
        request = [{'ok': {'value': {'pEnumNullStr': {'one': {}}}}}, {'fn.test': {'value': {'pEnumNullStr': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullStr': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_132(self):
        request = [{'ok': {'value': {'pEnumNullStr': {'two': {'ewrap': None}}}}}, {'fn.test': {'value': {'pEnumNullStr': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullStr': {'two': {'ewrap': None}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_133(self):
        request = [{'ok': {'value': {'pEnumNullStr': {'two': {'ewrap': ''}}}}}, {'fn.test': {'value': {'pEnumNullStr': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullStr': {'two': {'ewrap': ''}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_134(self):
        request = [{'ok': {'value': {'pEnumNullStr': {'two': {'ewrap': 'abc'}}}}}, {'fn.test': {'value': {'pEnumNullStr': {'two': {'ewrap': 'abc'}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullStr': {'two': {'ewrap': 'abc'}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_135(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullStr': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_136(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullStr': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_137(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullStr': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_138(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullStr': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_139(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullStr': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_140(self):
        request = [{'ok': {'value': {'pEnumNullStr': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_141(self):
        request = [{'ok': {'value': {'pEnumNullStr': {'two': {'ewrap': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_142(self):
        request = [{'ok': {'value': {'pEnumNullStr': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_143(self):
        request = [{'ok': {'value': {'pEnumNullStr': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_string_144(self):
        request = [{'ok': {'value': {'pEnumNullStr': {'two': {'ewrap': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullStr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_0(self):
        request = [{'ok': {'value': {'arr': []}}}, {'fn.test': {'value': {'arr': []}}}]
        expected_response = [{}, {'ok': {'value': {'arr': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_1(self):
        request = [{'ok': {'value': {'arr': [False, 0, 0.1, '']}}}, {'fn.test': {'value': {'arr': [False, 0, 0.1, '']}}}]
        expected_response = [{}, {'ok': {'value': {'arr': [False, 0, 0.1, '']}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=231, use_client=True, use_binary=True)

    def test_binary_client_array_2(self):
        request = [{}, {'fn.test': {'value': {'arr': None}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arr', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_3(self):
        request = [{}, {'fn.test': {'value': {'arr': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arr', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_4(self):
        request = [{}, {'fn.test': {'value': {'arr': 0}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arr', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_5(self):
        request = [{}, {'fn.test': {'value': {'arr': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arr', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_6(self):
        request = [{}, {'fn.test': {'value': {'arr': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arr', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_7(self):
        request = [{}, {'fn.test': {'value': {'arr': {}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arr', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_8(self):
        request = [{'ok': {'value': {'arr': None}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arr', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_9(self):
        request = [{'ok': {'value': {'arr': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arr', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_10(self):
        request = [{'ok': {'value': {'arr': 0}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arr', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_11(self):
        request = [{'ok': {'value': {'arr': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arr', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_12(self):
        request = [{'ok': {'value': {'arr': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arr', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_13(self):
        request = [{'ok': {'value': {'arr': {}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arr', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_14(self):
        request = [{'ok': {'value': {'nullArr': None}}}, {'fn.test': {'value': {'nullArr': None}}}]
        expected_response = [{}, {'ok': {'value': {'nullArr': None}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_15(self):
        request = [{'ok': {'value': {'nullArr': []}}}, {'fn.test': {'value': {'nullArr': []}}}]
        expected_response = [{}, {'ok': {'value': {'nullArr': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_16(self):
        request = [{'ok': {'value': {'nullArr': [False, 0, 0.1, '']}}}, {'fn.test': {'value': {'nullArr': [False, 0, 0.1, '']}}}]
        expected_response = [{}, {'ok': {'value': {'nullArr': [False, 0, 0.1, '']}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=231, use_client=True, use_binary=True)

    def test_binary_client_array_17(self):
        request = [{}, {'fn.test': {'value': {'nullArr': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullArr', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_18(self):
        request = [{}, {'fn.test': {'value': {'nullArr': 0}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullArr', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_19(self):
        request = [{}, {'fn.test': {'value': {'nullArr': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullArr', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_20(self):
        request = [{}, {'fn.test': {'value': {'nullArr': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullArr', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_21(self):
        request = [{}, {'fn.test': {'value': {'nullArr': {}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullArr', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_22(self):
        request = [{'ok': {'value': {'nullArr': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullArr', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_23(self):
        request = [{'ok': {'value': {'nullArr': 0}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullArr', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_24(self):
        request = [{'ok': {'value': {'nullArr': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullArr', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_25(self):
        request = [{'ok': {'value': {'nullArr': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullArr', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_26(self):
        request = [{'ok': {'value': {'nullArr': {}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullArr', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_27(self):
        request = [{'ok': {'value': {'arrArr': []}}}, {'fn.test': {'value': {'arrArr': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrArr': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_28(self):
        request = [{'ok': {'value': {'arrArr': [[]]}}}, {'fn.test': {'value': {'arrArr': [[]]}}}]
        expected_response = [{}, {'ok': {'value': {'arrArr': [[]]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_29(self):
        request = [{'ok': {'value': {'arrArr': [[False, 0, 0.1, '']]}}}, {'fn.test': {'value': {'arrArr': [[False, 0, 0.1, '']]}}}]
        expected_response = [{}, {'ok': {'value': {'arrArr': [[False, 0, 0.1, '']]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_30(self):
        request = [{'ok': {'value': {'arrArr': [[], [False, 0, 0.1, '']]}}}, {'fn.test': {'value': {'arrArr': [[], [False, 0, 0.1, '']]}}}]
        expected_response = [{}, {'ok': {'value': {'arrArr': [[], [False, 0, 0.1, '']]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_31(self):
        request = [{}, {'fn.test': {'value': {'arrArr': [[], None]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrArr[1]', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_32(self):
        request = [{}, {'fn.test': {'value': {'arrArr': [[], False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrArr[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_33(self):
        request = [{}, {'fn.test': {'value': {'arrArr': [[], 0]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrArr[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_34(self):
        request = [{}, {'fn.test': {'value': {'arrArr': [[], 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrArr[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_35(self):
        request = [{}, {'fn.test': {'value': {'arrArr': [[], '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrArr[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_36(self):
        request = [{}, {'fn.test': {'value': {'arrArr': [[], {}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrArr[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_37(self):
        request = [{'ok': {'value': {'arrArr': [[], None]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrArr[1]', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_38(self):
        request = [{'ok': {'value': {'arrArr': [[], False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrArr[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_39(self):
        request = [{'ok': {'value': {'arrArr': [[], 0]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrArr[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_40(self):
        request = [{'ok': {'value': {'arrArr': [[], 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrArr[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_41(self):
        request = [{'ok': {'value': {'arrArr': [[], '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrArr[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_42(self):
        request = [{'ok': {'value': {'arrArr': [[], {}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrArr[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_43(self):
        request = [{'ok': {'value': {'arrNullArr': []}}}, {'fn.test': {'value': {'arrNullArr': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullArr': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_44(self):
        request = [{'ok': {'value': {'arrNullArr': [None]}}}, {'fn.test': {'value': {'arrNullArr': [None]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullArr': [None]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_45(self):
        request = [{'ok': {'value': {'arrNullArr': [[]]}}}, {'fn.test': {'value': {'arrNullArr': [[]]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullArr': [[]]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_46(self):
        request = [{'ok': {'value': {'arrNullArr': [[False, 0, 0.1, '']]}}}, {'fn.test': {'value': {'arrNullArr': [[False, 0, 0.1, '']]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullArr': [[False, 0, 0.1, '']]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_47(self):
        request = [{'ok': {'value': {'arrNullArr': [None, [], [False, 0, 0.1, '']]}}}, {'fn.test': {'value': {'arrNullArr': [None, [], [False, 0, 0.1, '']]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullArr': [None, [], [False, 0, 0.1, '']]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_48(self):
        request = [{}, {'fn.test': {'value': {'arrNullArr': [[], False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullArr[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_49(self):
        request = [{}, {'fn.test': {'value': {'arrNullArr': [[], 0]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullArr[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_50(self):
        request = [{}, {'fn.test': {'value': {'arrNullArr': [[], 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullArr[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_51(self):
        request = [{}, {'fn.test': {'value': {'arrNullArr': [[], '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullArr[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_52(self):
        request = [{}, {'fn.test': {'value': {'arrNullArr': [[], {}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullArr[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_53(self):
        request = [{'ok': {'value': {'arrNullArr': [[], False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullArr[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_54(self):
        request = [{'ok': {'value': {'arrNullArr': [[], 0]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullArr[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_55(self):
        request = [{'ok': {'value': {'arrNullArr': [[], 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullArr[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_56(self):
        request = [{'ok': {'value': {'arrNullArr': [[], '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullArr[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_57(self):
        request = [{'ok': {'value': {'arrNullArr': [[], {}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullArr[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_58(self):
        request = [{'ok': {'value': {'objArr': {}}}}, {'fn.test': {'value': {'objArr': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objArr': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_59(self):
        request = [{'ok': {'value': {'objArr': {'a': []}}}}, {'fn.test': {'value': {'objArr': {'a': []}}}}]
        expected_response = [{}, {'ok': {'value': {'objArr': {'a': []}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_60(self):
        request = [{'ok': {'value': {'objArr': {'a': [False, 0, 0.1, '']}}}}, {'fn.test': {'value': {'objArr': {'a': [False, 0, 0.1, '']}}}}]
        expected_response = [{}, {'ok': {'value': {'objArr': {'a': [False, 0, 0.1, '']}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_61(self):
        request = [{'ok': {'value': {'objArr': {'a': [], 'b': [False, 0, 0.1, '']}}}}, {'fn.test': {'value': {'objArr': {'a': [], 'b': [False, 0, 0.1, '']}}}}]
        expected_response = [{}, {'ok': {'value': {'objArr': {'a': [], 'b': [False, 0, 0.1, '']}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_62(self):
        request = [{}, {'fn.test': {'value': {'objArr': {'a': [], 'b': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objArr{b}', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_63(self):
        request = [{}, {'fn.test': {'value': {'objArr': {'a': [], 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objArr{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_64(self):
        request = [{}, {'fn.test': {'value': {'objArr': {'a': [], 'b': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objArr{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_65(self):
        request = [{}, {'fn.test': {'value': {'objArr': {'a': [], 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objArr{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_66(self):
        request = [{}, {'fn.test': {'value': {'objArr': {'a': [], 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objArr{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_67(self):
        request = [{}, {'fn.test': {'value': {'objArr': {'a': [], 'b': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objArr{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_68(self):
        request = [{'ok': {'value': {'objArr': {'a': [], 'b': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objArr{b}', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_69(self):
        request = [{'ok': {'value': {'objArr': {'a': [], 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objArr{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_70(self):
        request = [{'ok': {'value': {'objArr': {'a': [], 'b': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objArr{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_71(self):
        request = [{'ok': {'value': {'objArr': {'a': [], 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objArr{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_72(self):
        request = [{'ok': {'value': {'objArr': {'a': [], 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objArr{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_73(self):
        request = [{'ok': {'value': {'objArr': {'a': [], 'b': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objArr{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_74(self):
        request = [{'ok': {'value': {'objNullArr': {}}}}, {'fn.test': {'value': {'objNullArr': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullArr': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_75(self):
        request = [{'ok': {'value': {'objNullArr': {'a': None}}}}, {'fn.test': {'value': {'objNullArr': {'a': None}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullArr': {'a': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_76(self):
        request = [{'ok': {'value': {'objNullArr': {'a': []}}}}, {'fn.test': {'value': {'objNullArr': {'a': []}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullArr': {'a': []}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_77(self):
        request = [{'ok': {'value': {'objNullArr': {'a': [False, 0, 0.1, '']}}}}, {'fn.test': {'value': {'objNullArr': {'a': [False, 0, 0.1, '']}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullArr': {'a': [False, 0, 0.1, '']}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_78(self):
        request = [{'ok': {'value': {'objNullArr': {'a': None, 'b': [], 'c': [False, 0, 0.1, '']}}}}, {'fn.test': {'value': {'objNullArr': {'a': None, 'b': [], 'c': [False, 0, 0.1, '']}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullArr': {'a': None, 'b': [], 'c': [False, 0, 0.1, '']}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_79(self):
        request = [{}, {'fn.test': {'value': {'objNullArr': {'a': [], 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullArr{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_80(self):
        request = [{}, {'fn.test': {'value': {'objNullArr': {'a': [], 'b': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullArr{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_81(self):
        request = [{}, {'fn.test': {'value': {'objNullArr': {'a': [], 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullArr{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_82(self):
        request = [{}, {'fn.test': {'value': {'objNullArr': {'a': [], 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullArr{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_83(self):
        request = [{}, {'fn.test': {'value': {'objNullArr': {'a': [], 'b': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullArr{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_84(self):
        request = [{'ok': {'value': {'objNullArr': {'a': [], 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullArr{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_85(self):
        request = [{'ok': {'value': {'objNullArr': {'a': [], 'b': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullArr{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_86(self):
        request = [{'ok': {'value': {'objNullArr': {'a': [], 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullArr{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_87(self):
        request = [{'ok': {'value': {'objNullArr': {'a': [], 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullArr{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_88(self):
        request = [{'ok': {'value': {'objNullArr': {'a': [], 'b': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullArr{b}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_89(self):
        request = [{'ok': {'value': {'pStrArr': {'wrap': []}}}}, {'fn.test': {'value': {'pStrArr': {'wrap': []}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrArr': {'wrap': []}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_90(self):
        request = [{'ok': {'value': {'pStrArr': {'wrap': [False, 0, 0.1, '']}}}}, {'fn.test': {'value': {'pStrArr': {'wrap': [False, 0, 0.1, '']}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrArr': {'wrap': [False, 0, 0.1, '']}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_91(self):
        request = [{}, {'fn.test': {'value': {'pStrArr': {'wrap': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_92(self):
        request = [{}, {'fn.test': {'value': {'pStrArr': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_93(self):
        request = [{}, {'fn.test': {'value': {'pStrArr': {'wrap': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_94(self):
        request = [{}, {'fn.test': {'value': {'pStrArr': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_95(self):
        request = [{}, {'fn.test': {'value': {'pStrArr': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_96(self):
        request = [{}, {'fn.test': {'value': {'pStrArr': {'wrap': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_97(self):
        request = [{'ok': {'value': {'pStrArr': {'wrap': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_98(self):
        request = [{'ok': {'value': {'pStrArr': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_99(self):
        request = [{'ok': {'value': {'pStrArr': {'wrap': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_100(self):
        request = [{'ok': {'value': {'pStrArr': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_101(self):
        request = [{'ok': {'value': {'pStrArr': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_102(self):
        request = [{'ok': {'value': {'pStrArr': {'wrap': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_103(self):
        request = [{'ok': {'value': {'pStrNullArr': {'wrap': None}}}}, {'fn.test': {'value': {'pStrNullArr': {'wrap': None}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullArr': {'wrap': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_104(self):
        request = [{'ok': {'value': {'pStrNullArr': {'wrap': []}}}}, {'fn.test': {'value': {'pStrNullArr': {'wrap': []}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullArr': {'wrap': []}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_105(self):
        request = [{'ok': {'value': {'pStrNullArr': {'wrap': [False, 0, 0.1, '']}}}}, {'fn.test': {'value': {'pStrNullArr': {'wrap': [False, 0, 0.1, '']}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullArr': {'wrap': [False, 0, 0.1, '']}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_106(self):
        request = [{}, {'fn.test': {'value': {'pStrNullArr': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_107(self):
        request = [{}, {'fn.test': {'value': {'pStrNullArr': {'wrap': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_108(self):
        request = [{}, {'fn.test': {'value': {'pStrNullArr': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_109(self):
        request = [{}, {'fn.test': {'value': {'pStrNullArr': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_110(self):
        request = [{}, {'fn.test': {'value': {'pStrNullArr': {'wrap': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_111(self):
        request = [{'ok': {'value': {'pStrNullArr': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_112(self):
        request = [{'ok': {'value': {'pStrNullArr': {'wrap': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_113(self):
        request = [{'ok': {'value': {'pStrNullArr': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_114(self):
        request = [{'ok': {'value': {'pStrNullArr': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_115(self):
        request = [{'ok': {'value': {'pStrNullArr': {'wrap': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullArr.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_116(self):
        request = [{'ok': {'value': {'pEnumArr': {'one': {}}}}}, {'fn.test': {'value': {'pEnumArr': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumArr': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_117(self):
        request = [{'ok': {'value': {'pEnumArr': {'two': {'ewrap': []}}}}}, {'fn.test': {'value': {'pEnumArr': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumArr': {'two': {'ewrap': []}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_118(self):
        request = [{'ok': {'value': {'pEnumArr': {'two': {'ewrap': [False, 0, 0.1, '']}}}}}, {'fn.test': {'value': {'pEnumArr': {'two': {'ewrap': [False, 0, 0.1, '']}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumArr': {'two': {'ewrap': [False, 0, 0.1, '']}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_119(self):
        request = [{}, {'fn.test': {'value': {'pEnumArr': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_120(self):
        request = [{}, {'fn.test': {'value': {'pEnumArr': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_121(self):
        request = [{}, {'fn.test': {'value': {'pEnumArr': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_122(self):
        request = [{}, {'fn.test': {'value': {'pEnumArr': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_123(self):
        request = [{}, {'fn.test': {'value': {'pEnumArr': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_124(self):
        request = [{}, {'fn.test': {'value': {'pEnumArr': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_125(self):
        request = [{'ok': {'value': {'pEnumArr': {'two': {'ewrap': None}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_126(self):
        request = [{'ok': {'value': {'pEnumArr': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_127(self):
        request = [{'ok': {'value': {'pEnumArr': {'two': {'ewrap': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_128(self):
        request = [{'ok': {'value': {'pEnumArr': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_129(self):
        request = [{'ok': {'value': {'pEnumArr': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_130(self):
        request = [{'ok': {'value': {'pEnumArr': {'two': {'ewrap': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_131(self):
        request = [{'ok': {'value': {'pEnumNullArr': {'one': {}}}}}, {'fn.test': {'value': {'pEnumNullArr': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullArr': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_132(self):
        request = [{'ok': {'value': {'pEnumNullArr': {'two': {'ewrap': None}}}}}, {'fn.test': {'value': {'pEnumNullArr': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullArr': {'two': {'ewrap': None}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_133(self):
        request = [{'ok': {'value': {'pEnumNullArr': {'two': {'ewrap': []}}}}}, {'fn.test': {'value': {'pEnumNullArr': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullArr': {'two': {'ewrap': []}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_134(self):
        request = [{'ok': {'value': {'pEnumNullArr': {'two': {'ewrap': [False, 0, 0.1, '']}}}}}, {'fn.test': {'value': {'pEnumNullArr': {'two': {'ewrap': [False, 0, 0.1, '']}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullArr': {'two': {'ewrap': [False, 0, 0.1, '']}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_135(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullArr': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_136(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullArr': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_137(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullArr': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_138(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullArr': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_139(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullArr': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_140(self):
        request = [{'ok': {'value': {'pEnumNullArr': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_141(self):
        request = [{'ok': {'value': {'pEnumNullArr': {'two': {'ewrap': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_142(self):
        request = [{'ok': {'value': {'pEnumNullArr': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_143(self):
        request = [{'ok': {'value': {'pEnumNullArr': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_array_144(self):
        request = [{'ok': {'value': {'pEnumNullArr': {'two': {'ewrap': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullArr.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_0(self):
        request = [{'ok': {'value': {'obj': {}}}}, {'fn.test': {'value': {'obj': {}}}}]
        expected_response = [{}, {'ok': {'value': {'obj': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_1(self):
        request = [{'ok': {'value': {'obj': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}, {'fn.test': {'value': {'obj': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}]
        expected_response = [{}, {'ok': {'value': {'obj': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=231, use_client=True, use_binary=True)

    def test_binary_client_object_2(self):
        request = [{}, {'fn.test': {'value': {'obj': None}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.obj', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_3(self):
        request = [{}, {'fn.test': {'value': {'obj': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.obj', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_4(self):
        request = [{}, {'fn.test': {'value': {'obj': 0}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.obj', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_5(self):
        request = [{}, {'fn.test': {'value': {'obj': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.obj', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_6(self):
        request = [{}, {'fn.test': {'value': {'obj': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.obj', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_7(self):
        request = [{}, {'fn.test': {'value': {'obj': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.obj', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_8(self):
        request = [{'ok': {'value': {'obj': None}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.obj', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_9(self):
        request = [{'ok': {'value': {'obj': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.obj', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_10(self):
        request = [{'ok': {'value': {'obj': 0}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.obj', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_11(self):
        request = [{'ok': {'value': {'obj': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.obj', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_12(self):
        request = [{'ok': {'value': {'obj': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.obj', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_13(self):
        request = [{'ok': {'value': {'obj': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.obj', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_14(self):
        request = [{'ok': {'value': {'nullObj': None}}}, {'fn.test': {'value': {'nullObj': None}}}]
        expected_response = [{}, {'ok': {'value': {'nullObj': None}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_15(self):
        request = [{'ok': {'value': {'nullObj': {}}}}, {'fn.test': {'value': {'nullObj': {}}}}]
        expected_response = [{}, {'ok': {'value': {'nullObj': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_16(self):
        request = [{'ok': {'value': {'nullObj': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}, {'fn.test': {'value': {'nullObj': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}]
        expected_response = [{}, {'ok': {'value': {'nullObj': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=231, use_client=True, use_binary=True)

    def test_binary_client_object_17(self):
        request = [{}, {'fn.test': {'value': {'nullObj': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullObj', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_18(self):
        request = [{}, {'fn.test': {'value': {'nullObj': 0}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullObj', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_19(self):
        request = [{}, {'fn.test': {'value': {'nullObj': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullObj', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_20(self):
        request = [{}, {'fn.test': {'value': {'nullObj': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullObj', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_21(self):
        request = [{}, {'fn.test': {'value': {'nullObj': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullObj', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_22(self):
        request = [{'ok': {'value': {'nullObj': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullObj', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_23(self):
        request = [{'ok': {'value': {'nullObj': 0}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullObj', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_24(self):
        request = [{'ok': {'value': {'nullObj': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullObj', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_25(self):
        request = [{'ok': {'value': {'nullObj': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullObj', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_26(self):
        request = [{'ok': {'value': {'nullObj': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullObj', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_27(self):
        request = [{'ok': {'value': {'arrObj': []}}}, {'fn.test': {'value': {'arrObj': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrObj': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_28(self):
        request = [{'ok': {'value': {'arrObj': [{}]}}}, {'fn.test': {'value': {'arrObj': [{}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrObj': [{}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_29(self):
        request = [{'ok': {'value': {'arrObj': [{'a': False, 'b': 0, 'c': 0.1, 'd': ''}]}}}, {'fn.test': {'value': {'arrObj': [{'a': False, 'b': 0, 'c': 0.1, 'd': ''}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrObj': [{'a': False, 'b': 0, 'c': 0.1, 'd': ''}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_30(self):
        request = [{'ok': {'value': {'arrObj': [{}, {'a': False, 'b': 0, 'c': 0.1, 'd': ''}]}}}, {'fn.test': {'value': {'arrObj': [{}, {'a': False, 'b': 0, 'c': 0.1, 'd': ''}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrObj': [{}, {'a': False, 'b': 0, 'c': 0.1, 'd': ''}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_31(self):
        request = [{}, {'fn.test': {'value': {'arrObj': [{}, None]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrObj[1]', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_32(self):
        request = [{}, {'fn.test': {'value': {'arrObj': [{}, False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrObj[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_33(self):
        request = [{}, {'fn.test': {'value': {'arrObj': [{}, 0]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrObj[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_34(self):
        request = [{}, {'fn.test': {'value': {'arrObj': [{}, 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrObj[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_35(self):
        request = [{}, {'fn.test': {'value': {'arrObj': [{}, '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrObj[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_36(self):
        request = [{}, {'fn.test': {'value': {'arrObj': [{}, []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrObj[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_37(self):
        request = [{'ok': {'value': {'arrObj': [{}, None]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrObj[1]', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_38(self):
        request = [{'ok': {'value': {'arrObj': [{}, False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrObj[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_39(self):
        request = [{'ok': {'value': {'arrObj': [{}, 0]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrObj[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_40(self):
        request = [{'ok': {'value': {'arrObj': [{}, 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrObj[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_41(self):
        request = [{'ok': {'value': {'arrObj': [{}, '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrObj[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_42(self):
        request = [{'ok': {'value': {'arrObj': [{}, []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrObj[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_43(self):
        request = [{'ok': {'value': {'arrNullObj': []}}}, {'fn.test': {'value': {'arrNullObj': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullObj': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_44(self):
        request = [{'ok': {'value': {'arrNullObj': [None]}}}, {'fn.test': {'value': {'arrNullObj': [None]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullObj': [None]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_45(self):
        request = [{'ok': {'value': {'arrNullObj': [{}]}}}, {'fn.test': {'value': {'arrNullObj': [{}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullObj': [{}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_46(self):
        request = [{'ok': {'value': {'arrNullObj': [{'a': False, 'b': 0, 'c': 0.1, 'd': ''}]}}}, {'fn.test': {'value': {'arrNullObj': [{'a': False, 'b': 0, 'c': 0.1, 'd': ''}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullObj': [{'a': False, 'b': 0, 'c': 0.1, 'd': ''}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_47(self):
        request = [{'ok': {'value': {'arrNullObj': [None, {}, {'a': False, 'b': 0, 'c': 0.1, 'd': ''}]}}}, {'fn.test': {'value': {'arrNullObj': [None, {}, {'a': False, 'b': 0, 'c': 0.1, 'd': ''}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullObj': [None, {}, {'a': False, 'b': 0, 'c': 0.1, 'd': ''}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_48(self):
        request = [{}, {'fn.test': {'value': {'arrNullObj': [{}, False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullObj[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_49(self):
        request = [{}, {'fn.test': {'value': {'arrNullObj': [{}, 0]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullObj[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_50(self):
        request = [{}, {'fn.test': {'value': {'arrNullObj': [{}, 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullObj[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_51(self):
        request = [{}, {'fn.test': {'value': {'arrNullObj': [{}, '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullObj[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_52(self):
        request = [{}, {'fn.test': {'value': {'arrNullObj': [{}, []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullObj[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_53(self):
        request = [{'ok': {'value': {'arrNullObj': [{}, False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullObj[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_54(self):
        request = [{'ok': {'value': {'arrNullObj': [{}, 0]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullObj[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_55(self):
        request = [{'ok': {'value': {'arrNullObj': [{}, 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullObj[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_56(self):
        request = [{'ok': {'value': {'arrNullObj': [{}, '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullObj[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_57(self):
        request = [{'ok': {'value': {'arrNullObj': [{}, []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullObj[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_58(self):
        request = [{'ok': {'value': {'objObj': {}}}}, {'fn.test': {'value': {'objObj': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objObj': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_59(self):
        request = [{'ok': {'value': {'objObj': {'a': {}}}}}, {'fn.test': {'value': {'objObj': {'a': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'objObj': {'a': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_60(self):
        request = [{'ok': {'value': {'objObj': {'a': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}, {'fn.test': {'value': {'objObj': {'a': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}]
        expected_response = [{}, {'ok': {'value': {'objObj': {'a': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_61(self):
        request = [{'ok': {'value': {'objObj': {'a': {}, 'b': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}, {'fn.test': {'value': {'objObj': {'a': {}, 'b': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}]
        expected_response = [{}, {'ok': {'value': {'objObj': {'a': {}, 'b': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_62(self):
        request = [{}, {'fn.test': {'value': {'objObj': {'a': {}, 'b': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objObj{b}', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_63(self):
        request = [{}, {'fn.test': {'value': {'objObj': {'a': {}, 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objObj{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_64(self):
        request = [{}, {'fn.test': {'value': {'objObj': {'a': {}, 'b': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objObj{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_65(self):
        request = [{}, {'fn.test': {'value': {'objObj': {'a': {}, 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objObj{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_66(self):
        request = [{}, {'fn.test': {'value': {'objObj': {'a': {}, 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objObj{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_67(self):
        request = [{}, {'fn.test': {'value': {'objObj': {'a': {}, 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objObj{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_68(self):
        request = [{'ok': {'value': {'objObj': {'a': {}, 'b': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objObj{b}', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_69(self):
        request = [{'ok': {'value': {'objObj': {'a': {}, 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objObj{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_70(self):
        request = [{'ok': {'value': {'objObj': {'a': {}, 'b': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objObj{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_71(self):
        request = [{'ok': {'value': {'objObj': {'a': {}, 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objObj{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_72(self):
        request = [{'ok': {'value': {'objObj': {'a': {}, 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objObj{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_73(self):
        request = [{'ok': {'value': {'objObj': {'a': {}, 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objObj{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_74(self):
        request = [{'ok': {'value': {'objNullObj': {}}}}, {'fn.test': {'value': {'objNullObj': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullObj': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_75(self):
        request = [{'ok': {'value': {'objNullObj': {'a': None}}}}, {'fn.test': {'value': {'objNullObj': {'a': None}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullObj': {'a': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_76(self):
        request = [{'ok': {'value': {'objNullObj': {'a': {}}}}}, {'fn.test': {'value': {'objNullObj': {'a': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullObj': {'a': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_77(self):
        request = [{'ok': {'value': {'objNullObj': {'a': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}, {'fn.test': {'value': {'objNullObj': {'a': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullObj': {'a': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_78(self):
        request = [{'ok': {'value': {'objNullObj': {'a': None, 'b': {}, 'c': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}, {'fn.test': {'value': {'objNullObj': {'a': None, 'b': {}, 'c': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullObj': {'a': None, 'b': {}, 'c': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_79(self):
        request = [{}, {'fn.test': {'value': {'objNullObj': {'a': {}, 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullObj{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_80(self):
        request = [{}, {'fn.test': {'value': {'objNullObj': {'a': {}, 'b': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullObj{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_81(self):
        request = [{}, {'fn.test': {'value': {'objNullObj': {'a': {}, 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullObj{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_82(self):
        request = [{}, {'fn.test': {'value': {'objNullObj': {'a': {}, 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullObj{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_83(self):
        request = [{}, {'fn.test': {'value': {'objNullObj': {'a': {}, 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullObj{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_84(self):
        request = [{'ok': {'value': {'objNullObj': {'a': {}, 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullObj{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_85(self):
        request = [{'ok': {'value': {'objNullObj': {'a': {}, 'b': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullObj{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_86(self):
        request = [{'ok': {'value': {'objNullObj': {'a': {}, 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullObj{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_87(self):
        request = [{'ok': {'value': {'objNullObj': {'a': {}, 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullObj{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_88(self):
        request = [{'ok': {'value': {'objNullObj': {'a': {}, 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullObj{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_89(self):
        request = [{'ok': {'value': {'pStrObj': {'wrap': {}}}}}, {'fn.test': {'value': {'pStrObj': {'wrap': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrObj': {'wrap': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_90(self):
        request = [{'ok': {'value': {'pStrObj': {'wrap': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}, {'fn.test': {'value': {'pStrObj': {'wrap': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrObj': {'wrap': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_91(self):
        request = [{}, {'fn.test': {'value': {'pStrObj': {'wrap': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_92(self):
        request = [{}, {'fn.test': {'value': {'pStrObj': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_93(self):
        request = [{}, {'fn.test': {'value': {'pStrObj': {'wrap': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_94(self):
        request = [{}, {'fn.test': {'value': {'pStrObj': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_95(self):
        request = [{}, {'fn.test': {'value': {'pStrObj': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_96(self):
        request = [{}, {'fn.test': {'value': {'pStrObj': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_97(self):
        request = [{'ok': {'value': {'pStrObj': {'wrap': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_98(self):
        request = [{'ok': {'value': {'pStrObj': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_99(self):
        request = [{'ok': {'value': {'pStrObj': {'wrap': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_100(self):
        request = [{'ok': {'value': {'pStrObj': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_101(self):
        request = [{'ok': {'value': {'pStrObj': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_102(self):
        request = [{'ok': {'value': {'pStrObj': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_103(self):
        request = [{'ok': {'value': {'pStrNullObj': {'wrap': None}}}}, {'fn.test': {'value': {'pStrNullObj': {'wrap': None}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullObj': {'wrap': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_104(self):
        request = [{'ok': {'value': {'pStrNullObj': {'wrap': {}}}}}, {'fn.test': {'value': {'pStrNullObj': {'wrap': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullObj': {'wrap': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_105(self):
        request = [{'ok': {'value': {'pStrNullObj': {'wrap': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}, {'fn.test': {'value': {'pStrNullObj': {'wrap': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullObj': {'wrap': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_106(self):
        request = [{}, {'fn.test': {'value': {'pStrNullObj': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_107(self):
        request = [{}, {'fn.test': {'value': {'pStrNullObj': {'wrap': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_108(self):
        request = [{}, {'fn.test': {'value': {'pStrNullObj': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_109(self):
        request = [{}, {'fn.test': {'value': {'pStrNullObj': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_110(self):
        request = [{}, {'fn.test': {'value': {'pStrNullObj': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_111(self):
        request = [{'ok': {'value': {'pStrNullObj': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_112(self):
        request = [{'ok': {'value': {'pStrNullObj': {'wrap': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_113(self):
        request = [{'ok': {'value': {'pStrNullObj': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_114(self):
        request = [{'ok': {'value': {'pStrNullObj': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_115(self):
        request = [{'ok': {'value': {'pStrNullObj': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullObj.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_116(self):
        request = [{'ok': {'value': {'pEnumObj': {'one': {}}}}}, {'fn.test': {'value': {'pEnumObj': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumObj': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_117(self):
        request = [{'ok': {'value': {'pEnumObj': {'two': {'ewrap': {}}}}}}, {'fn.test': {'value': {'pEnumObj': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumObj': {'two': {'ewrap': {}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_118(self):
        request = [{'ok': {'value': {'pEnumObj': {'two': {'ewrap': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}}, {'fn.test': {'value': {'pEnumObj': {'two': {'ewrap': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumObj': {'two': {'ewrap': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_119(self):
        request = [{}, {'fn.test': {'value': {'pEnumObj': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_120(self):
        request = [{}, {'fn.test': {'value': {'pEnumObj': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_121(self):
        request = [{}, {'fn.test': {'value': {'pEnumObj': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_122(self):
        request = [{}, {'fn.test': {'value': {'pEnumObj': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_123(self):
        request = [{}, {'fn.test': {'value': {'pEnumObj': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_124(self):
        request = [{}, {'fn.test': {'value': {'pEnumObj': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_125(self):
        request = [{'ok': {'value': {'pEnumObj': {'two': {'ewrap': None}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_126(self):
        request = [{'ok': {'value': {'pEnumObj': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_127(self):
        request = [{'ok': {'value': {'pEnumObj': {'two': {'ewrap': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_128(self):
        request = [{'ok': {'value': {'pEnumObj': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_129(self):
        request = [{'ok': {'value': {'pEnumObj': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_130(self):
        request = [{'ok': {'value': {'pEnumObj': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_131(self):
        request = [{'ok': {'value': {'pEnumNullObj': {'one': {}}}}}, {'fn.test': {'value': {'pEnumNullObj': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullObj': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_132(self):
        request = [{'ok': {'value': {'pEnumNullObj': {'two': {'ewrap': None}}}}}, {'fn.test': {'value': {'pEnumNullObj': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullObj': {'two': {'ewrap': None}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_133(self):
        request = [{'ok': {'value': {'pEnumNullObj': {'two': {'ewrap': {}}}}}}, {'fn.test': {'value': {'pEnumNullObj': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullObj': {'two': {'ewrap': {}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_134(self):
        request = [{'ok': {'value': {'pEnumNullObj': {'two': {'ewrap': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}}, {'fn.test': {'value': {'pEnumNullObj': {'two': {'ewrap': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullObj': {'two': {'ewrap': {'a': False, 'b': 0, 'c': 0.1, 'd': ''}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_135(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullObj': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_136(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullObj': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_137(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullObj': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_138(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullObj': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_139(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullObj': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_140(self):
        request = [{'ok': {'value': {'pEnumNullObj': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_141(self):
        request = [{'ok': {'value': {'pEnumNullObj': {'two': {'ewrap': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_142(self):
        request = [{'ok': {'value': {'pEnumNullObj': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_143(self):
        request = [{'ok': {'value': {'pEnumNullObj': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_object_144(self):
        request = [{'ok': {'value': {'pEnumNullObj': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullObj.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_0(self):
        request = [{'ok': {'value': {'any': False}}}, {'fn.test': {'value': {'any': False}}}]
        expected_response = [{}, {'ok': {'value': {'any': False}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_1(self):
        request = [{'ok': {'value': {'any': 0}}}, {'fn.test': {'value': {'any': 0}}}]
        expected_response = [{}, {'ok': {'value': {'any': 0}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_2(self):
        request = [{'ok': {'value': {'any': 0.1}}}, {'fn.test': {'value': {'any': 0.1}}}]
        expected_response = [{}, {'ok': {'value': {'any': 0.1}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_3(self):
        request = [{'ok': {'value': {'any': ''}}}, {'fn.test': {'value': {'any': ''}}}]
        expected_response = [{}, {'ok': {'value': {'any': ''}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_4(self):
        request = [{'ok': {'value': {'any': []}}}, {'fn.test': {'value': {'any': []}}}]
        expected_response = [{}, {'ok': {'value': {'any': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_5(self):
        request = [{'ok': {'value': {'any': {}}}}, {'fn.test': {'value': {'any': {}}}}]
        expected_response = [{}, {'ok': {'value': {'any': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_6(self):
        request = [{}, {'fn.test': {'value': {'any': None}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.any', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Any': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_7(self):
        request = [{'ok': {'value': {'any': None}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.any', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Any': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_8(self):
        request = [{'ok': {'value': {'nullAny': None}}}, {'fn.test': {'value': {'nullAny': None}}}]
        expected_response = [{}, {'ok': {'value': {'nullAny': None}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_9(self):
        request = [{'ok': {'value': {'nullAny': False}}}, {'fn.test': {'value': {'nullAny': False}}}]
        expected_response = [{}, {'ok': {'value': {'nullAny': False}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_10(self):
        request = [{'ok': {'value': {'nullAny': 0}}}, {'fn.test': {'value': {'nullAny': 0}}}]
        expected_response = [{}, {'ok': {'value': {'nullAny': 0}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_11(self):
        request = [{'ok': {'value': {'nullAny': 0.1}}}, {'fn.test': {'value': {'nullAny': 0.1}}}]
        expected_response = [{}, {'ok': {'value': {'nullAny': 0.1}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_12(self):
        request = [{'ok': {'value': {'nullAny': ''}}}, {'fn.test': {'value': {'nullAny': ''}}}]
        expected_response = [{}, {'ok': {'value': {'nullAny': ''}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_13(self):
        request = [{'ok': {'value': {'nullAny': []}}}, {'fn.test': {'value': {'nullAny': []}}}]
        expected_response = [{}, {'ok': {'value': {'nullAny': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_14(self):
        request = [{'ok': {'value': {'nullAny': {}}}}, {'fn.test': {'value': {'nullAny': {}}}}]
        expected_response = [{}, {'ok': {'value': {'nullAny': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_15(self):
        request = [{'ok': {'value': {'arrAny': []}}}, {'fn.test': {'value': {'arrAny': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrAny': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_16(self):
        request = [{'ok': {'value': {'arrAny': [False]}}}, {'fn.test': {'value': {'arrAny': [False]}}}]
        expected_response = [{}, {'ok': {'value': {'arrAny': [False]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_17(self):
        request = [{'ok': {'value': {'arrAny': [0]}}}, {'fn.test': {'value': {'arrAny': [0]}}}]
        expected_response = [{}, {'ok': {'value': {'arrAny': [0]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_18(self):
        request = [{'ok': {'value': {'arrAny': [0.1]}}}, {'fn.test': {'value': {'arrAny': [0.1]}}}]
        expected_response = [{}, {'ok': {'value': {'arrAny': [0.1]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_19(self):
        request = [{'ok': {'value': {'arrAny': ['']}}}, {'fn.test': {'value': {'arrAny': ['']}}}]
        expected_response = [{}, {'ok': {'value': {'arrAny': ['']}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_20(self):
        request = [{'ok': {'value': {'arrAny': [[]]}}}, {'fn.test': {'value': {'arrAny': [[]]}}}]
        expected_response = [{}, {'ok': {'value': {'arrAny': [[]]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_21(self):
        request = [{'ok': {'value': {'arrAny': [{}]}}}, {'fn.test': {'value': {'arrAny': [{}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrAny': [{}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_22(self):
        request = [{'ok': {'value': {'arrAny': [False, 0, 0.1, '', [], {}]}}}, {'fn.test': {'value': {'arrAny': [False, 0, 0.1, '', [], {}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrAny': [False, 0, 0.1, '', [], {}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=231, use_client=True, use_binary=True)

    def test_binary_client_any_23(self):
        request = [{}, {'fn.test': {'value': {'arrAny': [False, None]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrAny[1]', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Any': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_24(self):
        request = [{'ok': {'value': {'arrAny': [False, None]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrAny[1]', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Any': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_25(self):
        request = [{'ok': {'value': {'arrNullAny': []}}}, {'fn.test': {'value': {'arrNullAny': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullAny': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_26(self):
        request = [{'ok': {'value': {'arrNullAny': [None]}}}, {'fn.test': {'value': {'arrNullAny': [None]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullAny': [None]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_27(self):
        request = [{'ok': {'value': {'arrNullAny': [False]}}}, {'fn.test': {'value': {'arrNullAny': [False]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullAny': [False]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_28(self):
        request = [{'ok': {'value': {'arrNullAny': [0]}}}, {'fn.test': {'value': {'arrNullAny': [0]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullAny': [0]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_29(self):
        request = [{'ok': {'value': {'arrNullAny': [0.1]}}}, {'fn.test': {'value': {'arrNullAny': [0.1]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullAny': [0.1]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_30(self):
        request = [{'ok': {'value': {'arrNullAny': ['']}}}, {'fn.test': {'value': {'arrNullAny': ['']}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullAny': ['']}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_31(self):
        request = [{'ok': {'value': {'arrNullAny': [[]]}}}, {'fn.test': {'value': {'arrNullAny': [[]]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullAny': [[]]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_32(self):
        request = [{'ok': {'value': {'arrNullAny': [{}]}}}, {'fn.test': {'value': {'arrNullAny': [{}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullAny': [{}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_33(self):
        request = [{'ok': {'value': {'arrNullAny': [None, False, 0, 0.1, '', [], {}]}}}, {'fn.test': {'value': {'arrNullAny': [None, False, 0, 0.1, '', [], {}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullAny': [None, False, 0, 0.1, '', [], {}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=231, use_client=True, use_binary=True)

    def test_binary_client_any_34(self):
        request = [{'ok': {'value': {'objAny': {}}}}, {'fn.test': {'value': {'objAny': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objAny': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_35(self):
        request = [{'ok': {'value': {'objAny': {'a': False}}}}, {'fn.test': {'value': {'objAny': {'a': False}}}}]
        expected_response = [{}, {'ok': {'value': {'objAny': {'a': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_36(self):
        request = [{'ok': {'value': {'objAny': {'a': 0}}}}, {'fn.test': {'value': {'objAny': {'a': 0}}}}]
        expected_response = [{}, {'ok': {'value': {'objAny': {'a': 0}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_37(self):
        request = [{'ok': {'value': {'objAny': {'a': 0.1}}}}, {'fn.test': {'value': {'objAny': {'a': 0.1}}}}]
        expected_response = [{}, {'ok': {'value': {'objAny': {'a': 0.1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_38(self):
        request = [{'ok': {'value': {'objAny': {'a': ''}}}}, {'fn.test': {'value': {'objAny': {'a': ''}}}}]
        expected_response = [{}, {'ok': {'value': {'objAny': {'a': ''}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_39(self):
        request = [{'ok': {'value': {'objAny': {'a': []}}}}, {'fn.test': {'value': {'objAny': {'a': []}}}}]
        expected_response = [{}, {'ok': {'value': {'objAny': {'a': []}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_40(self):
        request = [{'ok': {'value': {'objAny': {'a': {}}}}}, {'fn.test': {'value': {'objAny': {'a': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'objAny': {'a': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_41(self):
        request = [{'ok': {'value': {'objAny': {'a': False, 'b': 0, 'c': 0.1, 'd': '', 'e': [], 'f': {}}}}}, {'fn.test': {'value': {'objAny': {'a': False, 'b': 0, 'c': 0.1, 'd': '', 'e': [], 'f': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'objAny': {'a': False, 'b': 0, 'c': 0.1, 'd': '', 'e': [], 'f': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=231, use_client=True, use_binary=True)

    def test_binary_client_any_42(self):
        request = [{}, {'fn.test': {'value': {'objAny': {'a': False, 'b': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objAny{b}', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Any': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_43(self):
        request = [{'ok': {'value': {'objAny': {'a': False, 'b': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objAny{b}', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Any': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_44(self):
        request = [{'ok': {'value': {'objNullAny': {}}}}, {'fn.test': {'value': {'objNullAny': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullAny': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_45(self):
        request = [{'ok': {'value': {'objNullAny': {'a': None}}}}, {'fn.test': {'value': {'objNullAny': {'a': None}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullAny': {'a': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_46(self):
        request = [{'ok': {'value': {'objNullAny': {'a': False}}}}, {'fn.test': {'value': {'objNullAny': {'a': False}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullAny': {'a': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_47(self):
        request = [{'ok': {'value': {'objNullAny': {'a': 0}}}}, {'fn.test': {'value': {'objNullAny': {'a': 0}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullAny': {'a': 0}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_48(self):
        request = [{'ok': {'value': {'objNullAny': {'a': 0.1}}}}, {'fn.test': {'value': {'objNullAny': {'a': 0.1}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullAny': {'a': 0.1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_49(self):
        request = [{'ok': {'value': {'objNullAny': {'a': ''}}}}, {'fn.test': {'value': {'objNullAny': {'a': ''}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullAny': {'a': ''}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_50(self):
        request = [{'ok': {'value': {'objNullAny': {'a': []}}}}, {'fn.test': {'value': {'objNullAny': {'a': []}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullAny': {'a': []}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_51(self):
        request = [{'ok': {'value': {'objNullAny': {'a': {}}}}}, {'fn.test': {'value': {'objNullAny': {'a': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullAny': {'a': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_52(self):
        request = [{'ok': {'value': {'objNullAny': {'a': None, 'b': False, 'c': 0, 'd': 0.1, 'e': '', 'f': [], 'g': {}}}}}, {'fn.test': {'value': {'objNullAny': {'a': None, 'b': False, 'c': 0, 'd': 0.1, 'e': '', 'f': [], 'g': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullAny': {'a': None, 'b': False, 'c': 0, 'd': 0.1, 'e': '', 'f': [], 'g': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=231, use_client=True, use_binary=True)

    def test_binary_client_any_53(self):
        request = [{'ok': {'value': {'pStrAny': {'wrap': False}}}}, {'fn.test': {'value': {'pStrAny': {'wrap': False}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrAny': {'wrap': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_54(self):
        request = [{'ok': {'value': {'pStrAny': {'wrap': 0}}}}, {'fn.test': {'value': {'pStrAny': {'wrap': 0}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrAny': {'wrap': 0}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_55(self):
        request = [{'ok': {'value': {'pStrAny': {'wrap': 0.1}}}}, {'fn.test': {'value': {'pStrAny': {'wrap': 0.1}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrAny': {'wrap': 0.1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_56(self):
        request = [{'ok': {'value': {'pStrAny': {'wrap': ''}}}}, {'fn.test': {'value': {'pStrAny': {'wrap': ''}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrAny': {'wrap': ''}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_57(self):
        request = [{'ok': {'value': {'pStrAny': {'wrap': []}}}}, {'fn.test': {'value': {'pStrAny': {'wrap': []}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrAny': {'wrap': []}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_58(self):
        request = [{'ok': {'value': {'pStrAny': {'wrap': {}}}}}, {'fn.test': {'value': {'pStrAny': {'wrap': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrAny': {'wrap': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_59(self):
        request = [{}, {'fn.test': {'value': {'pStrAny': {'wrap': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrAny.wrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Any': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_60(self):
        request = [{'ok': {'value': {'pStrAny': {'wrap': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrAny.wrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Any': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_61(self):
        request = [{'ok': {'value': {'pStrNullAny': {'wrap': None}}}}, {'fn.test': {'value': {'pStrNullAny': {'wrap': None}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullAny': {'wrap': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_62(self):
        request = [{'ok': {'value': {'pStrNullAny': {'wrap': False}}}}, {'fn.test': {'value': {'pStrNullAny': {'wrap': False}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullAny': {'wrap': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_63(self):
        request = [{'ok': {'value': {'pStrNullAny': {'wrap': 0}}}}, {'fn.test': {'value': {'pStrNullAny': {'wrap': 0}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullAny': {'wrap': 0}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_64(self):
        request = [{'ok': {'value': {'pStrNullAny': {'wrap': 0.1}}}}, {'fn.test': {'value': {'pStrNullAny': {'wrap': 0.1}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullAny': {'wrap': 0.1}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_65(self):
        request = [{'ok': {'value': {'pStrNullAny': {'wrap': ''}}}}, {'fn.test': {'value': {'pStrNullAny': {'wrap': ''}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullAny': {'wrap': ''}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_66(self):
        request = [{'ok': {'value': {'pStrNullAny': {'wrap': []}}}}, {'fn.test': {'value': {'pStrNullAny': {'wrap': []}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullAny': {'wrap': []}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_67(self):
        request = [{'ok': {'value': {'pStrNullAny': {'wrap': {}}}}}, {'fn.test': {'value': {'pStrNullAny': {'wrap': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullAny': {'wrap': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_68(self):
        request = [{'ok': {'value': {'pEnumAny': {'one': {}}}}}, {'fn.test': {'value': {'pEnumAny': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumAny': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_69(self):
        request = [{'ok': {'value': {'pEnumAny': {'two': {'ewrap': False}}}}}, {'fn.test': {'value': {'pEnumAny': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumAny': {'two': {'ewrap': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_70(self):
        request = [{'ok': {'value': {'pEnumAny': {'two': {'ewrap': 0}}}}}, {'fn.test': {'value': {'pEnumAny': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumAny': {'two': {'ewrap': 0}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_71(self):
        request = [{'ok': {'value': {'pEnumAny': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {'value': {'pEnumAny': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumAny': {'two': {'ewrap': 0.1}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_72(self):
        request = [{'ok': {'value': {'pEnumAny': {'two': {'ewrap': ''}}}}}, {'fn.test': {'value': {'pEnumAny': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumAny': {'two': {'ewrap': ''}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_73(self):
        request = [{'ok': {'value': {'pEnumAny': {'two': {'ewrap': []}}}}}, {'fn.test': {'value': {'pEnumAny': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumAny': {'two': {'ewrap': []}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_74(self):
        request = [{'ok': {'value': {'pEnumAny': {'two': {'ewrap': {}}}}}}, {'fn.test': {'value': {'pEnumAny': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumAny': {'two': {'ewrap': {}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_75(self):
        request = [{}, {'fn.test': {'value': {'pEnumAny': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumAny.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Any': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_76(self):
        request = [{'ok': {'value': {'pEnumAny': {'two': {'ewrap': None}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumAny.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Any': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_77(self):
        request = [{'ok': {'value': {'pEnumNullAny': {'one': {}}}}}, {'fn.test': {'value': {'pEnumNullAny': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullAny': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_78(self):
        request = [{'ok': {'value': {'pEnumNullAny': {'two': {'ewrap': None}}}}}, {'fn.test': {'value': {'pEnumNullAny': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullAny': {'two': {'ewrap': None}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_79(self):
        request = [{'ok': {'value': {'pEnumNullAny': {'two': {'ewrap': False}}}}}, {'fn.test': {'value': {'pEnumNullAny': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullAny': {'two': {'ewrap': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_80(self):
        request = [{'ok': {'value': {'pEnumNullAny': {'two': {'ewrap': 0}}}}}, {'fn.test': {'value': {'pEnumNullAny': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullAny': {'two': {'ewrap': 0}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_81(self):
        request = [{'ok': {'value': {'pEnumNullAny': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {'value': {'pEnumNullAny': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullAny': {'two': {'ewrap': 0.1}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_82(self):
        request = [{'ok': {'value': {'pEnumNullAny': {'two': {'ewrap': ''}}}}}, {'fn.test': {'value': {'pEnumNullAny': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullAny': {'two': {'ewrap': ''}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_83(self):
        request = [{'ok': {'value': {'pEnumNullAny': {'two': {'ewrap': []}}}}}, {'fn.test': {'value': {'pEnumNullAny': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullAny': {'two': {'ewrap': []}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_any_84(self):
        request = [{'ok': {'value': {'pEnumNullAny': {'two': {'ewrap': {}}}}}}, {'fn.test': {'value': {'pEnumNullAny': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullAny': {'two': {'ewrap': {}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_0(self):
        request = [{'ok': {'value': {'struct': {'required': False}}}}, {'fn.test': {'value': {'struct': {'required': False}}}}]
        expected_response = [{}, {'ok': {'value': {'struct': {'required': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_1(self):
        request = [{'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {'value': {'struct': {'optional': False, 'required': False}}}}]
        expected_response = [{}, {'ok': {'value': {'struct': {'optional': False, 'required': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_2(self):
        request = [{}, {'fn.test': {'value': {'struct': {}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.struct.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_3(self):
        request = [{}, {'fn.test': {'value': {'struct': {'required': False, 'a': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.struct.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_4(self):
        request = [{}, {'fn.test': {'value': {'struct': None}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.struct', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_5(self):
        request = [{}, {'fn.test': {'value': {'struct': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.struct', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_6(self):
        request = [{}, {'fn.test': {'value': {'struct': 0}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.struct', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_7(self):
        request = [{}, {'fn.test': {'value': {'struct': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.struct', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_8(self):
        request = [{}, {'fn.test': {'value': {'struct': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.struct', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_9(self):
        request = [{}, {'fn.test': {'value': {'struct': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.struct', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_10(self):
        request = [{'ok': {'value': {'struct': {}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.struct.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_11(self):
        request = [{'ok': {'value': {'struct': {'required': False, 'a': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.struct.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_12(self):
        request = [{'ok': {'value': {'struct': None}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.struct', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_13(self):
        request = [{'ok': {'value': {'struct': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.struct', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_14(self):
        request = [{'ok': {'value': {'struct': 0}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.struct', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_15(self):
        request = [{'ok': {'value': {'struct': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.struct', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_16(self):
        request = [{'ok': {'value': {'struct': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.struct', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_17(self):
        request = [{'ok': {'value': {'struct': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.struct', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_18(self):
        request = [{'ok': {'value': {'nullStruct': None}}}, {'fn.test': {'value': {'nullStruct': None}}}]
        expected_response = [{}, {'ok': {'value': {'nullStruct': None}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_19(self):
        request = [{'ok': {'value': {'nullStruct': {'required': False}}}}, {'fn.test': {'value': {'nullStruct': {'required': False}}}}]
        expected_response = [{}, {'ok': {'value': {'nullStruct': {'required': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_20(self):
        request = [{'ok': {'value': {'nullStruct': {'optional': False, 'required': False}}}}, {'fn.test': {'value': {'nullStruct': {'optional': False, 'required': False}}}}]
        expected_response = [{}, {'ok': {'value': {'nullStruct': {'optional': False, 'required': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_21(self):
        request = [{}, {'fn.test': {'value': {'nullStruct': {}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullStruct.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_22(self):
        request = [{}, {'fn.test': {'value': {'nullStruct': {'required': False, 'a': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullStruct.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_23(self):
        request = [{}, {'fn.test': {'value': {'nullStruct': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullStruct', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_24(self):
        request = [{}, {'fn.test': {'value': {'nullStruct': 0}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullStruct', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_25(self):
        request = [{}, {'fn.test': {'value': {'nullStruct': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullStruct', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_26(self):
        request = [{}, {'fn.test': {'value': {'nullStruct': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullStruct', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_27(self):
        request = [{}, {'fn.test': {'value': {'nullStruct': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullStruct', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_28(self):
        request = [{'ok': {'value': {'nullStruct': {}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullStruct.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_29(self):
        request = [{'ok': {'value': {'nullStruct': {'required': False, 'a': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullStruct.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_30(self):
        request = [{'ok': {'value': {'nullStruct': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullStruct', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_31(self):
        request = [{'ok': {'value': {'nullStruct': 0}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullStruct', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_32(self):
        request = [{'ok': {'value': {'nullStruct': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullStruct', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_33(self):
        request = [{'ok': {'value': {'nullStruct': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullStruct', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_34(self):
        request = [{'ok': {'value': {'nullStruct': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullStruct', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_35(self):
        request = [{'ok': {'value': {'arrStruct': []}}}, {'fn.test': {'value': {'arrStruct': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrStruct': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_36(self):
        request = [{'ok': {'value': {'arrStruct': [{'required': False}]}}}, {'fn.test': {'value': {'arrStruct': [{'required': False}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrStruct': [{'required': False}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_37(self):
        request = [{'ok': {'value': {'arrStruct': [{'optional': False, 'required': False}]}}}, {'fn.test': {'value': {'arrStruct': [{'optional': False, 'required': False}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrStruct': [{'optional': False, 'required': False}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_38(self):
        request = [{'ok': {'value': {'arrStruct': [{'required': False}, {'optional': False, 'required': False}]}}}, {'fn.test': {'value': {'arrStruct': [{'required': False}, {'optional': False, 'required': False}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrStruct': [{'required': False}, {'optional': False, 'required': False}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_39(self):
        request = [{}, {'fn.test': {'value': {'arrStruct': [{'required': False}, {}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrStruct[1].required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_40(self):
        request = [{}, {'fn.test': {'value': {'arrStruct': [{'required': False}, {'required': False, 'a': False}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrStruct[1].a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_41(self):
        request = [{}, {'fn.test': {'value': {'arrStruct': [{'required': False}, None]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_42(self):
        request = [{}, {'fn.test': {'value': {'arrStruct': [{'required': False}, False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_43(self):
        request = [{}, {'fn.test': {'value': {'arrStruct': [{'required': False}, 0]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_44(self):
        request = [{}, {'fn.test': {'value': {'arrStruct': [{'required': False}, 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_45(self):
        request = [{}, {'fn.test': {'value': {'arrStruct': [{'required': False}, '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_46(self):
        request = [{}, {'fn.test': {'value': {'arrStruct': [{'required': False}, []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_47(self):
        request = [{'ok': {'value': {'arrStruct': [{'required': False}, {}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrStruct[1].required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_48(self):
        request = [{'ok': {'value': {'arrStruct': [{'required': False}, {'required': False, 'a': False}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrStruct[1].a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_49(self):
        request = [{'ok': {'value': {'arrStruct': [{'required': False}, None]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_50(self):
        request = [{'ok': {'value': {'arrStruct': [{'required': False}, False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_51(self):
        request = [{'ok': {'value': {'arrStruct': [{'required': False}, 0]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_52(self):
        request = [{'ok': {'value': {'arrStruct': [{'required': False}, 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_53(self):
        request = [{'ok': {'value': {'arrStruct': [{'required': False}, '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_54(self):
        request = [{'ok': {'value': {'arrStruct': [{'required': False}, []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_55(self):
        request = [{'ok': {'value': {'arrNullStruct': []}}}, {'fn.test': {'value': {'arrNullStruct': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullStruct': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_56(self):
        request = [{'ok': {'value': {'arrNullStruct': [None]}}}, {'fn.test': {'value': {'arrNullStruct': [None]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullStruct': [None]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_57(self):
        request = [{'ok': {'value': {'arrNullStruct': [{'required': False}]}}}, {'fn.test': {'value': {'arrNullStruct': [{'required': False}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullStruct': [{'required': False}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_58(self):
        request = [{'ok': {'value': {'arrNullStruct': [{'optional': False, 'required': False}]}}}, {'fn.test': {'value': {'arrNullStruct': [{'optional': False, 'required': False}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullStruct': [{'optional': False, 'required': False}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_59(self):
        request = [{'ok': {'value': {'arrNullStruct': [None, {'required': False}, {'optional': False, 'required': False}]}}}, {'fn.test': {'value': {'arrNullStruct': [None, {'required': False}, {'optional': False, 'required': False}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullStruct': [None, {'required': False}, {'optional': False, 'required': False}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_60(self):
        request = [{}, {'fn.test': {'value': {'arrNullStruct': [{'required': False}, {}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullStruct[1].required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_61(self):
        request = [{}, {'fn.test': {'value': {'arrNullStruct': [{'required': False}, {'required': False, 'a': False}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullStruct[1].a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_62(self):
        request = [{}, {'fn.test': {'value': {'arrNullStruct': [{'required': False}, False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_63(self):
        request = [{}, {'fn.test': {'value': {'arrNullStruct': [{'required': False}, 0]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_64(self):
        request = [{}, {'fn.test': {'value': {'arrNullStruct': [{'required': False}, 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_65(self):
        request = [{}, {'fn.test': {'value': {'arrNullStruct': [{'required': False}, '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_66(self):
        request = [{}, {'fn.test': {'value': {'arrNullStruct': [{'required': False}, []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_67(self):
        request = [{'ok': {'value': {'arrNullStruct': [{'required': False}, {}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullStruct[1].required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_68(self):
        request = [{'ok': {'value': {'arrNullStruct': [{'required': False}, {'required': False, 'a': False}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullStruct[1].a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_69(self):
        request = [{'ok': {'value': {'arrNullStruct': [{'required': False}, False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_70(self):
        request = [{'ok': {'value': {'arrNullStruct': [{'required': False}, 0]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_71(self):
        request = [{'ok': {'value': {'arrNullStruct': [{'required': False}, 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_72(self):
        request = [{'ok': {'value': {'arrNullStruct': [{'required': False}, '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_73(self):
        request = [{'ok': {'value': {'arrNullStruct': [{'required': False}, []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullStruct[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_74(self):
        request = [{'ok': {'value': {'objStruct': {}}}}, {'fn.test': {'value': {'objStruct': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objStruct': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_75(self):
        request = [{'ok': {'value': {'objStruct': {'a': {'required': False}}}}}, {'fn.test': {'value': {'objStruct': {'a': {'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'objStruct': {'a': {'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_76(self):
        request = [{'ok': {'value': {'objStruct': {'a': {'optional': False, 'required': False}}}}}, {'fn.test': {'value': {'objStruct': {'a': {'optional': False, 'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'objStruct': {'a': {'optional': False, 'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_77(self):
        request = [{'ok': {'value': {'objStruct': {'a': {'required': False}, 'b': {'optional': False, 'required': False}}}}}, {'fn.test': {'value': {'objStruct': {'a': {'required': False}, 'b': {'optional': False, 'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'objStruct': {'a': {'required': False}, 'b': {'optional': False, 'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_78(self):
        request = [{}, {'fn.test': {'value': {'objStruct': {'a': {'required': False}, 'b': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objStruct{b}.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_79(self):
        request = [{}, {'fn.test': {'value': {'objStruct': {'a': {'required': False}, 'b': {'required': False, 'a': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objStruct{b}.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_80(self):
        request = [{}, {'fn.test': {'value': {'objStruct': {'a': {'required': False}, 'b': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_81(self):
        request = [{}, {'fn.test': {'value': {'objStruct': {'a': {'required': False}, 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_82(self):
        request = [{}, {'fn.test': {'value': {'objStruct': {'a': {'required': False}, 'b': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_83(self):
        request = [{}, {'fn.test': {'value': {'objStruct': {'a': {'required': False}, 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_84(self):
        request = [{}, {'fn.test': {'value': {'objStruct': {'a': {'required': False}, 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_85(self):
        request = [{}, {'fn.test': {'value': {'objStruct': {'a': {'required': False}, 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_86(self):
        request = [{'ok': {'value': {'objStruct': {'a': {'required': False}, 'b': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objStruct{b}.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_87(self):
        request = [{'ok': {'value': {'objStruct': {'a': {'required': False}, 'b': {'required': False, 'a': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objStruct{b}.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_88(self):
        request = [{'ok': {'value': {'objStruct': {'a': {'required': False}, 'b': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_89(self):
        request = [{'ok': {'value': {'objStruct': {'a': {'required': False}, 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_90(self):
        request = [{'ok': {'value': {'objStruct': {'a': {'required': False}, 'b': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_91(self):
        request = [{'ok': {'value': {'objStruct': {'a': {'required': False}, 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_92(self):
        request = [{'ok': {'value': {'objStruct': {'a': {'required': False}, 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_93(self):
        request = [{'ok': {'value': {'objStruct': {'a': {'required': False}, 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_94(self):
        request = [{'ok': {'value': {'objNullStruct': {}}}}, {'fn.test': {'value': {'objNullStruct': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullStruct': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_95(self):
        request = [{'ok': {'value': {'objNullStruct': {'a': None}}}}, {'fn.test': {'value': {'objNullStruct': {'a': None}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullStruct': {'a': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_96(self):
        request = [{'ok': {'value': {'objNullStruct': {'a': {'required': False}}}}}, {'fn.test': {'value': {'objNullStruct': {'a': {'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullStruct': {'a': {'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_97(self):
        request = [{'ok': {'value': {'objNullStruct': {'a': {'optional': False, 'required': False}}}}}, {'fn.test': {'value': {'objNullStruct': {'a': {'optional': False, 'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullStruct': {'a': {'optional': False, 'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_98(self):
        request = [{'ok': {'value': {'objNullStruct': {'a': None, 'b': {'required': False}, 'c': {'optional': False, 'required': False}}}}}, {'fn.test': {'value': {'objNullStruct': {'a': None, 'b': {'required': False}, 'c': {'optional': False, 'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullStruct': {'a': None, 'b': {'required': False}, 'c': {'optional': False, 'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_99(self):
        request = [{}, {'fn.test': {'value': {'objNullStruct': {'a': {'required': False}, 'b': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullStruct{b}.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_100(self):
        request = [{}, {'fn.test': {'value': {'objNullStruct': {'a': {'required': False}, 'b': {'required': False, 'a': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullStruct{b}.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_101(self):
        request = [{}, {'fn.test': {'value': {'objNullStruct': {'a': {'required': False}, 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_102(self):
        request = [{}, {'fn.test': {'value': {'objNullStruct': {'a': {'required': False}, 'b': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_103(self):
        request = [{}, {'fn.test': {'value': {'objNullStruct': {'a': {'required': False}, 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_104(self):
        request = [{}, {'fn.test': {'value': {'objNullStruct': {'a': {'required': False}, 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_105(self):
        request = [{}, {'fn.test': {'value': {'objNullStruct': {'a': {'required': False}, 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_106(self):
        request = [{'ok': {'value': {'objNullStruct': {'a': {'required': False}, 'b': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullStruct{b}.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_107(self):
        request = [{'ok': {'value': {'objNullStruct': {'a': {'required': False}, 'b': {'required': False, 'a': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullStruct{b}.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_108(self):
        request = [{'ok': {'value': {'objNullStruct': {'a': {'required': False}, 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_109(self):
        request = [{'ok': {'value': {'objNullStruct': {'a': {'required': False}, 'b': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_110(self):
        request = [{'ok': {'value': {'objNullStruct': {'a': {'required': False}, 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_111(self):
        request = [{'ok': {'value': {'objNullStruct': {'a': {'required': False}, 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_112(self):
        request = [{'ok': {'value': {'objNullStruct': {'a': {'required': False}, 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullStruct{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_113(self):
        request = [{'ok': {'value': {'pStrStruct': {'wrap': {'required': False}}}}}, {'fn.test': {'value': {'pStrStruct': {'wrap': {'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrStruct': {'wrap': {'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_114(self):
        request = [{'ok': {'value': {'pStrStruct': {'wrap': {'optional': False, 'required': False}}}}}, {'fn.test': {'value': {'pStrStruct': {'wrap': {'optional': False, 'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrStruct': {'wrap': {'optional': False, 'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_115(self):
        request = [{}, {'fn.test': {'value': {'pStrStruct': {'wrap': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrStruct.wrap.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_116(self):
        request = [{}, {'fn.test': {'value': {'pStrStruct': {'wrap': {'required': False, 'a': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrStruct.wrap.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_117(self):
        request = [{}, {'fn.test': {'value': {'pStrStruct': {'wrap': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_118(self):
        request = [{}, {'fn.test': {'value': {'pStrStruct': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_119(self):
        request = [{}, {'fn.test': {'value': {'pStrStruct': {'wrap': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_120(self):
        request = [{}, {'fn.test': {'value': {'pStrStruct': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_121(self):
        request = [{}, {'fn.test': {'value': {'pStrStruct': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_122(self):
        request = [{}, {'fn.test': {'value': {'pStrStruct': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_123(self):
        request = [{'ok': {'value': {'pStrStruct': {'wrap': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrStruct.wrap.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_124(self):
        request = [{'ok': {'value': {'pStrStruct': {'wrap': {'required': False, 'a': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrStruct.wrap.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_125(self):
        request = [{'ok': {'value': {'pStrStruct': {'wrap': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_126(self):
        request = [{'ok': {'value': {'pStrStruct': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_127(self):
        request = [{'ok': {'value': {'pStrStruct': {'wrap': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_128(self):
        request = [{'ok': {'value': {'pStrStruct': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_129(self):
        request = [{'ok': {'value': {'pStrStruct': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_130(self):
        request = [{'ok': {'value': {'pStrStruct': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_131(self):
        request = [{'ok': {'value': {'pStrNullStruct': {'wrap': None}}}}, {'fn.test': {'value': {'pStrNullStruct': {'wrap': None}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullStruct': {'wrap': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_132(self):
        request = [{'ok': {'value': {'pStrNullStruct': {'wrap': {'required': False}}}}}, {'fn.test': {'value': {'pStrNullStruct': {'wrap': {'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullStruct': {'wrap': {'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_133(self):
        request = [{'ok': {'value': {'pStrNullStruct': {'wrap': {'optional': False, 'required': False}}}}}, {'fn.test': {'value': {'pStrNullStruct': {'wrap': {'optional': False, 'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullStruct': {'wrap': {'optional': False, 'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_134(self):
        request = [{}, {'fn.test': {'value': {'pStrNullStruct': {'wrap': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullStruct.wrap.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_135(self):
        request = [{}, {'fn.test': {'value': {'pStrNullStruct': {'wrap': {'required': False, 'a': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullStruct.wrap.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_136(self):
        request = [{}, {'fn.test': {'value': {'pStrNullStruct': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_137(self):
        request = [{}, {'fn.test': {'value': {'pStrNullStruct': {'wrap': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_138(self):
        request = [{}, {'fn.test': {'value': {'pStrNullStruct': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_139(self):
        request = [{}, {'fn.test': {'value': {'pStrNullStruct': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_140(self):
        request = [{}, {'fn.test': {'value': {'pStrNullStruct': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_141(self):
        request = [{'ok': {'value': {'pStrNullStruct': {'wrap': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullStruct.wrap.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_142(self):
        request = [{'ok': {'value': {'pStrNullStruct': {'wrap': {'required': False, 'a': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullStruct.wrap.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_143(self):
        request = [{'ok': {'value': {'pStrNullStruct': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_144(self):
        request = [{'ok': {'value': {'pStrNullStruct': {'wrap': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_145(self):
        request = [{'ok': {'value': {'pStrNullStruct': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_146(self):
        request = [{'ok': {'value': {'pStrNullStruct': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_147(self):
        request = [{'ok': {'value': {'pStrNullStruct': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullStruct.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_148(self):
        request = [{'ok': {'value': {'pEnumStruct': {'one': {}}}}}, {'fn.test': {'value': {'pEnumStruct': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumStruct': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_149(self):
        request = [{'ok': {'value': {'pEnumStruct': {'two': {'ewrap': {'required': False}}}}}}, {'fn.test': {'value': {'pEnumStruct': {'two': {'ewrap': {'required': False}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumStruct': {'two': {'ewrap': {'required': False}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_150(self):
        request = [{'ok': {'value': {'pEnumStruct': {'two': {'ewrap': {'optional': False, 'required': False}}}}}}, {'fn.test': {'value': {'pEnumStruct': {'two': {'ewrap': {'optional': False, 'required': False}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumStruct': {'two': {'ewrap': {'optional': False, 'required': False}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_151(self):
        request = [{}, {'fn.test': {'value': {'pEnumStruct': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumStruct.two.ewrap.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_152(self):
        request = [{}, {'fn.test': {'value': {'pEnumStruct': {'two': {'ewrap': {'required': False, 'a': False}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumStruct.two.ewrap.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_153(self):
        request = [{}, {'fn.test': {'value': {'pEnumStruct': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_154(self):
        request = [{}, {'fn.test': {'value': {'pEnumStruct': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_155(self):
        request = [{}, {'fn.test': {'value': {'pEnumStruct': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_156(self):
        request = [{}, {'fn.test': {'value': {'pEnumStruct': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_157(self):
        request = [{}, {'fn.test': {'value': {'pEnumStruct': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_158(self):
        request = [{}, {'fn.test': {'value': {'pEnumStruct': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_159(self):
        request = [{'ok': {'value': {'pEnumStruct': {'two': {'ewrap': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumStruct.two.ewrap.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_160(self):
        request = [{'ok': {'value': {'pEnumStruct': {'two': {'ewrap': {'required': False, 'a': False}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumStruct.two.ewrap.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_161(self):
        request = [{'ok': {'value': {'pEnumStruct': {'two': {'ewrap': None}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_162(self):
        request = [{'ok': {'value': {'pEnumStruct': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_163(self):
        request = [{'ok': {'value': {'pEnumStruct': {'two': {'ewrap': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_164(self):
        request = [{'ok': {'value': {'pEnumStruct': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_165(self):
        request = [{'ok': {'value': {'pEnumStruct': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_166(self):
        request = [{'ok': {'value': {'pEnumStruct': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_167(self):
        request = [{'ok': {'value': {'pEnumNullStruct': {'one': {}}}}}, {'fn.test': {'value': {'pEnumNullStruct': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullStruct': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_168(self):
        request = [{'ok': {'value': {'pEnumNullStruct': {'two': {'ewrap': None}}}}}, {'fn.test': {'value': {'pEnumNullStruct': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullStruct': {'two': {'ewrap': None}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_169(self):
        request = [{'ok': {'value': {'pEnumNullStruct': {'two': {'ewrap': {'required': False}}}}}}, {'fn.test': {'value': {'pEnumNullStruct': {'two': {'ewrap': {'required': False}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullStruct': {'two': {'ewrap': {'required': False}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_170(self):
        request = [{'ok': {'value': {'pEnumNullStruct': {'two': {'ewrap': {'optional': False, 'required': False}}}}}}, {'fn.test': {'value': {'pEnumNullStruct': {'two': {'ewrap': {'optional': False, 'required': False}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullStruct': {'two': {'ewrap': {'optional': False, 'required': False}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_171(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullStruct': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullStruct.two.ewrap.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_172(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullStruct': {'two': {'ewrap': {'required': False, 'a': False}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullStruct.two.ewrap.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_173(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullStruct': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_174(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullStruct': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_175(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullStruct': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_176(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullStruct': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_177(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullStruct': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_178(self):
        request = [{'ok': {'value': {'pEnumNullStruct': {'two': {'ewrap': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullStruct.two.ewrap.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_179(self):
        request = [{'ok': {'value': {'pEnumNullStruct': {'two': {'ewrap': {'required': False, 'a': False}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullStruct.two.ewrap.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_180(self):
        request = [{'ok': {'value': {'pEnumNullStruct': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_181(self):
        request = [{'ok': {'value': {'pEnumNullStruct': {'two': {'ewrap': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_182(self):
        request = [{'ok': {'value': {'pEnumNullStruct': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_183(self):
        request = [{'ok': {'value': {'pEnumNullStruct': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_struct_184(self):
        request = [{'ok': {'value': {'pEnumNullStruct': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullStruct.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_0(self):
        request = [{'ok': {'value': {'enum': {'one': {}}}}}, {'fn.test': {'value': {'enum': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'enum': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_1(self):
        request = [{'ok': {'value': {'enum': {'two': {'required': False}}}}}, {'fn.test': {'value': {'enum': {'two': {'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'enum': {'two': {'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_2(self):
        request = [{'ok': {'value': {'enum': {'two': {'optional': False, 'required': False}}}}}, {'fn.test': {'value': {'enum': {'two': {'optional': False, 'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'enum': {'two': {'optional': False, 'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_3(self):
        request = [{}, {'fn.test': {'value': {'enum': {}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.enum', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_4(self):
        request = [{}, {'fn.test': {'value': {'enum': {'one': {}, 'two': {'optional': False, 'required': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.enum', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_5(self):
        request = [{}, {'fn.test': {'value': {'enum': {'a': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.enum.a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_6(self):
        request = [{}, {'fn.test': {'value': {'enum': {'two': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.enum.two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_7(self):
        request = [{}, {'fn.test': {'value': {'enum': {'one': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.enum.one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_8(self):
        request = [{}, {'fn.test': {'value': {'enum': {'one': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.enum.one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_9(self):
        request = [{}, {'fn.test': {'value': {'enum': {'one': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.enum.one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_10(self):
        request = [{}, {'fn.test': {'value': {'enum': {'one': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.enum.one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_11(self):
        request = [{}, {'fn.test': {'value': {'enum': {'one': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.enum.one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_12(self):
        request = [{}, {'fn.test': {'value': {'enum': None}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.enum', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_13(self):
        request = [{}, {'fn.test': {'value': {'enum': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.enum', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_14(self):
        request = [{}, {'fn.test': {'value': {'enum': 0}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.enum', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_15(self):
        request = [{}, {'fn.test': {'value': {'enum': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.enum', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_16(self):
        request = [{}, {'fn.test': {'value': {'enum': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.enum', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_17(self):
        request = [{}, {'fn.test': {'value': {'enum': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.enum', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_18(self):
        request = [{'ok': {'value': {'enum': {}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.enum', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_19(self):
        request = [{'ok': {'value': {'enum': {'one': {}, 'two': {'optional': False, 'required': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.enum', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_20(self):
        request = [{'ok': {'value': {'enum': {'a': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.enum.a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_21(self):
        request = [{'ok': {'value': {'enum': {'two': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.enum.two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_22(self):
        request = [{'ok': {'value': {'enum': {'one': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.enum.one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_23(self):
        request = [{'ok': {'value': {'enum': {'one': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.enum.one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_24(self):
        request = [{'ok': {'value': {'enum': {'one': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.enum.one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_25(self):
        request = [{'ok': {'value': {'enum': {'one': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.enum.one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_26(self):
        request = [{'ok': {'value': {'enum': {'one': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.enum.one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_27(self):
        request = [{'ok': {'value': {'enum': None}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.enum', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_28(self):
        request = [{'ok': {'value': {'enum': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.enum', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_29(self):
        request = [{'ok': {'value': {'enum': 0}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.enum', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_30(self):
        request = [{'ok': {'value': {'enum': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.enum', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_31(self):
        request = [{'ok': {'value': {'enum': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.enum', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_32(self):
        request = [{'ok': {'value': {'enum': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.enum', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_33(self):
        request = [{'ok': {'value': {'nullEnum': None}}}, {'fn.test': {'value': {'nullEnum': None}}}]
        expected_response = [{}, {'ok': {'value': {'nullEnum': None}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_34(self):
        request = [{'ok': {'value': {'nullEnum': {'one': {}}}}}, {'fn.test': {'value': {'nullEnum': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'nullEnum': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_35(self):
        request = [{'ok': {'value': {'nullEnum': {'two': {'required': False}}}}}, {'fn.test': {'value': {'nullEnum': {'two': {'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'nullEnum': {'two': {'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_36(self):
        request = [{'ok': {'value': {'nullEnum': {'two': {'optional': False, 'required': False}}}}}, {'fn.test': {'value': {'nullEnum': {'two': {'optional': False, 'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'nullEnum': {'two': {'optional': False, 'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_37(self):
        request = [{}, {'fn.test': {'value': {'nullEnum': {}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullEnum', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_38(self):
        request = [{}, {'fn.test': {'value': {'nullEnum': {'one': {}, 'two': {'optional': False, 'required': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullEnum', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_39(self):
        request = [{}, {'fn.test': {'value': {'nullEnum': {'a': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullEnum.a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_40(self):
        request = [{}, {'fn.test': {'value': {'nullEnum': {'two': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullEnum.two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_41(self):
        request = [{}, {'fn.test': {'value': {'nullEnum': {'one': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullEnum.one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_42(self):
        request = [{}, {'fn.test': {'value': {'nullEnum': {'one': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullEnum.one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_43(self):
        request = [{}, {'fn.test': {'value': {'nullEnum': {'one': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullEnum.one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_44(self):
        request = [{}, {'fn.test': {'value': {'nullEnum': {'one': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullEnum.one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_45(self):
        request = [{}, {'fn.test': {'value': {'nullEnum': {'one': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullEnum.one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_46(self):
        request = [{}, {'fn.test': {'value': {'nullEnum': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullEnum', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_47(self):
        request = [{}, {'fn.test': {'value': {'nullEnum': 0}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullEnum', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_48(self):
        request = [{}, {'fn.test': {'value': {'nullEnum': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullEnum', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_49(self):
        request = [{}, {'fn.test': {'value': {'nullEnum': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullEnum', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_50(self):
        request = [{}, {'fn.test': {'value': {'nullEnum': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullEnum', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_51(self):
        request = [{'ok': {'value': {'nullEnum': {}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullEnum', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_52(self):
        request = [{'ok': {'value': {'nullEnum': {'one': {}, 'two': {'optional': False, 'required': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullEnum', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_53(self):
        request = [{'ok': {'value': {'nullEnum': {'a': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullEnum.a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_54(self):
        request = [{'ok': {'value': {'nullEnum': {'two': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullEnum.two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_55(self):
        request = [{'ok': {'value': {'nullEnum': {'one': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullEnum.one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_56(self):
        request = [{'ok': {'value': {'nullEnum': {'one': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullEnum.one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_57(self):
        request = [{'ok': {'value': {'nullEnum': {'one': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullEnum.one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_58(self):
        request = [{'ok': {'value': {'nullEnum': {'one': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullEnum.one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_59(self):
        request = [{'ok': {'value': {'nullEnum': {'one': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullEnum.one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_60(self):
        request = [{'ok': {'value': {'nullEnum': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullEnum', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_61(self):
        request = [{'ok': {'value': {'nullEnum': 0}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullEnum', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_62(self):
        request = [{'ok': {'value': {'nullEnum': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullEnum', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_63(self):
        request = [{'ok': {'value': {'nullEnum': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullEnum', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_64(self):
        request = [{'ok': {'value': {'nullEnum': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullEnum', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_65(self):
        request = [{'ok': {'value': {'arrEnum': []}}}, {'fn.test': {'value': {'arrEnum': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrEnum': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_66(self):
        request = [{'ok': {'value': {'arrEnum': [{'one': {}}]}}}, {'fn.test': {'value': {'arrEnum': [{'one': {}}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrEnum': [{'one': {}}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_67(self):
        request = [{'ok': {'value': {'arrEnum': [{'two': {'required': False}}]}}}, {'fn.test': {'value': {'arrEnum': [{'two': {'required': False}}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrEnum': [{'two': {'required': False}}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_68(self):
        request = [{'ok': {'value': {'arrEnum': [{'two': {'optional': False, 'required': False}}]}}}, {'fn.test': {'value': {'arrEnum': [{'two': {'optional': False, 'required': False}}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrEnum': [{'two': {'optional': False, 'required': False}}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_69(self):
        request = [{'ok': {'value': {'arrEnum': [{'one': {}}, {'two': {'required': False}}, {'two': {'optional': False, 'required': False}}]}}}, {'fn.test': {'value': {'arrEnum': [{'one': {}}, {'two': {'required': False}}, {'two': {'optional': False, 'required': False}}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrEnum': [{'one': {}}, {'two': {'required': False}}, {'two': {'optional': False, 'required': False}}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_70(self):
        request = [{}, {'fn.test': {'value': {'arrEnum': [{'one': {}}, {}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrEnum[1]', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_71(self):
        request = [{}, {'fn.test': {'value': {'arrEnum': [{'one': {}}, {'one': {}, 'two': {'optional': False, 'required': False}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrEnum[1]', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_72(self):
        request = [{}, {'fn.test': {'value': {'arrEnum': [{'one': {}}, {'a': {}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrEnum[1].a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_73(self):
        request = [{}, {'fn.test': {'value': {'arrEnum': [{'one': {}}, {'two': {}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrEnum[1].two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_74(self):
        request = [{}, {'fn.test': {'value': {'arrEnum': [{'one': {}}, {'one': False}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_75(self):
        request = [{}, {'fn.test': {'value': {'arrEnum': [{'one': {}}, {'one': 0}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_76(self):
        request = [{}, {'fn.test': {'value': {'arrEnum': [{'one': {}}, {'one': 0.1}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_77(self):
        request = [{}, {'fn.test': {'value': {'arrEnum': [{'one': {}}, {'one': ''}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_78(self):
        request = [{}, {'fn.test': {'value': {'arrEnum': [{'one': {}}, {'one': []}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_79(self):
        request = [{}, {'fn.test': {'value': {'arrEnum': [{'one': {}}, None]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_80(self):
        request = [{}, {'fn.test': {'value': {'arrEnum': [{'one': {}}, False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_81(self):
        request = [{}, {'fn.test': {'value': {'arrEnum': [{'one': {}}, 0]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_82(self):
        request = [{}, {'fn.test': {'value': {'arrEnum': [{'one': {}}, 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_83(self):
        request = [{}, {'fn.test': {'value': {'arrEnum': [{'one': {}}, '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_84(self):
        request = [{}, {'fn.test': {'value': {'arrEnum': [{'one': {}}, []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_85(self):
        request = [{'ok': {'value': {'arrEnum': [{'one': {}}, {}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrEnum[1]', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_86(self):
        request = [{'ok': {'value': {'arrEnum': [{'one': {}}, {'one': {}, 'two': {'optional': False, 'required': False}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrEnum[1]', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_87(self):
        request = [{'ok': {'value': {'arrEnum': [{'one': {}}, {'a': {}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrEnum[1].a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_88(self):
        request = [{'ok': {'value': {'arrEnum': [{'one': {}}, {'two': {}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrEnum[1].two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_89(self):
        request = [{'ok': {'value': {'arrEnum': [{'one': {}}, {'one': False}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_90(self):
        request = [{'ok': {'value': {'arrEnum': [{'one': {}}, {'one': 0}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_91(self):
        request = [{'ok': {'value': {'arrEnum': [{'one': {}}, {'one': 0.1}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_92(self):
        request = [{'ok': {'value': {'arrEnum': [{'one': {}}, {'one': ''}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_93(self):
        request = [{'ok': {'value': {'arrEnum': [{'one': {}}, {'one': []}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_94(self):
        request = [{'ok': {'value': {'arrEnum': [{'one': {}}, None]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_95(self):
        request = [{'ok': {'value': {'arrEnum': [{'one': {}}, False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_96(self):
        request = [{'ok': {'value': {'arrEnum': [{'one': {}}, 0]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_97(self):
        request = [{'ok': {'value': {'arrEnum': [{'one': {}}, 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_98(self):
        request = [{'ok': {'value': {'arrEnum': [{'one': {}}, '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_99(self):
        request = [{'ok': {'value': {'arrEnum': [{'one': {}}, []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_100(self):
        request = [{'ok': {'value': {'arrNullEnum': []}}}, {'fn.test': {'value': {'arrNullEnum': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullEnum': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_101(self):
        request = [{'ok': {'value': {'arrNullEnum': [None]}}}, {'fn.test': {'value': {'arrNullEnum': [None]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullEnum': [None]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_102(self):
        request = [{'ok': {'value': {'arrNullEnum': [{'one': {}}]}}}, {'fn.test': {'value': {'arrNullEnum': [{'one': {}}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullEnum': [{'one': {}}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_103(self):
        request = [{'ok': {'value': {'arrNullEnum': [{'two': {'required': False}}]}}}, {'fn.test': {'value': {'arrNullEnum': [{'two': {'required': False}}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullEnum': [{'two': {'required': False}}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_104(self):
        request = [{'ok': {'value': {'arrNullEnum': [{'two': {'optional': False, 'required': False}}]}}}, {'fn.test': {'value': {'arrNullEnum': [{'two': {'optional': False, 'required': False}}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullEnum': [{'two': {'optional': False, 'required': False}}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_105(self):
        request = [{'ok': {'value': {'arrNullEnum': [None, {'one': {}}, {'two': {'required': False}}, {'two': {'optional': False, 'required': False}}]}}}, {'fn.test': {'value': {'arrNullEnum': [None, {'one': {}}, {'two': {'required': False}}, {'two': {'optional': False, 'required': False}}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullEnum': [None, {'one': {}}, {'two': {'required': False}}, {'two': {'optional': False, 'required': False}}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=231, use_client=True, use_binary=True)

    def test_binary_client_enum_106(self):
        request = [{}, {'fn.test': {'value': {'arrNullEnum': [{'one': {}}, {}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullEnum[1]', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_107(self):
        request = [{}, {'fn.test': {'value': {'arrNullEnum': [{'one': {}}, {'one': {}, 'two': {'optional': False, 'required': False}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullEnum[1]', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_108(self):
        request = [{}, {'fn.test': {'value': {'arrNullEnum': [{'one': {}}, {'a': {}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullEnum[1].a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_109(self):
        request = [{}, {'fn.test': {'value': {'arrNullEnum': [{'one': {}}, {'two': {}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullEnum[1].two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_110(self):
        request = [{}, {'fn.test': {'value': {'arrNullEnum': [{'one': {}}, {'one': False}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_111(self):
        request = [{}, {'fn.test': {'value': {'arrNullEnum': [{'one': {}}, {'one': 0}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_112(self):
        request = [{}, {'fn.test': {'value': {'arrNullEnum': [{'one': {}}, {'one': 0.1}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_113(self):
        request = [{}, {'fn.test': {'value': {'arrNullEnum': [{'one': {}}, {'one': ''}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_114(self):
        request = [{}, {'fn.test': {'value': {'arrNullEnum': [{'one': {}}, {'one': []}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_115(self):
        request = [{}, {'fn.test': {'value': {'arrNullEnum': [{'one': {}}, False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_116(self):
        request = [{}, {'fn.test': {'value': {'arrNullEnum': [{'one': {}}, 0]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_117(self):
        request = [{}, {'fn.test': {'value': {'arrNullEnum': [{'one': {}}, 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_118(self):
        request = [{}, {'fn.test': {'value': {'arrNullEnum': [{'one': {}}, '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_119(self):
        request = [{}, {'fn.test': {'value': {'arrNullEnum': [{'one': {}}, []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_120(self):
        request = [{'ok': {'value': {'arrNullEnum': [{'one': {}}, {}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullEnum[1]', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_121(self):
        request = [{'ok': {'value': {'arrNullEnum': [{'one': {}}, {'one': {}, 'two': {'optional': False, 'required': False}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullEnum[1]', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_122(self):
        request = [{'ok': {'value': {'arrNullEnum': [{'one': {}}, {'a': {}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullEnum[1].a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_123(self):
        request = [{'ok': {'value': {'arrNullEnum': [{'one': {}}, {'two': {}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullEnum[1].two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_124(self):
        request = [{'ok': {'value': {'arrNullEnum': [{'one': {}}, {'one': False}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_125(self):
        request = [{'ok': {'value': {'arrNullEnum': [{'one': {}}, {'one': 0}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_126(self):
        request = [{'ok': {'value': {'arrNullEnum': [{'one': {}}, {'one': 0.1}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_127(self):
        request = [{'ok': {'value': {'arrNullEnum': [{'one': {}}, {'one': ''}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_128(self):
        request = [{'ok': {'value': {'arrNullEnum': [{'one': {}}, {'one': []}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullEnum[1].one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_129(self):
        request = [{'ok': {'value': {'arrNullEnum': [{'one': {}}, False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_130(self):
        request = [{'ok': {'value': {'arrNullEnum': [{'one': {}}, 0]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_131(self):
        request = [{'ok': {'value': {'arrNullEnum': [{'one': {}}, 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_132(self):
        request = [{'ok': {'value': {'arrNullEnum': [{'one': {}}, '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_133(self):
        request = [{'ok': {'value': {'arrNullEnum': [{'one': {}}, []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullEnum[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_134(self):
        request = [{'ok': {'value': {'objEnum': {}}}}, {'fn.test': {'value': {'objEnum': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objEnum': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_135(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'one': {}}}}}}, {'fn.test': {'value': {'objEnum': {'a': {'one': {}}}}}}]
        expected_response = [{}, {'ok': {'value': {'objEnum': {'a': {'one': {}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_136(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'two': {'required': False}}}}}}, {'fn.test': {'value': {'objEnum': {'a': {'two': {'required': False}}}}}}]
        expected_response = [{}, {'ok': {'value': {'objEnum': {'a': {'two': {'required': False}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_137(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'two': {'optional': False, 'required': False}}}}}}, {'fn.test': {'value': {'objEnum': {'a': {'two': {'optional': False, 'required': False}}}}}}]
        expected_response = [{}, {'ok': {'value': {'objEnum': {'a': {'two': {'optional': False, 'required': False}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_138(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'two': {'required': False}}, 'c': {'two': {'optional': False, 'required': False}}}}}}, {'fn.test': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'two': {'required': False}}, 'c': {'two': {'optional': False, 'required': False}}}}}}]
        expected_response = [{}, {'ok': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'two': {'required': False}}, 'c': {'two': {'optional': False, 'required': False}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_139(self):
        request = [{}, {'fn.test': {'value': {'objEnum': {'a': {'one': {}}, 'b': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objEnum{b}', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_140(self):
        request = [{}, {'fn.test': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'one': {}, 'two': {'optional': False, 'required': False}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objEnum{b}', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_141(self):
        request = [{}, {'fn.test': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'a': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objEnum{b}.a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_142(self):
        request = [{}, {'fn.test': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'two': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objEnum{b}.two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_143(self):
        request = [{}, {'fn.test': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'one': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_144(self):
        request = [{}, {'fn.test': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'one': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_145(self):
        request = [{}, {'fn.test': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'one': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_146(self):
        request = [{}, {'fn.test': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'one': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_147(self):
        request = [{}, {'fn.test': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'one': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_148(self):
        request = [{}, {'fn.test': {'value': {'objEnum': {'a': {'one': {}}, 'b': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_149(self):
        request = [{}, {'fn.test': {'value': {'objEnum': {'a': {'one': {}}, 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_150(self):
        request = [{}, {'fn.test': {'value': {'objEnum': {'a': {'one': {}}, 'b': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_151(self):
        request = [{}, {'fn.test': {'value': {'objEnum': {'a': {'one': {}}, 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_152(self):
        request = [{}, {'fn.test': {'value': {'objEnum': {'a': {'one': {}}, 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_153(self):
        request = [{}, {'fn.test': {'value': {'objEnum': {'a': {'one': {}}, 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_154(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'one': {}}, 'b': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objEnum{b}', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_155(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'one': {}, 'two': {'optional': False, 'required': False}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objEnum{b}', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_156(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'a': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objEnum{b}.a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_157(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'two': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objEnum{b}.two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_158(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'one': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_159(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'one': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_160(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'one': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_161(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'one': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_162(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'one': {}}, 'b': {'one': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_163(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'one': {}}, 'b': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_164(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'one': {}}, 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_165(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'one': {}}, 'b': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_166(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'one': {}}, 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_167(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'one': {}}, 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_168(self):
        request = [{'ok': {'value': {'objEnum': {'a': {'one': {}}, 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_169(self):
        request = [{'ok': {'value': {'objNullEnum': {}}}}, {'fn.test': {'value': {'objNullEnum': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullEnum': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_170(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': None}}}}, {'fn.test': {'value': {'objNullEnum': {'a': None}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullEnum': {'a': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_171(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': {'one': {}}}}}}, {'fn.test': {'value': {'objNullEnum': {'a': {'one': {}}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullEnum': {'a': {'one': {}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_172(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': {'two': {'required': False}}}}}}, {'fn.test': {'value': {'objNullEnum': {'a': {'two': {'required': False}}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullEnum': {'a': {'two': {'required': False}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_173(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': {'two': {'optional': False, 'required': False}}}}}}, {'fn.test': {'value': {'objNullEnum': {'a': {'two': {'optional': False, 'required': False}}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullEnum': {'a': {'two': {'optional': False, 'required': False}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_174(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': None, 'b': {'one': {}}, 'c': {'two': {'required': False}}, 'd': {'two': {'optional': False, 'required': False}}}}}}, {'fn.test': {'value': {'objNullEnum': {'a': None, 'b': {'one': {}}, 'c': {'two': {'required': False}}, 'd': {'two': {'optional': False, 'required': False}}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullEnum': {'a': None, 'b': {'one': {}}, 'c': {'two': {'required': False}}, 'd': {'two': {'optional': False, 'required': False}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=231, use_client=True, use_binary=True)

    def test_binary_client_enum_175(self):
        request = [{}, {'fn.test': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullEnum{b}', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_176(self):
        request = [{}, {'fn.test': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': {'one': {}, 'two': {'optional': False, 'required': False}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullEnum{b}', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_177(self):
        request = [{}, {'fn.test': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': {'a': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullEnum{b}.a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_178(self):
        request = [{}, {'fn.test': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': {'two': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullEnum{b}.two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_179(self):
        request = [{}, {'fn.test': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': {'one': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_180(self):
        request = [{}, {'fn.test': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': {'one': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_181(self):
        request = [{}, {'fn.test': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': {'one': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_182(self):
        request = [{}, {'fn.test': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': {'one': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_183(self):
        request = [{}, {'fn.test': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': {'one': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_184(self):
        request = [{}, {'fn.test': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_185(self):
        request = [{}, {'fn.test': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_186(self):
        request = [{}, {'fn.test': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_187(self):
        request = [{}, {'fn.test': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_188(self):
        request = [{}, {'fn.test': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_189(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullEnum{b}', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_190(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': {'one': {}, 'two': {'optional': False, 'required': False}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullEnum{b}', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_191(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': {'a': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullEnum{b}.a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_192(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': {'two': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullEnum{b}.two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_193(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': {'one': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_194(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': {'one': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_195(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': {'one': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_196(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': {'one': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_197(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': {'one': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullEnum{b}.one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_198(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_199(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_200(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_201(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_202(self):
        request = [{'ok': {'value': {'objNullEnum': {'a': {'one': {}}, 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullEnum{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_203(self):
        request = [{'ok': {'value': {'pStrEnum': {'wrap': {'one': {}}}}}}, {'fn.test': {'value': {'pStrEnum': {'wrap': {'one': {}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrEnum': {'wrap': {'one': {}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_204(self):
        request = [{'ok': {'value': {'pStrEnum': {'wrap': {'two': {'required': False}}}}}}, {'fn.test': {'value': {'pStrEnum': {'wrap': {'two': {'required': False}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrEnum': {'wrap': {'two': {'required': False}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_205(self):
        request = [{'ok': {'value': {'pStrEnum': {'wrap': {'two': {'optional': False, 'required': False}}}}}}, {'fn.test': {'value': {'pStrEnum': {'wrap': {'two': {'optional': False, 'required': False}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrEnum': {'wrap': {'two': {'optional': False, 'required': False}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_206(self):
        request = [{}, {'fn.test': {'value': {'pStrEnum': {'wrap': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrEnum.wrap', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_207(self):
        request = [{}, {'fn.test': {'value': {'pStrEnum': {'wrap': {'one': {}, 'two': {'optional': False, 'required': False}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrEnum.wrap', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_208(self):
        request = [{}, {'fn.test': {'value': {'pStrEnum': {'wrap': {'a': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrEnum.wrap.a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_209(self):
        request = [{}, {'fn.test': {'value': {'pStrEnum': {'wrap': {'two': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrEnum.wrap.two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_210(self):
        request = [{}, {'fn.test': {'value': {'pStrEnum': {'wrap': {'one': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_211(self):
        request = [{}, {'fn.test': {'value': {'pStrEnum': {'wrap': {'one': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_212(self):
        request = [{}, {'fn.test': {'value': {'pStrEnum': {'wrap': {'one': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_213(self):
        request = [{}, {'fn.test': {'value': {'pStrEnum': {'wrap': {'one': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_214(self):
        request = [{}, {'fn.test': {'value': {'pStrEnum': {'wrap': {'one': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_215(self):
        request = [{}, {'fn.test': {'value': {'pStrEnum': {'wrap': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_216(self):
        request = [{}, {'fn.test': {'value': {'pStrEnum': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_217(self):
        request = [{}, {'fn.test': {'value': {'pStrEnum': {'wrap': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_218(self):
        request = [{}, {'fn.test': {'value': {'pStrEnum': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_219(self):
        request = [{}, {'fn.test': {'value': {'pStrEnum': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_220(self):
        request = [{}, {'fn.test': {'value': {'pStrEnum': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_221(self):
        request = [{'ok': {'value': {'pStrEnum': {'wrap': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrEnum.wrap', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_222(self):
        request = [{'ok': {'value': {'pStrEnum': {'wrap': {'one': {}, 'two': {'optional': False, 'required': False}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrEnum.wrap', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_223(self):
        request = [{'ok': {'value': {'pStrEnum': {'wrap': {'a': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrEnum.wrap.a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_224(self):
        request = [{'ok': {'value': {'pStrEnum': {'wrap': {'two': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrEnum.wrap.two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_225(self):
        request = [{'ok': {'value': {'pStrEnum': {'wrap': {'one': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_226(self):
        request = [{'ok': {'value': {'pStrEnum': {'wrap': {'one': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_227(self):
        request = [{'ok': {'value': {'pStrEnum': {'wrap': {'one': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_228(self):
        request = [{'ok': {'value': {'pStrEnum': {'wrap': {'one': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_229(self):
        request = [{'ok': {'value': {'pStrEnum': {'wrap': {'one': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_230(self):
        request = [{'ok': {'value': {'pStrEnum': {'wrap': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_231(self):
        request = [{'ok': {'value': {'pStrEnum': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_232(self):
        request = [{'ok': {'value': {'pStrEnum': {'wrap': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_233(self):
        request = [{'ok': {'value': {'pStrEnum': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_234(self):
        request = [{'ok': {'value': {'pStrEnum': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_235(self):
        request = [{'ok': {'value': {'pStrEnum': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_236(self):
        request = [{'ok': {'value': {'pStrNullEnum': {'wrap': None}}}}, {'fn.test': {'value': {'pStrNullEnum': {'wrap': None}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullEnum': {'wrap': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_237(self):
        request = [{'ok': {'value': {'pStrNullEnum': {'wrap': {'one': {}}}}}}, {'fn.test': {'value': {'pStrNullEnum': {'wrap': {'one': {}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullEnum': {'wrap': {'one': {}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_238(self):
        request = [{'ok': {'value': {'pStrNullEnum': {'wrap': {'two': {'required': False}}}}}}, {'fn.test': {'value': {'pStrNullEnum': {'wrap': {'two': {'required': False}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullEnum': {'wrap': {'two': {'required': False}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_239(self):
        request = [{'ok': {'value': {'pStrNullEnum': {'wrap': {'two': {'optional': False, 'required': False}}}}}}, {'fn.test': {'value': {'pStrNullEnum': {'wrap': {'two': {'optional': False, 'required': False}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullEnum': {'wrap': {'two': {'optional': False, 'required': False}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_240(self):
        request = [{}, {'fn.test': {'value': {'pStrNullEnum': {'wrap': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullEnum.wrap', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_241(self):
        request = [{}, {'fn.test': {'value': {'pStrNullEnum': {'wrap': {'one': {}, 'two': {'optional': False, 'required': False}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullEnum.wrap', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_242(self):
        request = [{}, {'fn.test': {'value': {'pStrNullEnum': {'wrap': {'a': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullEnum.wrap.a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_243(self):
        request = [{}, {'fn.test': {'value': {'pStrNullEnum': {'wrap': {'two': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullEnum.wrap.two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_244(self):
        request = [{}, {'fn.test': {'value': {'pStrNullEnum': {'wrap': {'one': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_245(self):
        request = [{}, {'fn.test': {'value': {'pStrNullEnum': {'wrap': {'one': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_246(self):
        request = [{}, {'fn.test': {'value': {'pStrNullEnum': {'wrap': {'one': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_247(self):
        request = [{}, {'fn.test': {'value': {'pStrNullEnum': {'wrap': {'one': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_248(self):
        request = [{}, {'fn.test': {'value': {'pStrNullEnum': {'wrap': {'one': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_249(self):
        request = [{}, {'fn.test': {'value': {'pStrNullEnum': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_250(self):
        request = [{}, {'fn.test': {'value': {'pStrNullEnum': {'wrap': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_251(self):
        request = [{}, {'fn.test': {'value': {'pStrNullEnum': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_252(self):
        request = [{}, {'fn.test': {'value': {'pStrNullEnum': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_253(self):
        request = [{}, {'fn.test': {'value': {'pStrNullEnum': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_254(self):
        request = [{'ok': {'value': {'pStrNullEnum': {'wrap': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullEnum.wrap', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_255(self):
        request = [{'ok': {'value': {'pStrNullEnum': {'wrap': {'one': {}, 'two': {'optional': False, 'required': False}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullEnum.wrap', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_256(self):
        request = [{'ok': {'value': {'pStrNullEnum': {'wrap': {'a': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullEnum.wrap.a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_257(self):
        request = [{'ok': {'value': {'pStrNullEnum': {'wrap': {'two': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullEnum.wrap.two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_258(self):
        request = [{'ok': {'value': {'pStrNullEnum': {'wrap': {'one': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_259(self):
        request = [{'ok': {'value': {'pStrNullEnum': {'wrap': {'one': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_260(self):
        request = [{'ok': {'value': {'pStrNullEnum': {'wrap': {'one': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_261(self):
        request = [{'ok': {'value': {'pStrNullEnum': {'wrap': {'one': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_262(self):
        request = [{'ok': {'value': {'pStrNullEnum': {'wrap': {'one': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullEnum.wrap.one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_263(self):
        request = [{'ok': {'value': {'pStrNullEnum': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_264(self):
        request = [{'ok': {'value': {'pStrNullEnum': {'wrap': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_265(self):
        request = [{'ok': {'value': {'pStrNullEnum': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_266(self):
        request = [{'ok': {'value': {'pStrNullEnum': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_267(self):
        request = [{'ok': {'value': {'pStrNullEnum': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullEnum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_268(self):
        request = [{'ok': {'value': {'pEnumEnum': {'one': {}}}}}, {'fn.test': {'value': {'pEnumEnum': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumEnum': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_269(self):
        request = [{'ok': {'value': {'pEnumEnum': {'two': {'ewrap': {'one': {}}}}}}}, {'fn.test': {'value': {'pEnumEnum': {'two': {'ewrap': {'one': {}}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumEnum': {'two': {'ewrap': {'one': {}}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_270(self):
        request = [{'ok': {'value': {'pEnumEnum': {'two': {'ewrap': {'two': {'required': False}}}}}}}, {'fn.test': {'value': {'pEnumEnum': {'two': {'ewrap': {'two': {'required': False}}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumEnum': {'two': {'ewrap': {'two': {'required': False}}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_271(self):
        request = [{'ok': {'value': {'pEnumEnum': {'two': {'ewrap': {'two': {'optional': False, 'required': False}}}}}}}, {'fn.test': {'value': {'pEnumEnum': {'two': {'ewrap': {'two': {'optional': False, 'required': False}}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumEnum': {'two': {'ewrap': {'two': {'optional': False, 'required': False}}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_272(self):
        request = [{}, {'fn.test': {'value': {'pEnumEnum': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumEnum.two.ewrap', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_273(self):
        request = [{}, {'fn.test': {'value': {'pEnumEnum': {'two': {'ewrap': {'one': {}, 'two': {'optional': False, 'required': False}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumEnum.two.ewrap', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_274(self):
        request = [{}, {'fn.test': {'value': {'pEnumEnum': {'two': {'ewrap': {'a': {}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumEnum.two.ewrap.a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_275(self):
        request = [{}, {'fn.test': {'value': {'pEnumEnum': {'two': {'ewrap': {'two': {}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumEnum.two.ewrap.two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_276(self):
        request = [{}, {'fn.test': {'value': {'pEnumEnum': {'two': {'ewrap': {'one': False}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_277(self):
        request = [{}, {'fn.test': {'value': {'pEnumEnum': {'two': {'ewrap': {'one': 0}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_278(self):
        request = [{}, {'fn.test': {'value': {'pEnumEnum': {'two': {'ewrap': {'one': 0.1}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_279(self):
        request = [{}, {'fn.test': {'value': {'pEnumEnum': {'two': {'ewrap': {'one': ''}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_280(self):
        request = [{}, {'fn.test': {'value': {'pEnumEnum': {'two': {'ewrap': {'one': []}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_281(self):
        request = [{}, {'fn.test': {'value': {'pEnumEnum': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_282(self):
        request = [{}, {'fn.test': {'value': {'pEnumEnum': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_283(self):
        request = [{}, {'fn.test': {'value': {'pEnumEnum': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_284(self):
        request = [{}, {'fn.test': {'value': {'pEnumEnum': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_285(self):
        request = [{}, {'fn.test': {'value': {'pEnumEnum': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_286(self):
        request = [{}, {'fn.test': {'value': {'pEnumEnum': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_287(self):
        request = [{'ok': {'value': {'pEnumEnum': {'two': {'ewrap': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumEnum.two.ewrap', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_288(self):
        request = [{'ok': {'value': {'pEnumEnum': {'two': {'ewrap': {'one': {}, 'two': {'optional': False, 'required': False}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumEnum.two.ewrap', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_289(self):
        request = [{'ok': {'value': {'pEnumEnum': {'two': {'ewrap': {'a': {}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumEnum.two.ewrap.a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_290(self):
        request = [{'ok': {'value': {'pEnumEnum': {'two': {'ewrap': {'two': {}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumEnum.two.ewrap.two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_291(self):
        request = [{'ok': {'value': {'pEnumEnum': {'two': {'ewrap': {'one': False}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_292(self):
        request = [{'ok': {'value': {'pEnumEnum': {'two': {'ewrap': {'one': 0}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_293(self):
        request = [{'ok': {'value': {'pEnumEnum': {'two': {'ewrap': {'one': 0.1}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_294(self):
        request = [{'ok': {'value': {'pEnumEnum': {'two': {'ewrap': {'one': ''}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_295(self):
        request = [{'ok': {'value': {'pEnumEnum': {'two': {'ewrap': {'one': []}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_296(self):
        request = [{'ok': {'value': {'pEnumEnum': {'two': {'ewrap': None}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Null': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_297(self):
        request = [{'ok': {'value': {'pEnumEnum': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_298(self):
        request = [{'ok': {'value': {'pEnumEnum': {'two': {'ewrap': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_299(self):
        request = [{'ok': {'value': {'pEnumEnum': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_300(self):
        request = [{'ok': {'value': {'pEnumEnum': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_301(self):
        request = [{'ok': {'value': {'pEnumEnum': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_302(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'one': {}}}}}, {'fn.test': {'value': {'pEnumNullEnum': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullEnum': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_303(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': None}}}}}, {'fn.test': {'value': {'pEnumNullEnum': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': None}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_304(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'one': {}}}}}}}, {'fn.test': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'one': {}}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'one': {}}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_305(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'two': {'required': False}}}}}}}, {'fn.test': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'two': {'required': False}}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'two': {'required': False}}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_306(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'two': {'optional': False, 'required': False}}}}}}}, {'fn.test': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'two': {'optional': False, 'required': False}}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'two': {'optional': False, 'required': False}}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_307(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullEnum': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullEnum.two.ewrap', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_308(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'one': {}, 'two': {'optional': False, 'required': False}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullEnum.two.ewrap', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_309(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'a': {}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullEnum.two.ewrap.a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_310(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'two': {}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullEnum.two.ewrap.two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_311(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'one': False}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_312(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'one': 0}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_313(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'one': 0.1}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_314(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'one': ''}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_315(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'one': []}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_316(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullEnum': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_317(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullEnum': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_318(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullEnum': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_319(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullEnum': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_320(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullEnum': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_321(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullEnum.two.ewrap', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_322(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'one': {}, 'two': {'optional': False, 'required': False}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullEnum.two.ewrap', 'reason': {'ZeroOrManyEnumFieldsDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_323(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'a': {}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullEnum.two.ewrap.a', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_324(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'two': {}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullEnum.two.ewrap.two.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_325(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'one': False}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_326(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'one': 0}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_327(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'one': 0.1}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_328(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'one': ''}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_329(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': {'one': []}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullEnum.two.ewrap.one', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_330(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_331(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Integer': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_332(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_333(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_enum_334(self):
        request = [{'ok': {'value': {'pEnumNullEnum': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullEnum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testFn_0(self):
        request = [{'ok': {'value': {'fn': {'required': False}}}}, {'fn.test': {'value': {'fn': {'required': False}}}}]
        expected_response = [{}, {'ok': {'value': {'fn': {'required': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testFn_1(self):
        request = [{'ok': {'value': {'fn': {'optional': False, 'required': False}}}}, {'fn.test': {'value': {'fn': {'optional': False, 'required': False}}}}]
        expected_response = [{}, {'ok': {'value': {'fn': {'optional': False, 'required': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testFn_2(self):
        request = [{}, {'fn.test': {'value': {'fn': None}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.fn', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testFn_3(self):
        request = [{}, {'fn.test': {'value': {'fn': {}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.fn.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testFn_4(self):
        request = [{}, {'fn.test': {'value': {'fn': {'required': False, 'a': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.fn.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testFn_5(self):
        request = [{}, {'fn.test': {'value': {'fn': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.fn', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testFn_6(self):
        request = [{}, {'fn.test': {'value': {'fn': 0}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.fn', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testFn_7(self):
        request = [{}, {'fn.test': {'value': {'fn': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.fn', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testFn_8(self):
        request = [{}, {'fn.test': {'value': {'fn': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.fn', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testFn_9(self):
        request = [{}, {'fn.test': {'value': {'fn': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.fn', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testFn_10(self):
        request = [{'ok': {'value': {'fn': None}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.fn', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testFn_11(self):
        request = [{'ok': {'value': {'fn': {}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.fn.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testFn_12(self):
        request = [{'ok': {'value': {'fn': {'required': False, 'a': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.fn.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testFn_13(self):
        request = [{'ok': {'value': {'fn': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.fn', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testFn_14(self):
        request = [{'ok': {'value': {'fn': 0}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.fn', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testFn_15(self):
        request = [{'ok': {'value': {'fn': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.fn', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testFn_16(self):
        request = [{'ok': {'value': {'fn': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.fn', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testFn_17(self):
        request = [{'ok': {'value': {'fn': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.fn', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullFn_0(self):
        request = [{'ok': {'value': {'nullFn': None}}}, {'fn.test': {'value': {'nullFn': None}}}]
        expected_response = [{}, {'ok': {'value': {'nullFn': None}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullFn_1(self):
        request = [{'ok': {'value': {'nullFn': {'required': False}}}}, {'fn.test': {'value': {'nullFn': {'required': False}}}}]
        expected_response = [{}, {'ok': {'value': {'nullFn': {'required': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullFn_2(self):
        request = [{'ok': {'value': {'nullFn': {'optional': False, 'required': False}}}}, {'fn.test': {'value': {'nullFn': {'optional': False, 'required': False}}}}]
        expected_response = [{}, {'ok': {'value': {'nullFn': {'optional': False, 'required': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullFn_3(self):
        request = [{}, {'fn.test': {'value': {'nullFn': {}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullFn.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullFn_4(self):
        request = [{}, {'fn.test': {'value': {'nullFn': {'required': False, 'a': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullFn.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullFn_5(self):
        request = [{}, {'fn.test': {'value': {'nullFn': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullFn', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullFn_6(self):
        request = [{}, {'fn.test': {'value': {'nullFn': 0}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullFn', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullFn_7(self):
        request = [{}, {'fn.test': {'value': {'nullFn': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullFn', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullFn_8(self):
        request = [{}, {'fn.test': {'value': {'nullFn': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullFn', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullFn_9(self):
        request = [{}, {'fn.test': {'value': {'nullFn': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullFn', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullFn_10(self):
        request = [{'ok': {'value': {'nullFn': {}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullFn.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullFn_11(self):
        request = [{'ok': {'value': {'nullFn': {'required': False, 'a': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullFn.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullFn_12(self):
        request = [{'ok': {'value': {'nullFn': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullFn', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullFn_13(self):
        request = [{'ok': {'value': {'nullFn': 0}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullFn', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullFn_14(self):
        request = [{'ok': {'value': {'nullFn': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullFn', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullFn_15(self):
        request = [{'ok': {'value': {'nullFn': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullFn', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullFn_16(self):
        request = [{'ok': {'value': {'nullFn': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullFn', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayFn_0(self):
        request = [{'ok': {'value': {'arrFn': []}}}, {'fn.test': {'value': {'arrFn': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrFn': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayFn_1(self):
        request = [{'ok': {'value': {'arrFn': [{'required': False}]}}}, {'fn.test': {'value': {'arrFn': [{'required': False}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrFn': [{'required': False}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayFn_2(self):
        request = [{'ok': {'value': {'arrFn': [{'optional': False, 'required': False}]}}}, {'fn.test': {'value': {'arrFn': [{'optional': False, 'required': False}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrFn': [{'optional': False, 'required': False}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayFn_3(self):
        request = [{'ok': {'value': {'arrFn': [{'required': False}, {'optional': False, 'required': False}]}}}, {'fn.test': {'value': {'arrFn': [{'required': False}, {'optional': False, 'required': False}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrFn': [{'required': False}, {'optional': False, 'required': False}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayFn_4(self):
        request = [{}, {'fn.test': {'value': {'arrFn': [{'required': False}, None]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrFn[1]', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayFn_5(self):
        request = [{}, {'fn.test': {'value': {'arrFn': [{'required': False}, {}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrFn[1].required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayFn_6(self):
        request = [{}, {'fn.test': {'value': {'arrFn': [{'required': False}, {'required': False, 'a': False}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrFn[1].a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayFn_7(self):
        request = [{}, {'fn.test': {'value': {'arrFn': [{'required': False}, False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrFn[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayFn_8(self):
        request = [{}, {'fn.test': {'value': {'arrFn': [{'required': False}, 0]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrFn[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayFn_9(self):
        request = [{}, {'fn.test': {'value': {'arrFn': [{'required': False}, 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrFn[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayFn_10(self):
        request = [{}, {'fn.test': {'value': {'arrFn': [{'required': False}, '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrFn[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayFn_11(self):
        request = [{}, {'fn.test': {'value': {'arrFn': [{'required': False}, []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrFn[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayFn_12(self):
        request = [{'ok': {'value': {'arrFn': [{'required': False}, None]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrFn[1]', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayFn_13(self):
        request = [{'ok': {'value': {'arrFn': [{'required': False}, {}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrFn[1].required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayFn_14(self):
        request = [{'ok': {'value': {'arrFn': [{'required': False}, {'required': False, 'a': False}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrFn[1].a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayFn_15(self):
        request = [{'ok': {'value': {'arrFn': [{'required': False}, False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrFn[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayFn_16(self):
        request = [{'ok': {'value': {'arrFn': [{'required': False}, 0]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrFn[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayFn_17(self):
        request = [{'ok': {'value': {'arrFn': [{'required': False}, 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrFn[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayFn_18(self):
        request = [{'ok': {'value': {'arrFn': [{'required': False}, '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrFn[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayFn_19(self):
        request = [{'ok': {'value': {'arrFn': [{'required': False}, []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrFn[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullFn_0(self):
        request = [{'ok': {'value': {'arrNullFn': [None]}}}, {'fn.test': {'value': {'arrNullFn': [None]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullFn': [None]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullFn_1(self):
        request = [{'ok': {'value': {'arrNullFn': []}}}, {'fn.test': {'value': {'arrNullFn': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullFn': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullFn_2(self):
        request = [{'ok': {'value': {'arrNullFn': [{'required': False}]}}}, {'fn.test': {'value': {'arrNullFn': [{'required': False}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullFn': [{'required': False}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullFn_3(self):
        request = [{'ok': {'value': {'arrNullFn': [{'optional': False, 'required': False}]}}}, {'fn.test': {'value': {'arrNullFn': [{'optional': False, 'required': False}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullFn': [{'optional': False, 'required': False}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullFn_4(self):
        request = [{'ok': {'value': {'arrNullFn': [None, {'required': False}, {'optional': False, 'required': False}]}}}, {'fn.test': {'value': {'arrNullFn': [None, {'required': False}, {'optional': False, 'required': False}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullFn': [None, {'required': False}, {'optional': False, 'required': False}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullFn_5(self):
        request = [{}, {'fn.test': {'value': {'arrNullFn': [{'required': False}, {}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullFn[1].required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullFn_6(self):
        request = [{}, {'fn.test': {'value': {'arrNullFn': [{'required': False}, {'required': False, 'a': False}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullFn[1].a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullFn_7(self):
        request = [{}, {'fn.test': {'value': {'arrNullFn': [{'required': False}, False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullFn[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullFn_8(self):
        request = [{}, {'fn.test': {'value': {'arrNullFn': [{'required': False}, 0]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullFn[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullFn_9(self):
        request = [{}, {'fn.test': {'value': {'arrNullFn': [{'required': False}, 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullFn[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullFn_10(self):
        request = [{}, {'fn.test': {'value': {'arrNullFn': [{'required': False}, '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullFn[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullFn_11(self):
        request = [{}, {'fn.test': {'value': {'arrNullFn': [{'required': False}, []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullFn[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullFn_12(self):
        request = [{'ok': {'value': {'arrNullFn': [{'required': False}, {}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullFn[1].required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullFn_13(self):
        request = [{'ok': {'value': {'arrNullFn': [{'required': False}, {'required': False, 'a': False}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullFn[1].a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullFn_14(self):
        request = [{'ok': {'value': {'arrNullFn': [{'required': False}, False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullFn[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullFn_15(self):
        request = [{'ok': {'value': {'arrNullFn': [{'required': False}, 0]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullFn[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullFn_16(self):
        request = [{'ok': {'value': {'arrNullFn': [{'required': False}, 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullFn[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullFn_17(self):
        request = [{'ok': {'value': {'arrNullFn': [{'required': False}, '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullFn[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullFn_18(self):
        request = [{'ok': {'value': {'arrNullFn': [{'required': False}, []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullFn[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectFn_0(self):
        request = [{'ok': {'value': {'objFn': {}}}}, {'fn.test': {'value': {'objFn': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objFn': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectFn_1(self):
        request = [{'ok': {'value': {'objFn': {'a': {'required': False}}}}}, {'fn.test': {'value': {'objFn': {'a': {'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'objFn': {'a': {'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectFn_2(self):
        request = [{'ok': {'value': {'objFn': {'a': {'optional': False, 'required': False}}}}}, {'fn.test': {'value': {'objFn': {'a': {'optional': False, 'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'objFn': {'a': {'optional': False, 'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectFn_3(self):
        request = [{'ok': {'value': {'objFn': {'a': {'required': False}, 'b': {'optional': False, 'required': False}}}}}, {'fn.test': {'value': {'objFn': {'a': {'required': False}, 'b': {'optional': False, 'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'objFn': {'a': {'required': False}, 'b': {'optional': False, 'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectFn_4(self):
        request = [{}, {'fn.test': {'value': {'objFn': {'a': {'required': False}, 'b': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objFn{b}', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectFn_5(self):
        request = [{}, {'fn.test': {'value': {'objFn': {'a': {'required': False}, 'b': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objFn{b}.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectFn_6(self):
        request = [{}, {'fn.test': {'value': {'objFn': {'a': {'required': False}, 'b': {'required': False, 'a': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objFn{b}.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectFn_7(self):
        request = [{}, {'fn.test': {'value': {'objFn': {'a': {'required': False}, 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objFn{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectFn_8(self):
        request = [{}, {'fn.test': {'value': {'objFn': {'a': {'required': False}, 'b': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objFn{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectFn_9(self):
        request = [{}, {'fn.test': {'value': {'objFn': {'a': {'required': False}, 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objFn{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectFn_10(self):
        request = [{}, {'fn.test': {'value': {'objFn': {'a': {'required': False}, 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objFn{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectFn_11(self):
        request = [{}, {'fn.test': {'value': {'objFn': {'a': {'required': False}, 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objFn{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectFn_12(self):
        request = [{'ok': {'value': {'objFn': {'a': {'required': False}, 'b': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objFn{b}', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectFn_13(self):
        request = [{'ok': {'value': {'objFn': {'a': {'required': False}, 'b': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objFn{b}.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectFn_14(self):
        request = [{'ok': {'value': {'objFn': {'a': {'required': False}, 'b': {'required': False, 'a': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objFn{b}.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectFn_15(self):
        request = [{'ok': {'value': {'objFn': {'a': {'required': False}, 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objFn{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectFn_16(self):
        request = [{'ok': {'value': {'objFn': {'a': {'required': False}, 'b': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objFn{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectFn_17(self):
        request = [{'ok': {'value': {'objFn': {'a': {'required': False}, 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objFn{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectFn_18(self):
        request = [{'ok': {'value': {'objFn': {'a': {'required': False}, 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objFn{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectFn_19(self):
        request = [{'ok': {'value': {'objFn': {'a': {'required': False}, 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objFn{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullFn_0(self):
        request = [{'ok': {'value': {'objNullFn': {}}}}, {'fn.test': {'value': {'objNullFn': {}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullFn': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullFn_1(self):
        request = [{'ok': {'value': {'objNullFn': {'a': None}}}}, {'fn.test': {'value': {'objNullFn': {'a': None}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullFn': {'a': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullFn_2(self):
        request = [{'ok': {'value': {'objNullFn': {'a': {'required': False}}}}}, {'fn.test': {'value': {'objNullFn': {'a': {'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullFn': {'a': {'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullFn_3(self):
        request = [{'ok': {'value': {'objNullFn': {'a': {'optional': False, 'required': False}}}}}, {'fn.test': {'value': {'objNullFn': {'a': {'optional': False, 'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullFn': {'a': {'optional': False, 'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullFn_4(self):
        request = [{'ok': {'value': {'objNullFn': {'a': None, 'b': {'required': False}, 'c': {'optional': False, 'required': False}}}}}, {'fn.test': {'value': {'objNullFn': {'a': None, 'b': {'required': False}, 'c': {'optional': False, 'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullFn': {'a': None, 'b': {'required': False}, 'c': {'optional': False, 'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullFn_5(self):
        request = [{}, {'fn.test': {'value': {'objNullFn': {'a': {'required': False}, 'b': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullFn{b}.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullFn_6(self):
        request = [{}, {'fn.test': {'value': {'objNullFn': {'a': {'required': False}, 'b': {'required': False, 'a': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullFn{b}.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullFn_7(self):
        request = [{}, {'fn.test': {'value': {'objNullFn': {'a': {'required': False}, 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullFn{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullFn_8(self):
        request = [{}, {'fn.test': {'value': {'objNullFn': {'a': {'required': False}, 'b': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullFn{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullFn_9(self):
        request = [{}, {'fn.test': {'value': {'objNullFn': {'a': {'required': False}, 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullFn{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullFn_10(self):
        request = [{}, {'fn.test': {'value': {'objNullFn': {'a': {'required': False}, 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullFn{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullFn_11(self):
        request = [{}, {'fn.test': {'value': {'objNullFn': {'a': {'required': False}, 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullFn{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullFn_12(self):
        request = [{'ok': {'value': {'objNullFn': {'a': {'required': False}, 'b': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullFn{b}.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullFn_13(self):
        request = [{'ok': {'value': {'objNullFn': {'a': {'required': False}, 'b': {'required': False, 'a': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullFn{b}.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullFn_14(self):
        request = [{'ok': {'value': {'objNullFn': {'a': {'required': False}, 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullFn{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullFn_15(self):
        request = [{'ok': {'value': {'objNullFn': {'a': {'required': False}, 'b': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullFn{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullFn_16(self):
        request = [{'ok': {'value': {'objNullFn': {'a': {'required': False}, 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullFn{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullFn_17(self):
        request = [{'ok': {'value': {'objNullFn': {'a': {'required': False}, 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullFn{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullFn_18(self):
        request = [{'ok': {'value': {'objNullFn': {'a': {'required': False}, 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullFn{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructFn_0(self):
        request = [{'ok': {'value': {'pStrFn': {'wrap': {'required': False}}}}}, {'fn.test': {'value': {'pStrFn': {'wrap': {'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrFn': {'wrap': {'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructFn_1(self):
        request = [{'ok': {'value': {'pStrFn': {'wrap': {'optional': False, 'required': False}}}}}, {'fn.test': {'value': {'pStrFn': {'wrap': {'optional': False, 'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrFn': {'wrap': {'optional': False, 'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructFn_2(self):
        request = [{}, {'fn.test': {'value': {'pStrFn': {'wrap': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrFn.wrap', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructFn_3(self):
        request = [{}, {'fn.test': {'value': {'pStrFn': {'wrap': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrFn.wrap.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructFn_4(self):
        request = [{}, {'fn.test': {'value': {'pStrFn': {'wrap': {'required': False, 'a': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrFn.wrap.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructFn_5(self):
        request = [{}, {'fn.test': {'value': {'pStrFn': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructFn_6(self):
        request = [{}, {'fn.test': {'value': {'pStrFn': {'wrap': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructFn_7(self):
        request = [{}, {'fn.test': {'value': {'pStrFn': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructFn_8(self):
        request = [{}, {'fn.test': {'value': {'pStrFn': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructFn_9(self):
        request = [{}, {'fn.test': {'value': {'pStrFn': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructFn_10(self):
        request = [{'ok': {'value': {'pStrFn': {'wrap': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrFn.wrap', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructFn_11(self):
        request = [{'ok': {'value': {'pStrFn': {'wrap': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrFn.wrap.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructFn_12(self):
        request = [{'ok': {'value': {'pStrFn': {'wrap': {'required': False, 'a': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrFn.wrap.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructFn_13(self):
        request = [{'ok': {'value': {'pStrFn': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructFn_14(self):
        request = [{'ok': {'value': {'pStrFn': {'wrap': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructFn_15(self):
        request = [{'ok': {'value': {'pStrFn': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructFn_16(self):
        request = [{'ok': {'value': {'pStrFn': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructFn_17(self):
        request = [{'ok': {'value': {'pStrFn': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullFn_0(self):
        request = [{'ok': {'value': {'pStrNullFn': {'wrap': None}}}}, {'fn.test': {'value': {'pStrNullFn': {'wrap': None}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullFn': {'wrap': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullFn_1(self):
        request = [{'ok': {'value': {'pStrNullFn': {'wrap': {'required': False}}}}}, {'fn.test': {'value': {'pStrNullFn': {'wrap': {'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullFn': {'wrap': {'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullFn_2(self):
        request = [{'ok': {'value': {'pStrNullFn': {'wrap': {'optional': False, 'required': False}}}}}, {'fn.test': {'value': {'pStrNullFn': {'wrap': {'optional': False, 'required': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullFn': {'wrap': {'optional': False, 'required': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullFn_3(self):
        request = [{}, {'fn.test': {'value': {'pStrNullFn': {'wrap': {}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullFn.wrap.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullFn_4(self):
        request = [{}, {'fn.test': {'value': {'pStrNullFn': {'wrap': {'required': False, 'a': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullFn.wrap.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullFn_5(self):
        request = [{}, {'fn.test': {'value': {'pStrNullFn': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullFn_6(self):
        request = [{}, {'fn.test': {'value': {'pStrNullFn': {'wrap': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullFn_7(self):
        request = [{}, {'fn.test': {'value': {'pStrNullFn': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullFn_8(self):
        request = [{}, {'fn.test': {'value': {'pStrNullFn': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullFn_9(self):
        request = [{}, {'fn.test': {'value': {'pStrNullFn': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullFn_10(self):
        request = [{'ok': {'value': {'pStrNullFn': {'wrap': {}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullFn.wrap.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullFn_11(self):
        request = [{'ok': {'value': {'pStrNullFn': {'wrap': {'required': False, 'a': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullFn.wrap.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullFn_12(self):
        request = [{'ok': {'value': {'pStrNullFn': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullFn_13(self):
        request = [{'ok': {'value': {'pStrNullFn': {'wrap': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullFn_14(self):
        request = [{'ok': {'value': {'pStrNullFn': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullFn_15(self):
        request = [{'ok': {'value': {'pStrNullFn': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullFn_16(self):
        request = [{'ok': {'value': {'pStrNullFn': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullFn.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumFn_0(self):
        request = [{'ok': {'value': {'pEnumFn': {'one': {}}}}}, {'fn.test': {'value': {'pEnumFn': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumFn': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumFn_1(self):
        request = [{'ok': {'value': {'pEnumFn': {'two': {'ewrap': {'required': False}}}}}}, {'fn.test': {'value': {'pEnumFn': {'two': {'ewrap': {'required': False}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumFn': {'two': {'ewrap': {'required': False}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumFn_2(self):
        request = [{'ok': {'value': {'pEnumFn': {'two': {'ewrap': {'optional': False, 'required': False}}}}}}, {'fn.test': {'value': {'pEnumFn': {'two': {'ewrap': {'optional': False, 'required': False}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumFn': {'two': {'ewrap': {'optional': False, 'required': False}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumFn_3(self):
        request = [{}, {'fn.test': {'value': {'pEnumFn': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumFn.two.ewrap', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumFn_4(self):
        request = [{}, {'fn.test': {'value': {'pEnumFn': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumFn.two.ewrap.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumFn_5(self):
        request = [{}, {'fn.test': {'value': {'pEnumFn': {'two': {'ewrap': {'required': False, 'a': False}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumFn.two.ewrap.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumFn_6(self):
        request = [{}, {'fn.test': {'value': {'pEnumFn': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumFn_7(self):
        request = [{}, {'fn.test': {'value': {'pEnumFn': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumFn_8(self):
        request = [{}, {'fn.test': {'value': {'pEnumFn': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumFn_9(self):
        request = [{}, {'fn.test': {'value': {'pEnumFn': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumFn_10(self):
        request = [{}, {'fn.test': {'value': {'pEnumFn': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumFn_11(self):
        request = [{'ok': {'value': {'pEnumFn': {'two': {'ewrap': None}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumFn.two.ewrap', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumFn_12(self):
        request = [{'ok': {'value': {'pEnumFn': {'two': {'ewrap': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumFn.two.ewrap.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumFn_13(self):
        request = [{'ok': {'value': {'pEnumFn': {'two': {'ewrap': {'required': False, 'a': False}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumFn.two.ewrap.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumFn_14(self):
        request = [{'ok': {'value': {'pEnumFn': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumFn_15(self):
        request = [{'ok': {'value': {'pEnumFn': {'two': {'ewrap': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumFn_16(self):
        request = [{'ok': {'value': {'pEnumFn': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumFn_17(self):
        request = [{'ok': {'value': {'pEnumFn': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumFn_18(self):
        request = [{'ok': {'value': {'pEnumFn': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullFn_0(self):
        request = [{'ok': {'value': {'pEnumNullFn': {'one': {}}}}}, {'fn.test': {'value': {'pEnumNullFn': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullFn': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullFn_1(self):
        request = [{'ok': {'value': {'pEnumNullFn': {'two': {'ewrap': None}}}}}, {'fn.test': {'value': {'pEnumNullFn': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullFn': {'two': {'ewrap': None}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullFn_2(self):
        request = [{'ok': {'value': {'pEnumNullFn': {'two': {'ewrap': {'required': False}}}}}}, {'fn.test': {'value': {'pEnumNullFn': {'two': {'ewrap': {'required': False}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullFn': {'two': {'ewrap': {'required': False}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullFn_3(self):
        request = [{'ok': {'value': {'pEnumNullFn': {'two': {'ewrap': {'optional': False, 'required': False}}}}}}, {'fn.test': {'value': {'pEnumNullFn': {'two': {'ewrap': {'optional': False, 'required': False}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullFn': {'two': {'ewrap': {'optional': False, 'required': False}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullFn_4(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullFn': {'two': {'ewrap': {}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullFn.two.ewrap.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullFn_5(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullFn': {'two': {'ewrap': {'required': False, 'a': False}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullFn.two.ewrap.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullFn_6(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullFn': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullFn_7(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullFn': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullFn_8(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullFn': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullFn_9(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullFn': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullFn_10(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullFn': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullFn_11(self):
        request = [{'ok': {'value': {'pEnumNullFn': {'two': {'ewrap': {}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullFn.two.ewrap.required', 'reason': {'RequiredStructFieldMissing': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullFn_12(self):
        request = [{'ok': {'value': {'pEnumNullFn': {'two': {'ewrap': {'required': False, 'a': False}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullFn.two.ewrap.a', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullFn_13(self):
        request = [{'ok': {'value': {'pEnumNullFn': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullFn_14(self):
        request = [{'ok': {'value': {'pEnumNullFn': {'two': {'ewrap': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullFn_15(self):
        request = [{'ok': {'value': {'pEnumNullFn': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullFn_16(self):
        request = [{'ok': {'value': {'pEnumNullFn': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullFn_17(self):
        request = [{'ok': {'value': {'pEnumNullFn': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullFn.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Str_0(self):
        request = [{'ok': {'value': {'p2Str': {'wrap': False, 'nest': [0]}}}}, {'fn.test': {'value': {'p2Str': {'wrap': False, 'nest': [0]}}}}]
        expected_response = [{}, {'ok': {'value': {'p2Str': {'wrap': False, 'nest': [0]}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Str_1(self):
        request = [{'ok': {'value': {'p2Str': {'wrap': True, 'nest': [1]}}}}, {'fn.test': {'value': {'p2Str': {'wrap': True, 'nest': [1]}}}}]
        expected_response = [{}, {'ok': {'value': {'p2Str': {'wrap': True, 'nest': [1]}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Str_2(self):
        request = [{}, {'fn.test': {'value': {'p2Str': None}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Str', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Str_3(self):
        request = [{}, {'fn.test': {'value': {'p2Str': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Str', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Str_4(self):
        request = [{}, {'fn.test': {'value': {'p2Str': 0}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Str', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Str_5(self):
        request = [{}, {'fn.test': {'value': {'p2Str': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Str', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Str_6(self):
        request = [{}, {'fn.test': {'value': {'p2Str': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Str', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Str_7(self):
        request = [{}, {'fn.test': {'value': {'p2Str': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Str', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Str_8(self):
        request = [{}, {'fn.test': {'value': {'p2Str': {'wrap': 0, 'nest': [0]}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Str_9(self):
        request = [{}, {'fn.test': {'value': {'p2Str': {'wrap': '', 'nest': [0]}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Str_10(self):
        request = [{}, {'fn.test': {'value': {'p2Str': {'wrap': [], 'nest': [0]}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Str_11(self):
        request = [{}, {'fn.test': {'value': {'p2Str': {'wrap': {}, 'nest': [0]}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Str_12(self):
        request = [{}, {'fn.test': {'value': {'p2Str': {'wrap': False, 'nest': [0, False]}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Str_13(self):
        request = [{}, {'fn.test': {'value': {'p2Str': {'wrap': False, 'nest': [0, 0.1]}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Str_14(self):
        request = [{}, {'fn.test': {'value': {'p2Str': {'wrap': False, 'nest': [0, '']}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Str_15(self):
        request = [{}, {'fn.test': {'value': {'p2Str': {'wrap': False, 'nest': [0, []]}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Str_16(self):
        request = [{}, {'fn.test': {'value': {'p2Str': {'wrap': False, 'nest': [0, {}]}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Str_17(self):
        request = [{'ok': {'value': {'p2Str': None}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Str', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Str_18(self):
        request = [{'ok': {'value': {'p2Str': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Str', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Str_19(self):
        request = [{'ok': {'value': {'p2Str': 0}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Str', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Str_20(self):
        request = [{'ok': {'value': {'p2Str': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Str', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Str_21(self):
        request = [{'ok': {'value': {'p2Str': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Str', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Str_22(self):
        request = [{'ok': {'value': {'p2Str': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Str', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Str_23(self):
        request = [{'ok': {'value': {'p2Str': {'wrap': 0, 'nest': [0]}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Str_24(self):
        request = [{'ok': {'value': {'p2Str': {'wrap': '', 'nest': [0]}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Str_25(self):
        request = [{'ok': {'value': {'p2Str': {'wrap': [], 'nest': [0]}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Str_26(self):
        request = [{'ok': {'value': {'p2Str': {'wrap': {}, 'nest': [0]}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Str_27(self):
        request = [{'ok': {'value': {'p2Str': {'wrap': False, 'nest': [0, False]}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Str_28(self):
        request = [{'ok': {'value': {'p2Str': {'wrap': False, 'nest': [0, 0.1]}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Str_29(self):
        request = [{'ok': {'value': {'p2Str': {'wrap': False, 'nest': [0, '']}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Str_30(self):
        request = [{'ok': {'value': {'p2Str': {'wrap': False, 'nest': [0, []]}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Str_31(self):
        request = [{'ok': {'value': {'p2Str': {'wrap': False, 'nest': [0, {}]}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Str_0(self):
        request = [{'ok': {'value': {'nullP2Str': None}}}, {'fn.test': {'value': {'nullP2Str': None}}}]
        expected_response = [{}, {'ok': {'value': {'nullP2Str': None}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Str_1(self):
        request = [{'ok': {'value': {'nullP2Str': {'wrap': False, 'nest': [0]}}}}, {'fn.test': {'value': {'nullP2Str': {'wrap': False, 'nest': [0]}}}}]
        expected_response = [{}, {'ok': {'value': {'nullP2Str': {'wrap': False, 'nest': [0]}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Str_2(self):
        request = [{'ok': {'value': {'nullP2Str': {'wrap': True, 'nest': [1]}}}}, {'fn.test': {'value': {'nullP2Str': {'wrap': True, 'nest': [1]}}}}]
        expected_response = [{}, {'ok': {'value': {'nullP2Str': {'wrap': True, 'nest': [1]}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Str_3(self):
        request = [{}, {'fn.test': {'value': {'nullP2Str': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Str', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Str_4(self):
        request = [{}, {'fn.test': {'value': {'nullP2Str': 0}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Str', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Str_5(self):
        request = [{}, {'fn.test': {'value': {'nullP2Str': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Str', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Str_6(self):
        request = [{}, {'fn.test': {'value': {'nullP2Str': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Str', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Str_7(self):
        request = [{}, {'fn.test': {'value': {'nullP2Str': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Str', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Str_8(self):
        request = [{}, {'fn.test': {'value': {'nullP2Str': {'wrap': 0, 'nest': [0]}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Str_9(self):
        request = [{}, {'fn.test': {'value': {'nullP2Str': {'wrap': '', 'nest': [0]}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Str_10(self):
        request = [{}, {'fn.test': {'value': {'nullP2Str': {'wrap': [], 'nest': [0]}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Str_11(self):
        request = [{}, {'fn.test': {'value': {'nullP2Str': {'wrap': {}, 'nest': [0]}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Str_12(self):
        request = [{}, {'fn.test': {'value': {'nullP2Str': {'wrap': False, 'nest': [0, False]}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Str_13(self):
        request = [{}, {'fn.test': {'value': {'nullP2Str': {'wrap': False, 'nest': [0, 0.1]}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Str_14(self):
        request = [{}, {'fn.test': {'value': {'nullP2Str': {'wrap': False, 'nest': [0, '']}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Str_15(self):
        request = [{}, {'fn.test': {'value': {'nullP2Str': {'wrap': False, 'nest': [0, []]}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Str_16(self):
        request = [{}, {'fn.test': {'value': {'nullP2Str': {'wrap': False, 'nest': [0, {}]}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Str_17(self):
        request = [{'ok': {'value': {'nullP2Str': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Str', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Str_18(self):
        request = [{'ok': {'value': {'nullP2Str': 0}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Str', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Str_19(self):
        request = [{'ok': {'value': {'nullP2Str': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Str', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Str_20(self):
        request = [{'ok': {'value': {'nullP2Str': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Str', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Str_21(self):
        request = [{'ok': {'value': {'nullP2Str': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Str', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Str_22(self):
        request = [{'ok': {'value': {'nullP2Str': {'wrap': 0, 'nest': [0]}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Str_23(self):
        request = [{'ok': {'value': {'nullP2Str': {'wrap': '', 'nest': [0]}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Str_24(self):
        request = [{'ok': {'value': {'nullP2Str': {'wrap': [], 'nest': [0]}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Str_25(self):
        request = [{'ok': {'value': {'nullP2Str': {'wrap': {}, 'nest': [0]}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Str_26(self):
        request = [{'ok': {'value': {'nullP2Str': {'wrap': False, 'nest': [0, False]}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Str_27(self):
        request = [{'ok': {'value': {'nullP2Str': {'wrap': False, 'nest': [0, 0.1]}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Str_28(self):
        request = [{'ok': {'value': {'nullP2Str': {'wrap': False, 'nest': [0, '']}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Str_29(self):
        request = [{'ok': {'value': {'nullP2Str': {'wrap': False, 'nest': [0, []]}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Str_30(self):
        request = [{'ok': {'value': {'nullP2Str': {'wrap': False, 'nest': [0, {}]}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Str.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Str_0(self):
        request = [{'ok': {'value': {'arrP2Str': []}}}, {'fn.test': {'value': {'arrP2Str': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrP2Str': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Str_1(self):
        request = [{'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}]}}}, {'fn.test': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Str_2(self):
        request = [{'ok': {'value': {'arrP2Str': [{'wrap': True, 'nest': [1]}]}}}, {'fn.test': {'value': {'arrP2Str': [{'wrap': True, 'nest': [1]}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrP2Str': [{'wrap': True, 'nest': [1]}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Str_3(self):
        request = [{'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': True, 'nest': [1]}]}}}, {'fn.test': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': True, 'nest': [1]}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': True, 'nest': [1]}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Str_4(self):
        request = [{}, {'fn.test': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, None]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Str[1]', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Str_5(self):
        request = [{}, {'fn.test': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Str_6(self):
        request = [{}, {'fn.test': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, 0]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Str_7(self):
        request = [{}, {'fn.test': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Str_8(self):
        request = [{}, {'fn.test': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Str_9(self):
        request = [{}, {'fn.test': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Str_10(self):
        request = [{}, {'fn.test': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': 0, 'nest': [0]}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Str[1].wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Str_11(self):
        request = [{}, {'fn.test': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': '', 'nest': [0]}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Str[1].wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Str_12(self):
        request = [{}, {'fn.test': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': [], 'nest': [0]}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Str[1].wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Str_13(self):
        request = [{}, {'fn.test': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': {}, 'nest': [0]}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Str[1].wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Str_14(self):
        request = [{}, {'fn.test': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, False]}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Str_15(self):
        request = [{}, {'fn.test': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, 0.1]}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Str_16(self):
        request = [{}, {'fn.test': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, '']}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Str_17(self):
        request = [{}, {'fn.test': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, []]}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Str_18(self):
        request = [{}, {'fn.test': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, {}]}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Str_19(self):
        request = [{'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, None]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Str[1]', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Str_20(self):
        request = [{'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Str_21(self):
        request = [{'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, 0]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Str_22(self):
        request = [{'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Str_23(self):
        request = [{'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Str_24(self):
        request = [{'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Str_25(self):
        request = [{'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': 0, 'nest': [0]}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Str[1].wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Str_26(self):
        request = [{'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': '', 'nest': [0]}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Str[1].wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Str_27(self):
        request = [{'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': [], 'nest': [0]}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Str[1].wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Str_28(self):
        request = [{'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': {}, 'nest': [0]}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Str[1].wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Str_29(self):
        request = [{'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, False]}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Str_30(self):
        request = [{'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, 0.1]}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Str_31(self):
        request = [{'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, '']}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Str_32(self):
        request = [{'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, []]}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Str_33(self):
        request = [{'ok': {'value': {'arrP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, {}]}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Str_0(self):
        request = [{'ok': {'value': {'arrNullP2Str': []}}}, {'fn.test': {'value': {'arrNullP2Str': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullP2Str': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Str_1(self):
        request = [{'ok': {'value': {'arrNullP2Str': [None]}}}, {'fn.test': {'value': {'arrNullP2Str': [None]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullP2Str': [None]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Str_2(self):
        request = [{'ok': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}]}}}, {'fn.test': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Str_3(self):
        request = [{'ok': {'value': {'arrNullP2Str': [{'wrap': True, 'nest': [1]}]}}}, {'fn.test': {'value': {'arrNullP2Str': [{'wrap': True, 'nest': [1]}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullP2Str': [{'wrap': True, 'nest': [1]}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Str_4(self):
        request = [{'ok': {'value': {'arrNullP2Str': [None, {'wrap': False, 'nest': [0]}, {'wrap': True, 'nest': [1]}]}}}, {'fn.test': {'value': {'arrNullP2Str': [None, {'wrap': False, 'nest': [0]}, {'wrap': True, 'nest': [1]}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullP2Str': [None, {'wrap': False, 'nest': [0]}, {'wrap': True, 'nest': [1]}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Str_5(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Str_6(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, 0]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Str_7(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Str_8(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Str_9(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Str_10(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': 0, 'nest': [0]}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Str[1].wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Str_11(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': '', 'nest': [0]}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Str[1].wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Str_12(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': [], 'nest': [0]}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Str[1].wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Str_13(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': {}, 'nest': [0]}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Str[1].wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Str_14(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, False]}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Str_15(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, 0.1]}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Str_16(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, '']}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Str_17(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, []]}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Str_18(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, {}]}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Str_19(self):
        request = [{'ok': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Str_20(self):
        request = [{'ok': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, 0]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Str_21(self):
        request = [{'ok': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Str_22(self):
        request = [{'ok': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Str_23(self):
        request = [{'ok': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Str[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Str_24(self):
        request = [{'ok': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': 0, 'nest': [0]}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Str[1].wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Str_25(self):
        request = [{'ok': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': '', 'nest': [0]}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Str[1].wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Str_26(self):
        request = [{'ok': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': [], 'nest': [0]}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Str[1].wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Str_27(self):
        request = [{'ok': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': {}, 'nest': [0]}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Str[1].wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Str_28(self):
        request = [{'ok': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, False]}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Str_29(self):
        request = [{'ok': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, 0.1]}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Str_30(self):
        request = [{'ok': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, '']}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Str_31(self):
        request = [{'ok': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, []]}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Str_32(self):
        request = [{'ok': {'value': {'arrNullP2Str': [{'wrap': False, 'nest': [0]}, {'wrap': False, 'nest': [0, {}]}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Str[1].nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Str_0(self):
        request = [{'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}}}}}, {'fn.test': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}}}}}]
        expected_response = [{}, {'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Str_1(self):
        request = [{'ok': {'value': {'objP2Str': {'a': {'wrap': True, 'nest': [1]}}}}}, {'fn.test': {'value': {'objP2Str': {'a': {'wrap': True, 'nest': [1]}}}}}]
        expected_response = [{}, {'ok': {'value': {'objP2Str': {'a': {'wrap': True, 'nest': [1]}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Str_2(self):
        request = [{'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': True, 'nest': [1]}}}}}, {'fn.test': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': True, 'nest': [1]}}}}}]
        expected_response = [{}, {'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': True, 'nest': [1]}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Str_3(self):
        request = [{}, {'fn.test': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Str{b}', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Str_4(self):
        request = [{}, {'fn.test': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Str_5(self):
        request = [{}, {'fn.test': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Str_6(self):
        request = [{}, {'fn.test': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Str_7(self):
        request = [{}, {'fn.test': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Str_8(self):
        request = [{}, {'fn.test': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Str_9(self):
        request = [{}, {'fn.test': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': 0, 'nest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Str{b}.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Str_10(self):
        request = [{}, {'fn.test': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': '', 'nest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Str{b}.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Str_11(self):
        request = [{}, {'fn.test': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': [], 'nest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Str{b}.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Str_12(self):
        request = [{}, {'fn.test': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': {}, 'nest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Str{b}.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Str_13(self):
        request = [{}, {'fn.test': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, False]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Str_14(self):
        request = [{}, {'fn.test': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, 0.1]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Str_15(self):
        request = [{}, {'fn.test': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, '']}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Str_16(self):
        request = [{}, {'fn.test': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, []]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Str_17(self):
        request = [{}, {'fn.test': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, {}]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Str_18(self):
        request = [{'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Str{b}', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Str_19(self):
        request = [{'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Str_20(self):
        request = [{'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Str_21(self):
        request = [{'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Str_22(self):
        request = [{'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Str_23(self):
        request = [{'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Str_24(self):
        request = [{'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': 0, 'nest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Str{b}.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Str_25(self):
        request = [{'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': '', 'nest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Str{b}.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Str_26(self):
        request = [{'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': [], 'nest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Str{b}.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Str_27(self):
        request = [{'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': {}, 'nest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Str{b}.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Str_28(self):
        request = [{'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, False]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Str_29(self):
        request = [{'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, 0.1]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Str_30(self):
        request = [{'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, '']}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Str_31(self):
        request = [{'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, []]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Str_32(self):
        request = [{'ok': {'value': {'objP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, {}]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Str_0(self):
        request = [{'ok': {'value': {'objNullP2Str': {'a': None}}}}, {'fn.test': {'value': {'objNullP2Str': {'a': None}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullP2Str': {'a': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Str_1(self):
        request = [{'ok': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}}}}}, {'fn.test': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Str_2(self):
        request = [{'ok': {'value': {'objNullP2Str': {'a': {'wrap': True, 'nest': [1]}}}}}, {'fn.test': {'value': {'objNullP2Str': {'a': {'wrap': True, 'nest': [1]}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullP2Str': {'a': {'wrap': True, 'nest': [1]}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Str_3(self):
        request = [{'ok': {'value': {'objNullP2Str': {'a': None, 'b': {'wrap': False, 'nest': [0]}, 'c': {'wrap': True, 'nest': [1]}}}}}, {'fn.test': {'value': {'objNullP2Str': {'a': None, 'b': {'wrap': False, 'nest': [0]}, 'c': {'wrap': True, 'nest': [1]}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullP2Str': {'a': None, 'b': {'wrap': False, 'nest': [0]}, 'c': {'wrap': True, 'nest': [1]}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Str_4(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Str_5(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Str_6(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Str_7(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Str_8(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Str_9(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': 0, 'nest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Str{b}.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Str_10(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': '', 'nest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Str{b}.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Str_11(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': [], 'nest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Str{b}.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Str_12(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': {}, 'nest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Str{b}.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Str_13(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, False]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Str_14(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, 0.1]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Str_15(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, '']}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Str_16(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, []]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Str_17(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, {}]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Str_18(self):
        request = [{'ok': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Str_19(self):
        request = [{'ok': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Str_20(self):
        request = [{'ok': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Str_21(self):
        request = [{'ok': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Str_22(self):
        request = [{'ok': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Str{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Str_23(self):
        request = [{'ok': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': 0, 'nest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Str{b}.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Str_24(self):
        request = [{'ok': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': '', 'nest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Str{b}.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Str_25(self):
        request = [{'ok': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': [], 'nest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Str{b}.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Str_26(self):
        request = [{'ok': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': {}, 'nest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Str{b}.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Str_27(self):
        request = [{'ok': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, False]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Str_28(self):
        request = [{'ok': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, 0.1]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Str_29(self):
        request = [{'ok': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, '']}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Str_30(self):
        request = [{'ok': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, []]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Str_31(self):
        request = [{'ok': {'value': {'objNullP2Str': {'a': {'wrap': False, 'nest': [0]}, 'b': {'wrap': False, 'nest': [0, {}]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Str{b}.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Str_0(self):
        request = [{'ok': {'value': {'pStrP2Str': {'wrap': {'wrap': False, 'nest': [0]}}}}}, {'fn.test': {'value': {'pStrP2Str': {'wrap': {'wrap': False, 'nest': [0]}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrP2Str': {'wrap': {'wrap': False, 'nest': [0]}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Str_1(self):
        request = [{'ok': {'value': {'pStrP2Str': {'wrap': {'wrap': True, 'nest': [1]}}}}}, {'fn.test': {'value': {'pStrP2Str': {'wrap': {'wrap': True, 'nest': [1]}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrP2Str': {'wrap': {'wrap': True, 'nest': [1]}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Str_2(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Str': {'wrap': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Str.wrap', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Str_3(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Str': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Str_4(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Str': {'wrap': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Str_5(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Str': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Str_6(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Str': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Str_7(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Str': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Str_8(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Str': {'wrap': {'wrap': 0, 'nest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Str.wrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Str_9(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Str': {'wrap': {'wrap': '', 'nest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Str.wrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Str_10(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Str': {'wrap': {'wrap': [], 'nest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Str.wrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Str_11(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Str': {'wrap': {'wrap': {}, 'nest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Str.wrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Str_12(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Str': {'wrap': {'wrap': False, 'nest': [0, False]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Str_13(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Str': {'wrap': {'wrap': False, 'nest': [0, 0.1]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Str_14(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Str': {'wrap': {'wrap': False, 'nest': [0, '']}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Str_15(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Str': {'wrap': {'wrap': False, 'nest': [0, []]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Str_16(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Str': {'wrap': {'wrap': False, 'nest': [0, {}]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Str_17(self):
        request = [{'ok': {'value': {'pStrP2Str': {'wrap': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Str.wrap', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Str_18(self):
        request = [{'ok': {'value': {'pStrP2Str': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Str_19(self):
        request = [{'ok': {'value': {'pStrP2Str': {'wrap': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Str_20(self):
        request = [{'ok': {'value': {'pStrP2Str': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Str_21(self):
        request = [{'ok': {'value': {'pStrP2Str': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Str_22(self):
        request = [{'ok': {'value': {'pStrP2Str': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Str_23(self):
        request = [{'ok': {'value': {'pStrP2Str': {'wrap': {'wrap': 0, 'nest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Str.wrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Str_24(self):
        request = [{'ok': {'value': {'pStrP2Str': {'wrap': {'wrap': '', 'nest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Str.wrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Str_25(self):
        request = [{'ok': {'value': {'pStrP2Str': {'wrap': {'wrap': [], 'nest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Str.wrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Str_26(self):
        request = [{'ok': {'value': {'pStrP2Str': {'wrap': {'wrap': {}, 'nest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Str.wrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Str_27(self):
        request = [{'ok': {'value': {'pStrP2Str': {'wrap': {'wrap': False, 'nest': [0, False]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Str_28(self):
        request = [{'ok': {'value': {'pStrP2Str': {'wrap': {'wrap': False, 'nest': [0, 0.1]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Str_29(self):
        request = [{'ok': {'value': {'pStrP2Str': {'wrap': {'wrap': False, 'nest': [0, '']}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Str_30(self):
        request = [{'ok': {'value': {'pStrP2Str': {'wrap': {'wrap': False, 'nest': [0, []]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Str_31(self):
        request = [{'ok': {'value': {'pStrP2Str': {'wrap': {'wrap': False, 'nest': [0, {}]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Str_0(self):
        request = [{'ok': {'value': {'pStrNullP2Str': {'wrap': None}}}}, {'fn.test': {'value': {'pStrNullP2Str': {'wrap': None}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullP2Str': {'wrap': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Str_1(self):
        request = [{'ok': {'value': {'pStrNullP2Str': {'wrap': {'wrap': False, 'nest': [0]}}}}}, {'fn.test': {'value': {'pStrNullP2Str': {'wrap': {'wrap': False, 'nest': [0]}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullP2Str': {'wrap': {'wrap': False, 'nest': [0]}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Str_2(self):
        request = [{'ok': {'value': {'pStrNullP2Str': {'wrap': {'wrap': True, 'nest': [1]}}}}}, {'fn.test': {'value': {'pStrNullP2Str': {'wrap': {'wrap': True, 'nest': [1]}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullP2Str': {'wrap': {'wrap': True, 'nest': [1]}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Str_3(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Str': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Str_4(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Str': {'wrap': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Str_5(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Str': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Str_6(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Str': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Str_7(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Str': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Str_8(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Str': {'wrap': {'wrap': 0, 'nest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Str.wrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Str_9(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Str': {'wrap': {'wrap': '', 'nest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Str.wrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Str_10(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Str': {'wrap': {'wrap': [], 'nest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Str.wrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Str_11(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Str': {'wrap': {'wrap': {}, 'nest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Str.wrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Str_12(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Str': {'wrap': {'wrap': False, 'nest': [0, False]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Str_13(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Str': {'wrap': {'wrap': False, 'nest': [0, 0.1]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Str_14(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Str': {'wrap': {'wrap': False, 'nest': [0, '']}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Str_15(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Str': {'wrap': {'wrap': False, 'nest': [0, []]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Str_16(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Str': {'wrap': {'wrap': False, 'nest': [0, {}]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Str_17(self):
        request = [{'ok': {'value': {'pStrNullP2Str': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Str_18(self):
        request = [{'ok': {'value': {'pStrNullP2Str': {'wrap': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Str_19(self):
        request = [{'ok': {'value': {'pStrNullP2Str': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Str_20(self):
        request = [{'ok': {'value': {'pStrNullP2Str': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Str_21(self):
        request = [{'ok': {'value': {'pStrNullP2Str': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Str.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Str_22(self):
        request = [{'ok': {'value': {'pStrNullP2Str': {'wrap': {'wrap': 0, 'nest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Str.wrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Str_23(self):
        request = [{'ok': {'value': {'pStrNullP2Str': {'wrap': {'wrap': '', 'nest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Str.wrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Str_24(self):
        request = [{'ok': {'value': {'pStrNullP2Str': {'wrap': {'wrap': [], 'nest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Str.wrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Str_25(self):
        request = [{'ok': {'value': {'pStrNullP2Str': {'wrap': {'wrap': {}, 'nest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Str.wrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Str_26(self):
        request = [{'ok': {'value': {'pStrNullP2Str': {'wrap': {'wrap': False, 'nest': [0, False]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Str_27(self):
        request = [{'ok': {'value': {'pStrNullP2Str': {'wrap': {'wrap': False, 'nest': [0, 0.1]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Str_28(self):
        request = [{'ok': {'value': {'pStrNullP2Str': {'wrap': {'wrap': False, 'nest': [0, '']}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Str_29(self):
        request = [{'ok': {'value': {'pStrNullP2Str': {'wrap': {'wrap': False, 'nest': [0, []]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Str_30(self):
        request = [{'ok': {'value': {'pStrNullP2Str': {'wrap': {'wrap': False, 'nest': [0, {}]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Str.wrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Str_0(self):
        request = [{'ok': {'value': {'pEnumP2Str': {'one': {}}}}}, {'fn.test': {'value': {'pEnumP2Str': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumP2Str': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Str_1(self):
        request = [{'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0]}}}}}}, {'fn.test': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0]}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0]}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Str_2(self):
        request = [{'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': True, 'nest': [1]}}}}}}, {'fn.test': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': True, 'nest': [1]}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': True, 'nest': [1]}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Str_3(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Str': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Str.two.ewrap', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Str_4(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Str': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Str_5(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Str': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Str_6(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Str': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Str_7(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Str': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Str_8(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Str': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Str_9(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': 0, 'nest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Str.two.ewrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Str_10(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': '', 'nest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Str.two.ewrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Str_11(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': [], 'nest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Str.two.ewrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Str_12(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': {}, 'nest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Str.two.ewrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Str_13(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, False]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Str_14(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, 0.1]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Str_15(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, '']}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Str_16(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, []]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Str_17(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, {}]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Str_18(self):
        request = [{'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': None}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Str.two.ewrap', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Str_19(self):
        request = [{'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Str_20(self):
        request = [{'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Str_21(self):
        request = [{'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Str_22(self):
        request = [{'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Str_23(self):
        request = [{'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Str_24(self):
        request = [{'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': 0, 'nest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Str.two.ewrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Str_25(self):
        request = [{'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': '', 'nest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Str.two.ewrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Str_26(self):
        request = [{'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': [], 'nest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Str.two.ewrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Str_27(self):
        request = [{'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': {}, 'nest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Str.two.ewrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Str_28(self):
        request = [{'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, False]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Str_29(self):
        request = [{'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, 0.1]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Str_30(self):
        request = [{'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, '']}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Str_31(self):
        request = [{'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, []]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Str_32(self):
        request = [{'ok': {'value': {'pEnumP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, {}]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Str_0(self):
        request = [{'ok': {'value': {'pEnumNullP2Str': {'one': {}}}}}, {'fn.test': {'value': {'pEnumNullP2Str': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullP2Str': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Str_1(self):
        request = [{'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': None}}}}}, {'fn.test': {'value': {'pEnumNullP2Str': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': None}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Str_2(self):
        request = [{'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0]}}}}}}, {'fn.test': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0]}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0]}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Str_3(self):
        request = [{'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': True, 'nest': [1]}}}}}}, {'fn.test': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': True, 'nest': [1]}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': True, 'nest': [1]}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Str_4(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Str': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Str_5(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Str': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Str_6(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Str': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Str_7(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Str': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Str_8(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Str': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Str_9(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': 0, 'nest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Str.two.ewrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Str_10(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': '', 'nest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Str.two.ewrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Str_11(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': [], 'nest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Str.two.ewrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Str_12(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': {}, 'nest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Str.two.ewrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Str_13(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, False]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Str_14(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, 0.1]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Str_15(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, '']}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Str_16(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, []]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Str_17(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, {}]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Str_18(self):
        request = [{'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Str_19(self):
        request = [{'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Str_20(self):
        request = [{'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Str_21(self):
        request = [{'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Str_22(self):
        request = [{'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Str.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Str_23(self):
        request = [{'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': 0, 'nest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Str.two.ewrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Str_24(self):
        request = [{'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': '', 'nest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Str.two.ewrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Str_25(self):
        request = [{'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': [], 'nest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Str.two.ewrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Str_26(self):
        request = [{'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': {}, 'nest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Str.two.ewrap.wrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Str_27(self):
        request = [{'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, False]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Str_28(self):
        request = [{'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, 0.1]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Str_29(self):
        request = [{'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, '']}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Str_30(self):
        request = [{'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, []]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Str_31(self):
        request = [{'ok': {'value': {'pEnumNullP2Str': {'two': {'ewrap': {'wrap': False, 'nest': [0, {}]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Str.two.ewrap.nest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Enum_0(self):
        request = [{'ok': {'value': {'p2Enum': {'two': {'ewrap': False, 'enest': [0]}}}}}, {'fn.test': {'value': {'p2Enum': {'two': {'ewrap': False, 'enest': [0]}}}}}]
        expected_response = [{}, {'ok': {'value': {'p2Enum': {'two': {'ewrap': False, 'enest': [0]}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Enum_1(self):
        request = [{'ok': {'value': {'p2Enum': {'two': {'ewrap': True, 'enest': [1]}}}}}, {'fn.test': {'value': {'p2Enum': {'two': {'ewrap': True, 'enest': [1]}}}}}]
        expected_response = [{}, {'ok': {'value': {'p2Enum': {'two': {'ewrap': True, 'enest': [1]}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Enum_2(self):
        request = [{}, {'fn.test': {'value': {'p2Enum': None}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Enum', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Enum_3(self):
        request = [{}, {'fn.test': {'value': {'p2Enum': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Enum', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Enum_4(self):
        request = [{}, {'fn.test': {'value': {'p2Enum': 0}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Enum', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Enum_5(self):
        request = [{}, {'fn.test': {'value': {'p2Enum': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Enum', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Enum_6(self):
        request = [{}, {'fn.test': {'value': {'p2Enum': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Enum', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Enum_7(self):
        request = [{}, {'fn.test': {'value': {'p2Enum': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Enum', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Enum_8(self):
        request = [{}, {'fn.test': {'value': {'p2Enum': {'two': {'ewrap': 0, 'enest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Enum_9(self):
        request = [{}, {'fn.test': {'value': {'p2Enum': {'two': {'ewrap': '', 'enest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Enum_10(self):
        request = [{}, {'fn.test': {'value': {'p2Enum': {'two': {'ewrap': [], 'enest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Enum_11(self):
        request = [{}, {'fn.test': {'value': {'p2Enum': {'two': {'ewrap': {}, 'enest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Enum_12(self):
        request = [{}, {'fn.test': {'value': {'p2Enum': {'two': {'ewrap': False, 'enest': [0, False]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Enum_13(self):
        request = [{}, {'fn.test': {'value': {'p2Enum': {'two': {'ewrap': False, 'enest': [0, 0.1]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Enum_14(self):
        request = [{}, {'fn.test': {'value': {'p2Enum': {'two': {'ewrap': False, 'enest': [0, '']}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Enum_15(self):
        request = [{}, {'fn.test': {'value': {'p2Enum': {'two': {'ewrap': False, 'enest': [0, []]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Enum_16(self):
        request = [{}, {'fn.test': {'value': {'p2Enum': {'two': {'ewrap': False, 'enest': [0, {}]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.p2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Enum_17(self):
        request = [{'ok': {'value': {'p2Enum': None}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Enum', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Enum_18(self):
        request = [{'ok': {'value': {'p2Enum': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Enum', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Enum_19(self):
        request = [{'ok': {'value': {'p2Enum': 0}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Enum', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Enum_20(self):
        request = [{'ok': {'value': {'p2Enum': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Enum', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Enum_21(self):
        request = [{'ok': {'value': {'p2Enum': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Enum', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Enum_22(self):
        request = [{'ok': {'value': {'p2Enum': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Enum', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Enum_23(self):
        request = [{'ok': {'value': {'p2Enum': {'two': {'ewrap': 0, 'enest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Enum_24(self):
        request = [{'ok': {'value': {'p2Enum': {'two': {'ewrap': '', 'enest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Enum_25(self):
        request = [{'ok': {'value': {'p2Enum': {'two': {'ewrap': [], 'enest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Enum_26(self):
        request = [{'ok': {'value': {'p2Enum': {'two': {'ewrap': {}, 'enest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Enum_27(self):
        request = [{'ok': {'value': {'p2Enum': {'two': {'ewrap': False, 'enest': [0, False]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Enum_28(self):
        request = [{'ok': {'value': {'p2Enum': {'two': {'ewrap': False, 'enest': [0, 0.1]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Enum_29(self):
        request = [{'ok': {'value': {'p2Enum': {'two': {'ewrap': False, 'enest': [0, '']}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Enum_30(self):
        request = [{'ok': {'value': {'p2Enum': {'two': {'ewrap': False, 'enest': [0, []]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testP2Enum_31(self):
        request = [{'ok': {'value': {'p2Enum': {'two': {'ewrap': False, 'enest': [0, {}]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.p2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Enum_0(self):
        request = [{'ok': {'value': {'nullP2Enum': None}}}, {'fn.test': {'value': {'nullP2Enum': None}}}]
        expected_response = [{}, {'ok': {'value': {'nullP2Enum': None}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Enum_1(self):
        request = [{'ok': {'value': {'nullP2Enum': {'two': {'ewrap': False, 'enest': [0]}}}}}, {'fn.test': {'value': {'nullP2Enum': {'two': {'ewrap': False, 'enest': [0]}}}}}]
        expected_response = [{}, {'ok': {'value': {'nullP2Enum': {'two': {'ewrap': False, 'enest': [0]}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Enum_2(self):
        request = [{'ok': {'value': {'nullP2Enum': {'two': {'ewrap': True, 'enest': [1]}}}}}, {'fn.test': {'value': {'nullP2Enum': {'two': {'ewrap': True, 'enest': [1]}}}}}]
        expected_response = [{}, {'ok': {'value': {'nullP2Enum': {'two': {'ewrap': True, 'enest': [1]}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Enum_3(self):
        request = [{}, {'fn.test': {'value': {'nullP2Enum': False}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Enum', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Enum_4(self):
        request = [{}, {'fn.test': {'value': {'nullP2Enum': 0}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Enum', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Enum_5(self):
        request = [{}, {'fn.test': {'value': {'nullP2Enum': 0.1}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Enum', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Enum_6(self):
        request = [{}, {'fn.test': {'value': {'nullP2Enum': ''}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Enum', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Enum_7(self):
        request = [{}, {'fn.test': {'value': {'nullP2Enum': []}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Enum', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Enum_8(self):
        request = [{}, {'fn.test': {'value': {'nullP2Enum': {'two': {'ewrap': 0, 'enest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Enum_9(self):
        request = [{}, {'fn.test': {'value': {'nullP2Enum': {'two': {'ewrap': '', 'enest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Enum_10(self):
        request = [{}, {'fn.test': {'value': {'nullP2Enum': {'two': {'ewrap': [], 'enest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Enum_11(self):
        request = [{}, {'fn.test': {'value': {'nullP2Enum': {'two': {'ewrap': {}, 'enest': [0]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Enum_12(self):
        request = [{}, {'fn.test': {'value': {'nullP2Enum': {'two': {'ewrap': False, 'enest': [0, False]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Enum_13(self):
        request = [{}, {'fn.test': {'value': {'nullP2Enum': {'two': {'ewrap': False, 'enest': [0, 0.1]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Enum_14(self):
        request = [{}, {'fn.test': {'value': {'nullP2Enum': {'two': {'ewrap': False, 'enest': [0, '']}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Enum_15(self):
        request = [{}, {'fn.test': {'value': {'nullP2Enum': {'two': {'ewrap': False, 'enest': [0, []]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Enum_16(self):
        request = [{}, {'fn.test': {'value': {'nullP2Enum': {'two': {'ewrap': False, 'enest': [0, {}]}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.nullP2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Enum_17(self):
        request = [{'ok': {'value': {'nullP2Enum': False}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Enum', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Enum_18(self):
        request = [{'ok': {'value': {'nullP2Enum': 0}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Enum', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Enum_19(self):
        request = [{'ok': {'value': {'nullP2Enum': 0.1}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Enum', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Enum_20(self):
        request = [{'ok': {'value': {'nullP2Enum': ''}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Enum', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Enum_21(self):
        request = [{'ok': {'value': {'nullP2Enum': []}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Enum', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Enum_22(self):
        request = [{'ok': {'value': {'nullP2Enum': {'two': {'ewrap': 0, 'enest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Enum_23(self):
        request = [{'ok': {'value': {'nullP2Enum': {'two': {'ewrap': '', 'enest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Enum_24(self):
        request = [{'ok': {'value': {'nullP2Enum': {'two': {'ewrap': [], 'enest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Enum_25(self):
        request = [{'ok': {'value': {'nullP2Enum': {'two': {'ewrap': {}, 'enest': [0]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Enum_26(self):
        request = [{'ok': {'value': {'nullP2Enum': {'two': {'ewrap': False, 'enest': [0, False]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Enum_27(self):
        request = [{'ok': {'value': {'nullP2Enum': {'two': {'ewrap': False, 'enest': [0, 0.1]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Enum_28(self):
        request = [{'ok': {'value': {'nullP2Enum': {'two': {'ewrap': False, 'enest': [0, '']}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Enum_29(self):
        request = [{'ok': {'value': {'nullP2Enum': {'two': {'ewrap': False, 'enest': [0, []]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testNullableP2Enum_30(self):
        request = [{'ok': {'value': {'nullP2Enum': {'two': {'ewrap': False, 'enest': [0, {}]}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.nullP2Enum.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Enum_0(self):
        request = [{'ok': {'value': {'arrP2Enum': []}}}, {'fn.test': {'value': {'arrP2Enum': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrP2Enum': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Enum_1(self):
        request = [{'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}]}}}, {'fn.test': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Enum_2(self):
        request = [{'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': True, 'enest': [1]}}]}}}, {'fn.test': {'value': {'arrP2Enum': [{'two': {'ewrap': True, 'enest': [1]}}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': True, 'enest': [1]}}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Enum_3(self):
        request = [{'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': True, 'enest': [1]}}]}}}, {'fn.test': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': True, 'enest': [1]}}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': True, 'enest': [1]}}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Enum_4(self):
        request = [{}, {'fn.test': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, None]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Enum[1]', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Enum_5(self):
        request = [{}, {'fn.test': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Enum_6(self):
        request = [{}, {'fn.test': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, 0]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Enum_7(self):
        request = [{}, {'fn.test': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Enum_8(self):
        request = [{}, {'fn.test': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Enum_9(self):
        request = [{}, {'fn.test': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Enum_10(self):
        request = [{}, {'fn.test': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': 0, 'enest': [0]}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Enum[1].two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Enum_11(self):
        request = [{}, {'fn.test': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': '', 'enest': [0]}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Enum[1].two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Enum_12(self):
        request = [{}, {'fn.test': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': [], 'enest': [0]}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Enum[1].two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Enum_13(self):
        request = [{}, {'fn.test': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': {}, 'enest': [0]}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Enum[1].two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Enum_14(self):
        request = [{}, {'fn.test': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, False]}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Enum_15(self):
        request = [{}, {'fn.test': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, 0.1]}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Enum_16(self):
        request = [{}, {'fn.test': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, '']}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Enum_17(self):
        request = [{}, {'fn.test': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, []]}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Enum_18(self):
        request = [{}, {'fn.test': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, {}]}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Enum_19(self):
        request = [{'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, None]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Enum[1]', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Enum_20(self):
        request = [{'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Enum_21(self):
        request = [{'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, 0]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Enum_22(self):
        request = [{'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Enum_23(self):
        request = [{'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Enum_24(self):
        request = [{'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Enum_25(self):
        request = [{'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': 0, 'enest': [0]}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Enum[1].two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Enum_26(self):
        request = [{'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': '', 'enest': [0]}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Enum[1].two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Enum_27(self):
        request = [{'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': [], 'enest': [0]}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Enum[1].two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Enum_28(self):
        request = [{'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': {}, 'enest': [0]}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Enum[1].two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Enum_29(self):
        request = [{'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, False]}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Enum_30(self):
        request = [{'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, 0.1]}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Enum_31(self):
        request = [{'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, '']}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Enum_32(self):
        request = [{'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, []]}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayP2Enum_33(self):
        request = [{'ok': {'value': {'arrP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, {}]}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Enum_0(self):
        request = [{'ok': {'value': {'arrNullP2Enum': []}}}, {'fn.test': {'value': {'arrNullP2Enum': []}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullP2Enum': []}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Enum_1(self):
        request = [{'ok': {'value': {'arrNullP2Enum': [None]}}}, {'fn.test': {'value': {'arrNullP2Enum': [None]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullP2Enum': [None]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Enum_2(self):
        request = [{'ok': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}]}}}, {'fn.test': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Enum_3(self):
        request = [{'ok': {'value': {'arrNullP2Enum': [{'two': {'ewrap': True, 'enest': [1]}}]}}}, {'fn.test': {'value': {'arrNullP2Enum': [{'two': {'ewrap': True, 'enest': [1]}}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullP2Enum': [{'two': {'ewrap': True, 'enest': [1]}}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Enum_4(self):
        request = [{'ok': {'value': {'arrNullP2Enum': [None, {'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': True, 'enest': [1]}}]}}}, {'fn.test': {'value': {'arrNullP2Enum': [None, {'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': True, 'enest': [1]}}]}}}]
        expected_response = [{}, {'ok': {'value': {'arrNullP2Enum': [None, {'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': True, 'enest': [1]}}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Enum_5(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, False]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Enum_6(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, 0]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Enum_7(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, 0.1]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Enum_8(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, '']}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Enum_9(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, []]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Enum_10(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': 0, 'enest': [0]}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Enum[1].two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Enum_11(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': '', 'enest': [0]}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Enum[1].two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Enum_12(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': [], 'enest': [0]}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Enum[1].two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Enum_13(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': {}, 'enest': [0]}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Enum[1].two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Enum_14(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, False]}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Enum_15(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, 0.1]}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Enum_16(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, '']}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Enum_17(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, []]}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Enum_18(self):
        request = [{}, {'fn.test': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, {}]}}]}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.arrNullP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Enum_19(self):
        request = [{'ok': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, False]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Enum_20(self):
        request = [{'ok': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, 0]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Enum_21(self):
        request = [{'ok': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, 0.1]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Enum_22(self):
        request = [{'ok': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, '']}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Enum_23(self):
        request = [{'ok': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, []]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Enum[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Enum_24(self):
        request = [{'ok': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': 0, 'enest': [0]}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Enum[1].two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Enum_25(self):
        request = [{'ok': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': '', 'enest': [0]}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Enum[1].two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Enum_26(self):
        request = [{'ok': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': [], 'enest': [0]}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Enum[1].two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Enum_27(self):
        request = [{'ok': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': {}, 'enest': [0]}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Enum[1].two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Enum_28(self):
        request = [{'ok': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, False]}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Enum_29(self):
        request = [{'ok': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, 0.1]}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Enum_30(self):
        request = [{'ok': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, '']}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Enum_31(self):
        request = [{'ok': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, []]}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testArrayNullP2Enum_32(self):
        request = [{'ok': {'value': {'arrNullP2Enum': [{'two': {'ewrap': False, 'enest': [0]}}, {'two': {'ewrap': False, 'enest': [0, {}]}}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.arrNullP2Enum[1].two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Enum_0(self):
        request = [{'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}}}}}, {'fn.test': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}}}}}]
        expected_response = [{}, {'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Enum_1(self):
        request = [{'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': True, 'enest': [1]}}}}}}, {'fn.test': {'value': {'objP2Enum': {'a': {'two': {'ewrap': True, 'enest': [1]}}}}}}]
        expected_response = [{}, {'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': True, 'enest': [1]}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Enum_2(self):
        request = [{'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': True, 'enest': [1]}}}}}}, {'fn.test': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': True, 'enest': [1]}}}}}}]
        expected_response = [{}, {'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': True, 'enest': [1]}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Enum_3(self):
        request = [{}, {'fn.test': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Enum{b}', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Enum_4(self):
        request = [{}, {'fn.test': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Enum_5(self):
        request = [{}, {'fn.test': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Enum_6(self):
        request = [{}, {'fn.test': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Enum_7(self):
        request = [{}, {'fn.test': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Enum_8(self):
        request = [{}, {'fn.test': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Enum_9(self):
        request = [{}, {'fn.test': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': 0, 'enest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Enum{b}.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Enum_10(self):
        request = [{}, {'fn.test': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': '', 'enest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Enum{b}.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Enum_11(self):
        request = [{}, {'fn.test': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': [], 'enest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Enum{b}.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Enum_12(self):
        request = [{}, {'fn.test': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': {}, 'enest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Enum{b}.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Enum_13(self):
        request = [{}, {'fn.test': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, False]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Enum_14(self):
        request = [{}, {'fn.test': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, 0.1]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Enum_15(self):
        request = [{}, {'fn.test': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, '']}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Enum_16(self):
        request = [{}, {'fn.test': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, []]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Enum_17(self):
        request = [{}, {'fn.test': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, {}]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Enum_18(self):
        request = [{'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Enum{b}', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Enum_19(self):
        request = [{'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Enum_20(self):
        request = [{'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Enum_21(self):
        request = [{'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Enum_22(self):
        request = [{'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Enum_23(self):
        request = [{'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Enum_24(self):
        request = [{'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': 0, 'enest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Enum{b}.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Enum_25(self):
        request = [{'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': '', 'enest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Enum{b}.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Enum_26(self):
        request = [{'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': [], 'enest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Enum{b}.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Enum_27(self):
        request = [{'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': {}, 'enest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Enum{b}.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Enum_28(self):
        request = [{'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, False]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Enum_29(self):
        request = [{'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, 0.1]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Enum_30(self):
        request = [{'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, '']}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Enum_31(self):
        request = [{'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, []]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectP2Enum_32(self):
        request = [{'ok': {'value': {'objP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, {}]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Enum_0(self):
        request = [{'ok': {'value': {'objNullP2Enum': {'a': None}}}}, {'fn.test': {'value': {'objNullP2Enum': {'a': None}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullP2Enum': {'a': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Enum_1(self):
        request = [{'ok': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}}}}}, {'fn.test': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Enum_2(self):
        request = [{'ok': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': True, 'enest': [1]}}}}}}, {'fn.test': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': True, 'enest': [1]}}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': True, 'enest': [1]}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Enum_3(self):
        request = [{'ok': {'value': {'objNullP2Enum': {'a': None, 'b': {'two': {'ewrap': False, 'enest': [0]}}, 'c': {'two': {'ewrap': True, 'enest': [1]}}}}}}, {'fn.test': {'value': {'objNullP2Enum': {'a': None, 'b': {'two': {'ewrap': False, 'enest': [0]}}, 'c': {'two': {'ewrap': True, 'enest': [1]}}}}}}]
        expected_response = [{}, {'ok': {'value': {'objNullP2Enum': {'a': None, 'b': {'two': {'ewrap': False, 'enest': [0]}}, 'c': {'two': {'ewrap': True, 'enest': [1]}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Enum_4(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Enum_5(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Enum_6(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Enum_7(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Enum_8(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Enum_9(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': 0, 'enest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Enum{b}.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Enum_10(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': '', 'enest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Enum{b}.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Enum_11(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': [], 'enest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Enum{b}.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Enum_12(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': {}, 'enest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Enum{b}.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Enum_13(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, False]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Enum_14(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, 0.1]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Enum_15(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, '']}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Enum_16(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, []]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Enum_17(self):
        request = [{}, {'fn.test': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, {}]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.objNullP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Enum_18(self):
        request = [{'ok': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Enum_19(self):
        request = [{'ok': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Enum_20(self):
        request = [{'ok': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Enum_21(self):
        request = [{'ok': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Enum_22(self):
        request = [{'ok': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Enum{b}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Enum_23(self):
        request = [{'ok': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': 0, 'enest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Enum{b}.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Enum_24(self):
        request = [{'ok': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': '', 'enest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Enum{b}.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Enum_25(self):
        request = [{'ok': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': [], 'enest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Enum{b}.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Enum_26(self):
        request = [{'ok': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': {}, 'enest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Enum{b}.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Enum_27(self):
        request = [{'ok': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, False]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Enum_28(self):
        request = [{'ok': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, 0.1]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Enum_29(self):
        request = [{'ok': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, '']}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Enum_30(self):
        request = [{'ok': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, []]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testObjectNullP2Enum_31(self):
        request = [{'ok': {'value': {'objNullP2Enum': {'a': {'two': {'ewrap': False, 'enest': [0]}}, 'b': {'two': {'ewrap': False, 'enest': [0, {}]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.objNullP2Enum{b}.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Enum_0(self):
        request = [{'ok': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0]}}}}}}, {'fn.test': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0]}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0]}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Enum_1(self):
        request = [{'ok': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': True, 'enest': [1]}}}}}}, {'fn.test': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': True, 'enest': [1]}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': True, 'enest': [1]}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Enum_2(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Enum': {'wrap': None}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Enum.wrap', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Enum_3(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Enum': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Enum_4(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Enum': {'wrap': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Enum_5(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Enum': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Enum_6(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Enum': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Enum_7(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Enum': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Enum_8(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': 0, 'enest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Enum.wrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Enum_9(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': '', 'enest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Enum.wrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Enum_10(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': [], 'enest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Enum.wrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Enum_11(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': {}, 'enest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Enum.wrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Enum_12(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, False]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Enum_13(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, 0.1]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Enum_14(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, '']}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Enum_15(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, []]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Enum_16(self):
        request = [{}, {'fn.test': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, {}]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Enum_17(self):
        request = [{'ok': {'value': {'pStrP2Enum': {'wrap': None}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Enum.wrap', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Enum_18(self):
        request = [{'ok': {'value': {'pStrP2Enum': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Enum_19(self):
        request = [{'ok': {'value': {'pStrP2Enum': {'wrap': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Enum_20(self):
        request = [{'ok': {'value': {'pStrP2Enum': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Enum_21(self):
        request = [{'ok': {'value': {'pStrP2Enum': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Enum_22(self):
        request = [{'ok': {'value': {'pStrP2Enum': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Enum_23(self):
        request = [{'ok': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': 0, 'enest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Enum.wrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Enum_24(self):
        request = [{'ok': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': '', 'enest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Enum.wrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Enum_25(self):
        request = [{'ok': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': [], 'enest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Enum.wrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Enum_26(self):
        request = [{'ok': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': {}, 'enest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Enum.wrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Enum_27(self):
        request = [{'ok': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, False]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Enum_28(self):
        request = [{'ok': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, 0.1]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Enum_29(self):
        request = [{'ok': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, '']}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Enum_30(self):
        request = [{'ok': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, []]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructP2Enum_31(self):
        request = [{'ok': {'value': {'pStrP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, {}]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Enum_0(self):
        request = [{'ok': {'value': {'pStrNullP2Enum': {'wrap': None}}}}, {'fn.test': {'value': {'pStrNullP2Enum': {'wrap': None}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullP2Enum': {'wrap': None}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Enum_1(self):
        request = [{'ok': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0]}}}}}}, {'fn.test': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0]}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0]}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Enum_2(self):
        request = [{'ok': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': True, 'enest': [1]}}}}}}, {'fn.test': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': True, 'enest': [1]}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': True, 'enest': [1]}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Enum_3(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Enum': {'wrap': False}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Enum_4(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Enum': {'wrap': 0}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Enum_5(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Enum': {'wrap': 0.1}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Enum_6(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Enum': {'wrap': ''}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Enum_7(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Enum': {'wrap': []}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Enum_8(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': 0, 'enest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Enum.wrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Enum_9(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': '', 'enest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Enum.wrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Enum_10(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': [], 'enest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Enum.wrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Enum_11(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': {}, 'enest': [0]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Enum.wrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Enum_12(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, False]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Enum_13(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, 0.1]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Enum_14(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, '']}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Enum_15(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, []]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Enum_16(self):
        request = [{}, {'fn.test': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, {}]}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pStrNullP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Enum_17(self):
        request = [{'ok': {'value': {'pStrNullP2Enum': {'wrap': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Enum_18(self):
        request = [{'ok': {'value': {'pStrNullP2Enum': {'wrap': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Enum_19(self):
        request = [{'ok': {'value': {'pStrNullP2Enum': {'wrap': 0.1}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Enum_20(self):
        request = [{'ok': {'value': {'pStrNullP2Enum': {'wrap': ''}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Enum_21(self):
        request = [{'ok': {'value': {'pStrNullP2Enum': {'wrap': []}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Enum.wrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Enum_22(self):
        request = [{'ok': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': 0, 'enest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Enum.wrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Enum_23(self):
        request = [{'ok': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': '', 'enest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Enum.wrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Enum_24(self):
        request = [{'ok': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': [], 'enest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Enum.wrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Enum_25(self):
        request = [{'ok': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': {}, 'enest': [0]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Enum.wrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Enum_26(self):
        request = [{'ok': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, False]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Enum_27(self):
        request = [{'ok': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, 0.1]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Enum_28(self):
        request = [{'ok': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, '']}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Enum_29(self):
        request = [{'ok': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, []]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPStructNullP2Enum_30(self):
        request = [{'ok': {'value': {'pStrNullP2Enum': {'wrap': {'two': {'ewrap': False, 'enest': [0, {}]}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pStrNullP2Enum.wrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Enum_0(self):
        request = [{'ok': {'value': {'pEnumP2Enum': {'one': {}}}}}, {'fn.test': {'value': {'pEnumP2Enum': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumP2Enum': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Enum_1(self):
        request = [{'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0]}}}}}}}, {'fn.test': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0]}}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0]}}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Enum_2(self):
        request = [{'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': True, 'enest': [1]}}}}}}}, {'fn.test': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': True, 'enest': [1]}}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': True, 'enest': [1]}}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Enum_3(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Enum': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Enum.two.ewrap', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Enum_4(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Enum': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Enum_5(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Enum': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Enum_6(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Enum': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Enum_7(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Enum': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Enum_8(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Enum': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Enum_9(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': 0, 'enest': [0]}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Enum.two.ewrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Enum_10(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': '', 'enest': [0]}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Enum.two.ewrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Enum_11(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': [], 'enest': [0]}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Enum.two.ewrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Enum_12(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': {}, 'enest': [0]}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Enum.two.ewrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Enum_13(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, False]}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Enum_14(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, 0.1]}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Enum_15(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, '']}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Enum_16(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, []]}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Enum_17(self):
        request = [{}, {'fn.test': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, {}]}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Enum_18(self):
        request = [{'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': None}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Enum.two.ewrap', 'reason': {'NullDisallowed': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Enum_19(self):
        request = [{'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Enum_20(self):
        request = [{'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Enum_21(self):
        request = [{'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Enum_22(self):
        request = [{'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Enum_23(self):
        request = [{'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Enum_24(self):
        request = [{'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': 0, 'enest': [0]}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Enum.two.ewrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Enum_25(self):
        request = [{'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': '', 'enest': [0]}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Enum.two.ewrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Enum_26(self):
        request = [{'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': [], 'enest': [0]}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Enum.two.ewrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Enum_27(self):
        request = [{'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': {}, 'enest': [0]}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Enum.two.ewrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Enum_28(self):
        request = [{'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, False]}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Enum_29(self):
        request = [{'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, 0.1]}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Enum_30(self):
        request = [{'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, '']}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Enum_31(self):
        request = [{'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, []]}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumP2Enum_32(self):
        request = [{'ok': {'value': {'pEnumP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, {}]}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Enum_0(self):
        request = [{'ok': {'value': {'pEnumNullP2Enum': {'one': {}}}}}, {'fn.test': {'value': {'pEnumNullP2Enum': {'one': {}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullP2Enum': {'one': {}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Enum_1(self):
        request = [{'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': None}}}}}, {'fn.test': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': None}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': None}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Enum_2(self):
        request = [{'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0]}}}}}}}, {'fn.test': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0]}}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0]}}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Enum_3(self):
        request = [{'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': True, 'enest': [1]}}}}}}}, {'fn.test': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': True, 'enest': [1]}}}}}}}]
        expected_response = [{}, {'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': True, 'enest': [1]}}}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Enum_4(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': False}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Enum_5(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': 0}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Enum_6(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': 0.1}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Enum_7(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': ''}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Enum_8(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': []}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Enum_9(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': 0, 'enest': [0]}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Enum.two.ewrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Enum_10(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': '', 'enest': [0]}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Enum.two.ewrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Enum_11(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': [], 'enest': [0]}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Enum.two.ewrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Enum_12(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': {}, 'enest': [0]}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Enum.two.ewrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Enum_13(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, False]}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Enum_14(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, 0.1]}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Enum_15(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, '']}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Enum_16(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, []]}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Enum_17(self):
        request = [{}, {'fn.test': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, {}]}}}}}}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.test.value.pEnumNullP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Enum_18(self):
        request = [{'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Enum_19(self):
        request = [{'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': 0}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Enum_20(self):
        request = [{'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': 0.1}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Enum_21(self):
        request = [{'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': ''}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Enum_22(self):
        request = [{'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': []}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Enum.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Enum_23(self):
        request = [{'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': 0, 'enest': [0]}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Enum.two.ewrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Enum_24(self):
        request = [{'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': '', 'enest': [0]}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Enum.two.ewrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Enum_25(self):
        request = [{'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': [], 'enest': [0]}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Enum.two.ewrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Enum_26(self):
        request = [{'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': {}, 'enest': [0]}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Enum.two.ewrap.two.ewrap', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Boolean': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Enum_27(self):
        request = [{'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, False]}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Enum_28(self):
        request = [{'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, 0.1]}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Enum_29(self):
        request = [{'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, '']}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Enum_30(self):
        request = [{'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, []]}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPEnumNullP2Enum_31(self):
        request = [{'ok': {'value': {'pEnumNullP2Enum': {'two': {'ewrap': {'two': {'ewrap': False, 'enest': [0, {}]}}}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'ok.value.pEnumNullP2Enum.two.ewrap.two.enest[1]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Integer': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPdStr_0(self):
        request = [{'ok': {'value': {'pdStr': {'dwrap': {'wrap': False}}}}}, {'fn.test': {'value': {'pdStr': {'dwrap': {'wrap': False}}}}}]
        expected_response = [{}, {'ok': {'value': {'pdStr': {'dwrap': {'wrap': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testPing_0(self):
        request = [{}, {'fn._ping': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testCallId_0(self):
        request = [{'_id': 'abcd'}, {'fn._ping': {}}]
        expected_response = [{'_id': 'abcd'}, {'ok': {}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testCallId_1(self):
        request = [{'_id': 1234}, {'fn._ping': {}}]
        expected_response = [{'_id': 1234}, {'ok': {}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testUnknownFunction_0(self):
        request = [{}, {'fn.notFound': {}}]
        expected_response = [{}, {'_errorInvalidRequestBody': {'cases': [{'path': 'fn.notFound', 'reason': {'FunctionUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testErrors_0(self):
        request = [{'result': {'errorExample': {'property': 'a'}}}, {'fn.test': {}}]
        expected_response = [{}, {'errorExample': {'property': 'a'}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testErrors_1(self):
        request = [{'result': {'errorExample': {'wrong': 'a'}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'errorExample.property', 'reason': {'RequiredStructFieldMissing': {}}}, {'path': 'errorExample.wrong', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testErrors_2(self):
        request = [{'result': {'errorUnknown': {'property': 'a'}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidResponseBody': {'cases': [{'path': 'errorUnknown', 'reason': {'EnumFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testSelectFields_0(self):
        request = [{'_sel': {'struct.ExStruct': ['optional']}, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'ok': {'value': {'struct': {'optional': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testSelectFields_1(self):
        request = [{'_sel': {'struct.ExStruct': ['optional']}, 'ok': {'value': {'struct': {'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'ok': {'value': {'struct': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testSelectFields_2(self):
        request = [{'_sel': {'struct.ExStruct': ['optional', 'required']}, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'ok': {'value': {'struct': {'optional': False, 'required': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testSelectFields_3(self):
        request = [{'_sel': {'struct.ExStruct': ['optional', 'required']}, 'ok': {'value': {'struct': {'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'ok': {'value': {'struct': {'required': False}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testSelectFields_4(self):
        request = [{'_sel': {'struct.ExStruct': []}, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'ok': {'value': {'struct': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testSelectFields_5(self):
        request = [{'_sel': {'struct.ExStruct': []}, 'ok': {'value': {'struct': {'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'ok': {'value': {'struct': {}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testSelectFields_6(self):
        request = [{'_sel': {'->.ok': []}, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'ok': {}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testSelectFields_7(self):
        request = [{'_sel': {'fn.example': ['optional']}, 'ok': {'value': {'fn': {'required': True, 'optional': True}}}}, {'fn.test': {}}]
        expected_response = [{}, {'ok': {'value': {'fn': {'optional': True}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testSelectFields_8(self):
        request = [{'_sel': {'struct.ExStruct': ['optional']}, 'ok': {'value': {'arrStruct': [{'required': False}, {'optional': False, 'required': False}]}}}, {'fn.test': {}}]
        expected_response = [{}, {'ok': {'value': {'arrStruct': [{}, {'optional': False}]}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testSelectFields_9(self):
        request = [{'_sel': {'struct.ExStruct': ['optional']}, 'ok': {'value': {'objStruct': {'a': {'required': False}, 'b': {'optional': False, 'required': False}}}}}, {'fn.test': {}}]
        expected_response = [{}, {'ok': {'value': {'objStruct': {'a': {}, 'b': {'optional': False}}}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testSelectFields_10(self):
        request = [{'_sel': False, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_sel}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testSelectFields_11(self):
        request = [{'_sel': 0, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_sel}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testSelectFields_12(self):
        request = [{'_sel': '', 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_sel}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testSelectFields_13(self):
        request = [{'_sel': [], 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_sel}', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'Object': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testSelectFields_14(self):
        request = [{'_sel': {'': []}, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_sel}{}', 'reason': {'SelectHeaderKeyMustBeStructReference': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testSelectFields_15(self):
        request = [{'_sel': {'notStruct': []}, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_sel}{notStruct}', 'reason': {'SelectHeaderKeyMustBeStructReference': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testSelectFields_16(self):
        request = [{'_sel': {'struct.Unknown': []}, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_sel}{struct.Unknown}', 'reason': {'StructNameUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testSelectFields_17(self):
        request = [{'_sel': {'struct.ExStruct': False}, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_sel}{struct.ExStruct}', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testSelectFields_18(self):
        request = [{'_sel': {'struct.ExStruct': 0}, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_sel}{struct.ExStruct}', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testSelectFields_19(self):
        request = [{'_sel': {'struct.ExStruct': ''}, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_sel}{struct.ExStruct}', 'reason': {'TypeUnexpected': {'actual': {'String': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testSelectFields_20(self):
        request = [{'_sel': {'struct.ExStruct': {}}, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_sel}{struct.ExStruct}', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'Array': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testSelectFields_21(self):
        request = [{'_sel': {'struct.ExStruct': [False]}, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_sel}{struct.ExStruct}[0]', 'reason': {'TypeUnexpected': {'actual': {'Boolean': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testSelectFields_22(self):
        request = [{'_sel': {'struct.ExStruct': [0]}, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_sel}{struct.ExStruct}[0]', 'reason': {'TypeUnexpected': {'actual': {'Number': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testSelectFields_23(self):
        request = [{'_sel': {'struct.ExStruct': [[]]}, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_sel}{struct.ExStruct}[0]', 'reason': {'TypeUnexpected': {'actual': {'Array': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testSelectFields_24(self):
        request = [{'_sel': {'struct.ExStruct': [{}]}, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_sel}{struct.ExStruct}[0]', 'reason': {'TypeUnexpected': {'actual': {'Object': {}}, 'expected': {'String': {}}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testSelectFields_25(self):
        request = [{'_sel': {'struct.ExStruct': ['unknownField']}, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_sel}{struct.ExStruct}[0]', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testSelectFields_26(self):
        request = [{'_sel': {'struct.ExStruct': ['']}, 'ok': {'value': {'struct': {'optional': False, 'required': False}}}}, {'fn.test': {}}]
        expected_response = [{}, {'_errorInvalidRequestHeaders': {'cases': [{'path': 'headers{_sel}{struct.ExStruct}[0]', 'reason': {'StructFieldUnknown': {}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testUnsafe_0(self):
        request = [{'_unsafe': True, 'result': {'ok': {'value': {'bool': 0}}}}, {'fn.test': {}}]
        expected_response = [{}, {'ok': {'value': {'bool': 0}}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testUnsafe_1(self):
        request = [{'_unsafe': True, 'result': {'errorExample': {'wrong': 'a'}}}, {'fn.test': {}}]
        expected_response = [{}, {'errorExample': {'wrong': 'a'}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_testApplicationFailure_0(self):
        request = [{'throw': True}, {'fn.test': {}}]
        expected_response = [{}, {'_errorUnknown': {}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)

    def test_binary_client_api_0(self):
        request = [{}, {'fn._api': {}}]
        expected_response = [{}, {'ok': {'api': [{'///': [' This is the example schema. It is focussed on outlining type edge cases for use in tests. ', '                                                                                           ', ' As a reminder:                                                                            ', ' - ! means optional field                                                                  ', ' - ? means nullable type                                                                   '], 'info.Example': {}}, {'///': ' A struct value demonstrating all common type permutations. ', 'struct.Value': {'bool!': ['boolean'], 'nullBool!': ['boolean?'], 'arrBool!': ['array', ['boolean']], 'arrNullBool!': ['array', ['boolean?']], 'objBool!': ['object', ['boolean']], 'objNullBool!': ['object', ['boolean?']], 'pStrBool!': ['struct<1>.PStr', ['boolean']], 'pStrNullBool!': ['struct<1>.PStr', ['boolean?']], 'pEnumBool!': ['enum<1>.PEnum', ['boolean']], 'pEnumNullBool!': ['enum<1>.PEnum', ['boolean?']], 'int!': ['integer'], 'nullInt!': ['integer?'], 'arrInt!': ['array', ['integer']], 'arrNullInt!': ['array', ['integer?']], 'objInt!': ['object', ['integer']], 'objNullInt!': ['object', ['integer?']], 'pStrInt!': ['struct<1>.PStr', ['integer']], 'pStrNullInt!': ['struct<1>.PStr', ['integer?']], 'pEnumInt!': ['enum<1>.PEnum', ['integer']], 'pEnumNullInt!': ['enum<1>.PEnum', ['integer?']], 'num!': ['number'], 'nullNum!': ['number?'], 'arrNum!': ['array', ['number']], 'arrNullNum!': ['array', ['number?']], 'objNum!': ['object', ['number']], 'objNullNum!': ['object', ['number?']], 'pStrNum!': ['struct<1>.PStr', ['number']], 'pStrNullNum!': ['struct<1>.PStr', ['number?']], 'pEnumNum!': ['enum<1>.PEnum', ['number']], 'pEnumNullNum!': ['enum<1>.PEnum', ['number?']], 'str!': ['string'], 'nullStr!': ['string?'], 'arrStr!': ['array', ['string']], 'arrNullStr!': ['array', ['string?']], 'objStr!': ['object', ['string']], 'objNullStr!': ['object', ['string?']], 'pStrStr!': ['struct<1>.PStr', ['string']], 'pStrNullStr!': ['struct<1>.PStr', ['string?']], 'pEnumStr!': ['enum<1>.PEnum', ['string']], 'pEnumNullStr!': ['enum<1>.PEnum', ['string?']], 'arr!': ['array', ['any']], 'nullArr!': ['array?', ['any']], 'arrArr!': ['array', ['array', ['any']]], 'arrNullArr!': ['array', ['array?', ['any']]], 'objArr!': ['object', ['array', ['any']]], 'objNullArr!': ['object', ['array?', ['any']]], 'pStrArr!': ['struct<1>.PStr', ['array', ['any']]], 'pStrNullArr!': ['struct<1>.PStr', ['array?', ['any']]], 'pEnumArr!': ['enum<1>.PEnum', ['array', ['any']]], 'pEnumNullArr!': ['enum<1>.PEnum', ['array?', ['any']]], 'obj!': ['object', ['any']], 'nullObj!': ['object?', ['any']], 'arrObj!': ['array', ['object', ['any']]], 'arrNullObj!': ['array', ['object?', ['any']]], 'objObj!': ['object', ['object', ['any']]], 'objNullObj!': ['object', ['object?', ['any']]], 'pStrObj!': ['struct<1>.PStr', ['object', ['any']]], 'pStrNullObj!': ['struct<1>.PStr', ['object?', ['any']]], 'pEnumObj!': ['enum<1>.PEnum', ['object', ['any']]], 'pEnumNullObj!': ['enum<1>.PEnum', ['object?', ['any']]], 'any!': ['any'], 'nullAny!': ['any?'], 'arrAny!': ['array', ['any']], 'arrNullAny!': ['array', ['any?']], 'objAny!': ['object', ['any']], 'objNullAny!': ['object', ['any?']], 'pStrAny!': ['struct<1>.PStr', ['any']], 'pStrNullAny!': ['struct<1>.PStr', ['any?']], 'pEnumAny!': ['enum<1>.PEnum', ['any']], 'pEnumNullAny!': ['enum<1>.PEnum', ['any?']], 'struct!': ['struct.ExStruct'], 'nullStruct!': ['struct.ExStruct?'], 'arrStruct!': ['array', ['struct.ExStruct']], 'arrNullStruct!': ['array', ['struct.ExStruct?']], 'objStruct!': ['object', ['struct.ExStruct']], 'objNullStruct!': ['object', ['struct.ExStruct?']], 'pStrStruct!': ['struct<1>.PStr', ['struct.ExStruct']], 'pStrNullStruct!': ['struct<1>.PStr', ['struct.ExStruct?']], 'pEnumStruct!': ['enum<1>.PEnum', ['struct.ExStruct']], 'pEnumNullStruct!': ['enum<1>.PEnum', ['struct.ExStruct?']], 'enum!': ['enum.ExEnum'], 'nullEnum!': ['enum.ExEnum?'], 'arrEnum!': ['array', ['enum.ExEnum']], 'arrNullEnum!': ['array', ['enum.ExEnum?']], 'objEnum!': ['object', ['enum.ExEnum']], 'objNullEnum!': ['object', ['enum.ExEnum?']], 'pStrEnum!': ['struct<1>.PStr', ['enum.ExEnum']], 'pStrNullEnum!': ['struct<1>.PStr', ['enum.ExEnum?']], 'pEnumEnum!': ['enum<1>.PEnum', ['enum.ExEnum']], 'pEnumNullEnum!': ['enum<1>.PEnum', ['enum.ExEnum?']], 'fn!': ['fn.example'], 'nullFn!': ['fn.example?'], 'arrFn!': ['array', ['fn.example']], 'arrNullFn!': ['array', ['fn.example?']], 'objFn!': ['object', ['fn.example']], 'objNullFn!': ['object', ['fn.example?']], 'pStrFn!': ['struct<1>.PStr', ['fn.example']], 'pStrNullFn!': ['struct<1>.PStr', ['fn.example?']], 'pEnumFn!': ['enum<1>.PEnum', ['fn.example']], 'pEnumNullFn!': ['enum<1>.PEnum', ['fn.example?']], 'p2Str!': ['struct<2>.P2Str', ['boolean'], ['integer']], 'nullP2Str!': ['struct<2>.P2Str?', ['boolean'], ['integer']], 'arrP2Str!': ['array', ['struct<2>.P2Str', ['boolean'], ['integer']]], 'arrNullP2Str!': ['array', ['struct<2>.P2Str?', ['boolean'], ['integer']]], 'objP2Str!': ['object', ['struct<2>.P2Str', ['boolean'], ['integer']]], 'objNullP2Str!': ['object', ['struct<2>.P2Str?', ['boolean'], ['integer']]], 'pStrP2Str!': ['struct<1>.PStr', ['struct<2>.P2Str', ['boolean'], ['integer']]], 'pStrNullP2Str!': ['struct<1>.PStr', ['struct<2>.P2Str?', ['boolean'], ['integer']]], 'pEnumP2Str!': ['enum<1>.PEnum', ['struct<2>.P2Str', ['boolean'], ['integer']]], 'pEnumNullP2Str!': ['enum<1>.PEnum', ['struct<2>.P2Str?', ['boolean'], ['integer']]], 'p2Enum!': ['enum<2>.P2Enum', ['boolean'], ['integer']], 'nullP2Enum!': ['enum<2>.P2Enum?', ['boolean'], ['integer']], 'arrP2Enum!': ['array', ['enum<2>.P2Enum', ['boolean'], ['integer']]], 'arrNullP2Enum!': ['array', ['enum<2>.P2Enum?', ['boolean'], ['integer']]], 'objP2Enum!': ['object', ['enum<2>.P2Enum', ['boolean'], ['integer']]], 'objNullP2Enum!': ['object', ['enum<2>.P2Enum?', ['boolean'], ['integer']]], 'pStrP2Enum!': ['struct<1>.PStr', ['enum<2>.P2Enum', ['boolean'], ['integer']]], 'pStrNullP2Enum!': ['struct<1>.PStr', ['enum<2>.P2Enum?', ['boolean'], ['integer']]], 'pEnumP2Enum!': ['enum<1>.PEnum', ['enum<2>.P2Enum', ['boolean'], ['integer']]], 'pEnumNullP2Enum!': ['enum<1>.PEnum', ['enum<2>.P2Enum?', ['boolean'], ['integer']]], 'pdStr!': ['struct<1>.PdStr', ['struct<1>.PStr', ['boolean']]]}}, {'///': [' The main struct example.                                                                ', '                                                                                         ', ' The [required] field must be supplied. The optional field does not need to be supplied. '], 'struct.ExStruct': {'required': ['boolean'], 'optional!': ['boolean']}}, {'enum.ExEnum': {'one': {}, 'two': {'required': ['boolean'], 'optional!': ['boolean']}}}, {'struct<1>.PStr': {'wrap': ['T.0']}}, {'struct<1>.PdStr': {'dwrap': ['struct<1>.PStr', ['boolean']]}}, {'struct<2>.P2Str': {'wrap': ['T.0'], 'nest': ['array', ['T.1']]}}, {'enum<1>.PEnum': {'one': {}, 'two': {'ewrap': ['T.0']}}}, {'enum<2>.P2Enum': {'one': {}, 'two': {'ewrap': ['T.0'], 'enest': ['array', ['T.1']]}}}, {'///': 'An example function.', 'fn.example': {'required': ['boolean'], 'optional!': ['boolean']}, '->': {'ok': {}}}, {'fn.test': {'value!': ['struct.Value']}, '->': {'ok': {'value!': ['struct.Value']}, 'errorExample': {'property': ['string']}}}, {'///': ' Ping the server. ', 'fn._ping': {}, '->': {'ok': {}}}, {'///': ' Get the jAPI `schema` of this server. ', 'fn._api': {}, '->': {'ok': {'api': ['array', ['object', ['any']]]}}}, {'///': ' A placeholder function when the requested function is unknown. ', 'fn._unknown': {}, '->': {'ok': {}}}, {'///': ' A type. ', 'enum._Type': {'Boolean': {}, 'Integer': {}, 'Number': {}, 'String': {}, 'Array': {}, 'Object': {}, 'Unknown': {}}}, {'///': ' A reason for the validation failure in the body. ', 'enum._BodyValidationFailureReason': {'TypeUnexpected': {'expected': ['enum._Type'], 'actual': ['enum._Type']}, 'NullDisallowed': {}, 'StructFieldUnknown': {}, 'RequiredStructFieldMissing': {}, 'NumberOutOfRange': {}, 'ZeroOrManyEnumFieldsDisallowed': {}, 'EnumFieldUnknown': {}, 'ExtensionValidationFailure': {'message': ['string']}, 'FunctionUnknown': {}}}, {'///': ' A reason for the validation failure in the header. ', 'enum._HeaderValidationFailureReason': {'TypeUnexpected': {'expected': ['enum._Type'], 'actual': ['enum._Type']}, 'SelectHeaderKeyMustBeStructReference': {}, 'StructNameUnknown': {}, 'StructFieldUnknown': {}}}, {'///': ' A validation failure located at a `path` explained by a `reason`. ', 'struct._BodyValidationFailure': {'path': ['string'], 'reason': ['enum._BodyValidationFailureReason']}}, {'///': ' A validation failure located at a `path` explained by a `reason`. ', 'struct._HeaderValidationFailure': {'path': ['string'], 'reason': ['enum._HeaderValidationFailureReason']}}, {'///': [' All functions may return a validation error:                                                             ', ' - `_errorInvalidRequestHeaders`: The Headers on the Request is invalid as outlined by a list of `cases`. ', ' - `_errorInvalidRequestBody`: The Body on the Request is invalid as outlined by a list of `cases`.       ', ' - `_errorInvalidResponseBody`: The Body that the Server attempted to put on the Response is invalid as   ', '     outlined by a list of `cases.                                                                        ', ' - `_errorParseFailure`: The Request could not be parsed as a jAPI Message.                               '], 'trait._Validated': {'fn._?*': {}, '->': {'_errorUnknown': {}, '_errorInvalidRequestHeaders': {'cases': ['array', ['struct._HeaderValidationFailure']]}, '_errorInvalidRequestBody': {'cases': ['array', ['struct._BodyValidationFailure']]}, '_errorInvalidResponseBody': {'cases': ['array', ['struct._BodyValidationFailure']]}, '_errorParseFailure': {'reasons': ['array', ['string']]}}}}]}}]
        verify_case(self, request, expected_response, path, self.__class__.backdoor_results, self.__class__.client_backdoor_results, client_bitmask=255, use_client=True, use_binary=True)
