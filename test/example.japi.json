{
  "title.Example": [
    " This is the example schema. It is focussed on outlining type edge cases for use in tests. ",
    "                                                                                           ",
    " As a friendly reminder:                                                                   ",
    " - ! means optional field                                                                  ",
    " - ? means nullable type                                                                   ",
    "                                                                                           "
  ],
  "enum.Value": [
    {
      "bool": "boolean",
      "nullBool": "boolean?",
      "arrBool": "array<boolean>",
      "arrNullBool": "array<boolean?>",
      "objBool": "object<boolean>",
      "objNullBool": "object<boolean?>",

      "int": "integer",
      "nullInt": "integer?",
      "arrInt": "array<integer>",
      "arrNullInt": "array<integer?>",
      "objInt": "object<integer>",
      "objNullInt": "object<integer?>",

      "num": "number",
      "nullNum": "number?",
      "arrNum": "array<number>",
      "arrNullNum": "array<number?>",
      "objNum": "object<number>",
      "objNullNum": "object<number?>",

      "str": "string",
      "nullStr": "string?",
      "arrStr": "array<string>",
      "arrNullStr": "array<string?>",
      "objStr": "object<string>",
      "objNullStr": "object<string?>",

      "arr": "array<any>",
      "nullArr": "array<any>?",
      "arrArr": "array<array<any>>",
      "arrNullArr": "array<array<any>?>",
      "objArr": "object<array<any>>",
      "objNullArr": "object<array<any>?>",

      "obj": "object<any>",
      "nullObj": "object<any>?",
      "arrObj": "array<object<any>>",
      "arrNullObj": "array<object<any>?>",
      "objObj": "object<object<any>>",
      "objNullObj": "object<object<any>?>",

      "any": "any",
      "nullAny": "any?",
      "arrAny": "array<any>",
      "arrNullAny": "array<any?>",
      "objAny": "object<any>",
      "objNullAny": "object<any?>",

      "struct": "struct.StructExample",
      "nullStruct": "struct.StructExample?",
      "arrStruct": "array<struct.StructExample>",
      "arrNullStruct": "array<struct.StructExample?>",
      "objStruct": "object<struct.StructExample>",
      "objNullStruct": "object<struct.StructExample?>",

      "enum": "enum.EnumExample",
      "nullEnum": "enum.EnumExample?",
      "arrEnum": "array<enum.EnumExample>",
      "arrNullEnum": "array<enum.EnumExample?>",
      "objEnum": "object<enum.EnumExample>",
      "objNullEnum": "object<enum.EnumExample?>"
    },
    "                                                           ",
    " A enum value demonstrating all common type permutations. ",
    "                                                           "
  ],

  "struct.StructExample": [
    {
      "required": "boolean",
      "optional!": "boolean"
    },
    "                                                                                         ",
    " The main struct example.                                                                ",
    "                                                                                         ",
    " The [required] field must be supplied. The optional field does not need to be supplied. ",
    "                                                                                         "
  ],

  "enum.EnumExample": [
    {
      "first": "integer",
      "second": "string"
    }
  ],

  "error.ErrorExample": [
    {
      "property": "string"
    },
    "                          ",
    " An example custom error. ",
    "                          "
  ],

  "error.UnknownErrorExample": [
    {
      "property": "string"
    },
    "                                                                     ",
    " An example custom error that will not be used by the test function. ",
    "                                                                     "
  ],

  "function.test": [
    {
      "value!": "enum.Value"
    },
    "-->",
    {
      "value!": "enum.Value"
    },
    ["error.ErrorExample"],
    "                                                                       ",
    " The primary function example.                                         ",
    " The arguments is always a struct. The result is also always a struct. ",
    "                                                                       "
  ]
}
