{
  "info.Example": [
    {},
    [
      " This is the example schema. It is focussed on outlining type edge cases for use in tests. ",
      "                                                                                           ",
      " As a reminder:                                                                            ",
      " - ! means optional field                                                                  ",
      " - ? means nullable type                                                                   ",
      "                                                                                           "
    ]
  ],
  "struct.Value": [
    {
      "bool!": "boolean",
      "nullBool!": "boolean?",
      "arrBool!": "array<boolean>",
      "arrNullBool!": "array<boolean?>",
      "objBool!": "object<boolean>",
      "objNullBool!": "object<boolean?>",

      "int!": "integer",
      "nullInt!": "integer?",
      "arrInt!": "array<integer>",
      "arrNullInt!": "array<integer?>",
      "objInt!": "object<integer>",
      "objNullInt!": "object<integer?>",

      "num!": "number",
      "nullNum!": "number?",
      "arrNum!": "array<number>",
      "arrNullNum!": "array<number?>",
      "objNum!": "object<number>",
      "objNullNum!": "object<number?>",

      "str!": "string",
      "nullStr!": "string?",
      "arrStr!": "array<string>",
      "arrNullStr!": "array<string?>",
      "objStr!": "object<string>",
      "objNullStr!": "object<string?>",

      "arr!": "array<any>",
      "nullArr!": "array<any>?",
      "arrArr!": "array<array<any>>",
      "arrNullArr!": "array<array<any>?>",
      "objArr!": "object<array<any>>",
      "objNullArr!": "object<array<any>?>",

      "obj!": "object<any>",
      "nullObj!": "object<any>?",
      "arrObj!": "array<object<any>>",
      "arrNullObj!": "array<object<any>?>",
      "objObj!": "object<object<any>>",
      "objNullObj!": "object<object<any>?>",

      "any!": "any",
      "nullAny!": "any?",
      "arrAny!": "array<any>",
      "arrNullAny!": "array<any?>",
      "objAny!": "object<any>",
      "objNullAny!": "object<any?>",

      "struct!": "struct.StructExample",
      "nullStruct!": "struct.StructExample?",
      "arrStruct!": "array<struct.StructExample>",
      "arrNullStruct!": "array<struct.StructExample?>",
      "objStruct!": "object<struct.StructExample>",
      "objNullStruct!": "object<struct.StructExample?>",

      "enum!": "enum.EnumExample",
      "nullEnum!": "enum.EnumExample?",
      "arrEnum!": "array<enum.EnumExample>",
      "arrNullEnum!": "array<enum.EnumExample?>",
      "objEnum!": "object<enum.EnumExample>",
      "objNullEnum!": "object<enum.EnumExample?>",

      "fn!": "fn.example",
      "nullFn!": "fn.example?",
      "arrFn!": "array<fn.example>",
      "arrNullFn!": "array<fn.example?>",
      "objFn!": "object<fn.example>",
      "objNullFn!": "object<fn.example?>"
    },
    [
      "                                                            ",
      " A struct value demonstrating all common type permutations. ",
      "                                                            "
    ]
  ],

  "struct.StructExample": [
    {
      "required": "boolean",
      "optional!": "boolean"
    },
    [
      "                                                                                         ",
      " The main struct example.                                                                ",
      "                                                                                         ",
      " The [required] field must be supplied. The optional field does not need to be supplied. ",
      "                                                                                         "
    ]
  ],

  "enum.EnumExample": [
    {
      "one": {},
      "two": {
        "required": "boolean",
        "optional!": "boolean"
      },
      "three": {
        "a": {},
        "b": {
          "required": "boolean"
        }
      }
    }
  ],

  "fn.example": [
    {
      "required": "boolean",
      "optional!": "boolean"
    },
    "->",
    {
      "ok": {},
      "err": {
        "_unknown": {}
      }
    },
    [
      "                      ",
      " A function template. ",
      "                      "
    ]
  ],

  "fn.test": [
    {
      "value!": "struct.Value"
    },
    "->",
    {
      "ok": {
        "value!": "struct.Value"
      },
      "err": {
        "_unknown": {},
        "example": {
          "property": "string"
        }
      }
    }
  ]
}
