package {{ package }};

import java.util.AbstractMap;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.stream.Collectors;
import java.util.function.Function;


{%- macro to_java_type(t) %}
    {%- set typ = t | replace('?', '') %}
    {%- if typ == 'array' %}
        {{- 'List' -}}
    {%- elif typ == 'object' %}
        {{- 'Map' -}}
    {%- elif typ == 'boolean' %}
        {{- 'Boolean' -}}
    {%- elif typ == 'integer' %}
        {{- 'Integer' -}}
    {%- elif typ == 'number' %}
        {{- 'Number' -}}
    {%- elif typ == 'string' %}
        {{- 'String' -}}
    {%- elif typ == 'any' %}
        {{- 'Object' -}}
    {%- elif typ.startswith('fn.') %}
        {{- typ | regex_replace('^.*\\.', '') -}}.Input
    {%- else %}
        {{- typ | regex_replace('^.*\\.', '') -}}
    {%- endif %}
{%- endmacro -%}

{%- macro marshall_java_type(t, depth) -%}
    {%- set typ = t[0] | replace('?', '') -%}
    {%- if typ == 'array' -%}
        ((List<?>) {{ caller() }}).stream().map(e{{ depth }} -> {% call marshall_java_type(t[1:][0], depth + 1) %}e{{ depth }}{% endcall %}).toList()
    {%- elif typ == 'object' -%}
        ((Map<String, ?>) {{ caller() }}).entrySet().stream().map(e{{ depth }} -> new AbstractMap.SimpleEntry<>(e{{ depth }}.getKey(), {% call marshall_java_type(t[1:][0], depth + 1) %}e{{ depth }}.getValue(){% endcall %})).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))
    {%- elif typ == 'boolean' -%}
        ({{- 'Boolean' -}}) {{ caller() }}
    {%- elif typ == 'integer' -%}
        ({{- 'Integer' -}}) {{ caller() }}
    {%- elif typ == 'number' -%}
        ({{- 'Number' -}}) {{ caller() }}
    {%- elif typ == 'string' -%}
        ({{- 'String' -}}) {{ caller() }}
    {%- elif typ == 'any' -%}
        ({{- 'Object' -}}) {{ caller() }}
    {%- elif typ == 'T0' -%}
        (T0) t0Mapper.apply({{ caller() }})
    {%- elif typ == 'T1' -%}
        (T1) t1Mapper.apply({{ caller() }})
    {%- elif typ == 'T2' -%}
        (T2) t2Mapper.apply({{ caller() }})
    {%- elif typ.startswith('struct') or typ.startswith('fn') -%}
        new {{ translate(t) }}((Map<String, Object>) {{ caller() -}}
            {%- for t2 in t[1:] -%}
                , t{{ depth }} -> {% call marshall_java_type(t2, depth + 1) -%}t{{ depth }}{% endcall %}
            {%- endfor -%}
            )
    {%- elif typ.startswith('union') -%}
        {{ to_java_type(t[0]) }}.fromUnionPsuedoJson((Map<String, Object>) {{ caller() -}}
            {%- for t2 in t[1:] -%}
                , t{{ depth }} -> {% call marshall_java_type(t2, depth + 1) -%}t{{ depth }}{% endcall %}
            {%- endfor -%}
            )
    {%- else -%}
        {{- ('Unknown type: ' + typ) | raise_error -}}
    {%- endif -%}
{%- endmacro -%}

{%- macro unmarshall_java_type(t, depth) -%}
    {%- set typ = t[0] | replace('?', '') -%}
    {%- if typ == 'array' -%}
        {{ caller() }}.stream().map(e{{ depth }} -> {% call unmarshall_java_type(t[1:][0], depth + 1) %}e{{ depth }}{% endcall %}).toList()
    {%- elif typ == 'object' -%}
        {{ caller() }}.entrySet().stream().map(e{{ depth }} -> new AbstractMap.SimpleEntry<>(e{{ depth }}.getKey(), {% call unmarshall_java_type(t[1:][0], depth + 1) %}e{{ depth }}.getValue(){% endcall %})).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))
    {%- elif typ == 'boolean' -%}
        {{ caller() }}
    {%- elif typ == 'integer' -%}
        {{ caller() }}
    {%- elif typ == 'number' -%}
        {{ caller() }}
    {%- elif typ == 'string' -%}
        {{ caller() }}
    {%- elif typ == 'any' -%}
        {{ caller() }}
    {%- elif typ == 'T0' -%}
        t0Mapper.apply({{ caller() }})
    {%- elif typ == 'T1' -%}
        t1Mapper.apply({{ caller() }})
    {%- elif typ == 'T2' -%}
        t2Mapper.apply({{ caller() }})
    {%- else -%}
        {{ caller() -}}.toPseudoJson(
            {%- for t2 in t[1:] -%}
                t{{ depth }} -> {% call unmarshall_java_type(t2, depth + 1) -%}t{{ depth }}{% endcall %}{% if not loop.last %}, {% endif %}
            {%- endfor -%}
            )
    {%- endif -%}
{%- endmacro -%}

{%- macro marshall_java_type_maybe_opt(field_name, field_type) -%}
    {%- if '!' in field_name %}map.containsKey("{{ field_name }}") ? new Optional_<{{ translate(field_type, False) }}>({% call marshall_java_type(field_type, 0) %}map.get("{{ field_name }}"){% endcall %}) : new Optional_<>(){% else %}{% call marshall_java_type(field_type, 0) %}map.get("{{ field_name }}"){% endcall %}{% endif -%}
{%- endmacro -%}

{%- macro setter_maybe_opt(field_name) -%}
    {%- if '!' in field_name %}new Optional_<>({{ caller() }}){% else %}{{ caller ()}}{% endif %}
{%- endmacro -%}

{%- macro docstring(data) -%}
    {%- if '///' in data %}
/**
        {%- set doc = data['///'] -%}
        {%- if doc is iterable and doc is not string -%}
            {%- for line in doc %}
 *{{ line }}
            {%- endfor %}
        {%- else %}
 *{{ doc }}
        {%- endif %}
 */
    {%- endif %}
{%- endmacro -%}

{%- macro generics(schema_key) -%}
    {%- if '<1>' in schema_key %}{{ '<T0>' }}{% elif '<2>' in schema_key %}{{ '<T0, T1>'}}{% elif '<3>' in schema_key %}{{ '<T0, T1, T2>' }}{% endif -%}
{%- endmacro -%}

{%- macro sanitize_field_name(field_name) -%}
    {%- set sanitized_name =  field_name | replace('!', '') -%}
    {%- set java_keywords = ["build", "while", "volatile", "strictfp", "void", "try", "transient", "throws", "throw", "this", "synchronized", "switch", "super", "static", "short", "return", "public", "protected", "private", "package", "new", "native", "long", "interface", "int", "instanceof", "import", "implements", "if", "goto", "final", "finally", "float", "extends", "enum", "else", "double", "do", "default", "continue", "const", "class", "char", "catch", "case", "byte", "break", "boolean", "assert", "abstract"] %}
    {%- if sanitized_name in java_keywords -%}
        {{- sanitized_name + '_' -}}
    {%- else -%}
        {{- sanitized_name -}}
    {%- endif -%}
{%- endmacro -%}

{%- macro translate(type, optional) -%}
    {%- if optional %}
        {{- 'Optional_<' -}}
    {%- endif %}
    {{- to_java_type(type[0]) -}}
    {%- set typ = type[0] | replace('?', '') -%}
    {%- if type | length > 1 -%}
        {{- '<' -}}
        {%- if typ == 'object' %}
            {{- 'String, ' -}}
        {%- endif %}
        {%- for t in type[1:] -%}
            {{- translate(t) -}}{{ ", " if not loop.last -}}
        {%- endfor -%}
        {{- '>' -}}
    {%- endif -%}
    {%- if optional %}
        {{- '>' -}}
    {%- endif %}
{%- endmacro -%}

{%- macro struct(data, schema_key, alt_name, modifier, implements, genericStr, unionCase) %}
    {%- set finalGenericString = genericStr if genericStr else ''%}
    {%- set fields = data[schema_key] %}
    {%- set java_name = alt_name if alt_name else schema_key | regex_replace('^.*\\.', '') %}
    {{ docstring(data) }}
public {{ modifier }}class {{ java_name + finalGenericString }}{% if implements %} implements {{ implements }}{% endif %} {
    {%- for field_name, field_type in fields.items() %}
    public final {{ translate(field_type, '!' in field_name) }} {{ sanitize_field_name(field_name) }};
    {%- endfor %}

    public {{ java_name }}(Builder{{ finalGenericString }} b) {
        {%- for field_name, field_type in fields.items() %}
        this.{{ sanitize_field_name(field_name) }} = b.{{ sanitize_field_name(field_name) }};
        {%- endfor %}
    }

    public {{ java_name -}}
        (Map<String, Object> map
        {%- if 'T2' in genericStr %}, Function<Object, T0> t0Mapper, Function<Object, T1> t1Mapper, Function<Object, T2> t2Mapper
        {%- elif 'T1' in genericStr %}, Function<Object, T0> t0Mapper, Function<Object, T1> t1Mapper
        {%- elif 'T0' in genericStr %}, Function<Object, T0> t0Mapper
        {%- endif %}) {
            {%- for field_name, field_type in fields.items() %}
            this.{{ sanitize_field_name(field_name) }} = {{ marshall_java_type_maybe_opt(field_name, field_type) }};
            {%- endfor %}
    }

    public Map<String, Object> toPseudoJson(
        {%- if 'T2' in genericStr %}Function<T0, Object> t0Mapper, Function<T1, Object> t1Mapper, Function<T2, Object> t2Mapper
        {%- elif 'T1' in genericStr %}Function<T0, Object> t0Mapper, Function<T1, Object> t1Mapper
        {%- elif 'T0' in genericStr %}Function<T0, Object> t0Mapper
        {%- endif %}) {
        Map<String, Object> fields = new HashMap<>();
        {%- for field_name, field_type in fields.items() %}
            {%- if '!' in field_name %}
        this.{{ sanitize_field_name(field_name) }}.ifPresent(f -> {
            fields.put("{{ field_name }}", {% call unmarshall_java_type(field_type, 0) %}f{% endcall %});
        });
            {%- else %}
        fields.put("{{ field_name }}", {% call unmarshall_java_type(field_type, 0) %}this.{{ sanitize_field_name(field_name) }}{% endcall %});
            {%- endif %}
        {%- endfor %}
        return fields;
    }

    {%- if unionCase %}
    public String getCase() {
        return "{{ unionCase }}";
    }
    {%- endif %}

    public static class Builder{{ finalGenericString }} {
        {%- for field_name, field_type in fields.items() %}
        private {{ translate(field_type, '!' in field_name) }} {{ sanitize_field_name(field_name) }}{% if '!' in field_name %} = new Optional_<>(){% endif %};
        {%- endfor %}

        public Builder() {
        }

        {%- for field_name, field_type in fields.items() %}
        public Builder{{ finalGenericString }} {{ sanitize_field_name(field_name) }}({{ translate(field_type, false) }} {{ sanitize_field_name(field_name) }}) {
            this.{{ sanitize_field_name(field_name) }} = {% call setter_maybe_opt(field_name) %}{{ sanitize_field_name(field_name) }}{% endcall %};
            return this;
        }
        {%- endfor %}

        public {{ java_name + finalGenericString }} build() {
            return new {{ java_name + finalGenericString }}(this);
        }
    }
}
{%- endmacro %}

{%- macro union(data, schema_key) %}
    {%- set cases = data[schema_key] %}
    {%- if schema_key == '->' %}
        {%- set schema_key = 'Output' %}
    {%- endif %}
    {%- set java_name = schema_key | regex_replace('^.*\\.', '') %}
    {%- set genericStr = schema_key | regex_replace('^\\..*', '') | regex_replace('^.*[^<]*', '') %}
    {{ docstring(data) }}
public sealed interface {{ java_name }}{{ generics(schema_key) }} {

    {%- set genericStr2 = generics(schema_key) %}

    {{ struct({'NoMatch_': {} }, 'NoMatch_', None, 'final ', java_name + generics(schema_key), generics(schema_key), 'NoMatch_') | indent }}

    {%- for case_entry in cases %}
        {% set case_key = case_entry | find_case_key %}
        {{ struct(case_entry, case_key, None, 'final ', java_name + generics(schema_key), generics(schema_key), case_key) | indent }}
    {%- endfor %}

    public static {{ genericStr2 }} {{ java_name }}{{ generics(schema_key) }} fromUnionPsuedoJson(Map<String, Object> map
        {%- if 'T2' in genericStr2 %}, Function<Object, T0> t0Mapper, Function<Object, T1> t1Mapper, Function<Object, T2> t2Mapper
        {%- elif 'T1' in genericStr2 %}, Function<Object, T0> t0Mapper, Function<Object, T1> t1Mapper
        {%- elif 'T0' in genericStr2 %}, Function<Object, T0> t0Mapper
        {%- endif %}) {
        var entry = map.entrySet().stream().findAny().get();
        var caseName = entry.getKey();
        var payload = (Map<String, Object>) entry.getValue();        
        switch (caseName) {
            {%- for case_entry in cases %}
                {% set case_key = case_entry | find_case_key %}
            case "{{ case_key }}":
                return new {{ case_entry | find_case_key }}{{ genericStr2 }}(
                    payload
                    {%- if 'T2' in genericStr2 %}, t0Mapper, t1Mapper, t2Mapper
                    {%- elif 'T1' in genericStr2 %}, t0Mapper, t1Mapper
                    {%- elif 'T0' in genericStr2 %}, t0Mapper
                    {%- endif %}
                );
            {%- endfor %}
            default:
                return new NoMatch_{{ genericStr2 }}(
                    payload
                    {%- if 'T2' in genericStr2 %}, t0Mapper, t1Mapper, t2Mapper
                    {%- elif 'T1' in genericStr2 %}, t0Mapper, t1Mapper
                    {%- elif 'T0' in genericStr2 %}, t0Mapper
                    {%- endif %}
                );
        }
    }

    public Map<String, Object> toPseudoJson(
        {%- if 'T2' in genericStr2 %}Function<T0, Object> t0Mapper, Function<T1, Object> t1Mapper, Function<T2, Object> t2Mapper
        {%- elif 'T1' in genericStr2 %}Function<T0, Object> t0Mapper, Function<T1, Object> t1Mapper
        {%- elif 'T0' in genericStr2 %}Function<T0, Object> t0Mapper
        {%- endif %});

    public String getCase();

    public default Map<String, Object> toUnionPseudoJson(
        {%- if 'T2' in genericStr2 %}Function<T0, Object> t0Mapper, Function<T1, Object> t1Mapper, Function<T2, Object> t2Mapper
        {%- elif 'T1' in genericStr2 %}Function<T0, Object> t0Mapper, Function<T1, Object> t1Mapper
        {%- elif 'T0' in genericStr2 %}Function<T0, Object> t0Mapper
        {%- endif %}) {
        return Map.ofEntries(
            Map.entry(this.getCase(), this.toPseudoJson(
                {%- if 'T2' in genericStr2 %}t0Mapper, t1Mapper, t2Mapper
                {%- elif 'T1' in genericStr2 %}t0Mapper, t1Mapper
                {%- elif 'T0' in genericStr2 %}t0Mapper
                {%- endif %})
            )
        );        
    }

}
{%- endmacro %}

{%- macro function(data, schema_key) %}
    {%- set fields = data[schema_key] %}
    {%- set java_name = schema_key | regex_replace('^.*\\.', '') %}
public final class {{ java_name }} {

    {{ struct(data, schema_key, 'Input', 'static ', None, '', None) | indent }}

    {% do data.pop('///', None) %}

    {{ union (data, '->') | indent }}
}
{%- endmacro %}


{%- set schema_key = data | find_schema_key %}

{%- if schema_key.startswith('struct') %}
    {{ struct(data, schema_key, None, "", None, generics(schema_key), None) }}
{%- elif schema_key.startswith('union') %}
    {{ union(data, schema_key) }}
{%- elif schema_key.startswith('fn') %}
    {{ function(data, schema_key) }}
{%- endif %}

