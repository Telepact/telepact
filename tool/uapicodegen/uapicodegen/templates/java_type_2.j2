package {{ package }};

import java.util.AbstractMap;
import java.util.List;
import java.util.Map;
import java.util.HashMap;


{%- macro to_java_type(t, wildcard) %}
    {%- set typ = t[0] | replace('?', '') %}
    {%- if typ == 'array' -%}
        List<{% if wildcard %}?{% else %}{{ to_java_type(t[1:][0]) }}{% endif %}>
    {%- elif typ == 'object' -%}
        Map<String, {% if wildcard %}?{% else %}{{ to_java_type(t[1:][0]) }}{% endif %}>
    {%- elif typ == 'boolean' -%}
        Boolean
    {%- elif typ == 'integer' -%}
        Long
    {%- elif typ == 'number' -%}
        Number
    {%- elif typ == 'string' -%}
        String
    {%- elif typ == 'any' -%}
        Object
    {%- elif typ.startswith('fn.') -%}
        {{- typ | regex_replace('^.*\\.', '') -}}.Input
    {%- else -%}
        {{- typ | regex_replace('^.*\\.', '') -}}
    {%- endif %}
{%- endmacro -%}

{%- macro marshall_java_type(t, depth) -%}
    {%- set typ = t[0] | replace('?', '') -%}
    {%- if typ == 'array' -%}
        Utility_.let({{ caller() }}, d{{depth}} -> d{{depth}} == null ? null : (({{ to_java_type(t, True) }}) d{{depth}}).stream().map(e{{ depth }} -> {% call marshall_java_type(t[1:][0], depth + 1) %}e{{ depth }}{% endcall %}).toList())
    {%- elif typ == 'object' -%}
        Utility_.let({{ caller() }}, d{{depth}} -> d{{depth}} == null ? null : (({{ to_java_type(t, True) }}) d{{depth}}).entrySet().stream().map(e{{ depth }} -> new AbstractMap.SimpleEntry<>(e{{ depth }}.getKey(), {% call marshall_java_type(t[1:][0], depth + 1) %}e{{ depth }}.getValue(){% endcall %})).collect(() -> { {{ to_java_type(t)}} m = new HashMap<>(); return m; }, (m, e) -> m.put(e.getKey(), ({{ to_java_type(t[1]) }}) e.getValue()), Map::putAll))
    {%- elif typ == 'integer' -%}
        Utility_.let({{ caller() }}, d{{depth}} -> d{{depth}} == null ? null : d{{depth}} instanceof Integer ? ((Integer) d{{depth}}).longValue() : (Long) d{{depth}})
    {%- elif typ.startswith('struct') or typ.startswith('fn') -%}
        Utility_.let({{ caller() }}, d{{ depth }} -> d{{ depth }} == null ? null : new {{ to_java_type(t) }}((Map<String, Object>) d{{ depth }}))
    {%- elif typ.startswith('union') -%}
        Utility_.let({{ caller() }}, d{{depth}} -> d{{depth}} == null ? null : {{ to_java_type(t) }}.fromPseudoJson((Map<String, Object>) d{{depth}}))
    {%- else -%}
        ({{ to_java_type(t) }}) {{ caller() }}
    {%- endif -%}
{%- endmacro -%}

{%- macro unmarshall_java_type(t, depth) -%}
    {%- set typ = t[0] | replace('?', '') -%}
    {%- if typ == 'array' -%}
        Utility_.let({{ caller() }}, d{{depth}} -> d{{depth}} == null ? null : d{{depth}}.stream().map(e{{ depth }} -> {% call unmarshall_java_type(t[1:][0], depth + 1) %}e{{ depth }}{% endcall %}).toList())
    {%- elif typ == 'object' -%}
        Utility_.let({{ caller() }}, d{{depth}} -> d{{depth}} == null ? null : d{{depth}}.entrySet().stream().map(e{{ depth }} -> new AbstractMap.SimpleEntry<>(e{{ depth }}.getKey(), {% call unmarshall_java_type(t[1:][0], depth + 1) %}e{{ depth }}.getValue(){% endcall %})).collect(HashMap::new, (m, e) -> m.put(e.getKey(), e.getValue()), Map::putAll))
    {%- elif typ.startswith('struct') or typ.startswith('fn') or typ.startswith('union') -%}
        Utility_.let({{ caller() }}, d{{depth}} -> d{{depth}} == null ? null : d{{depth}}.pseudoJson)
    {%- else -%}
        {{ caller() }}
    {%- endif -%}
{%- endmacro -%}

{%- macro to_maybe_opt_java_type(type, field_name) -%}
    {%- if '!' in field_name -%}
        Optional_<{{ to_java_type(type) }}>
    {%- else -%}
        {{- to_java_type(type) -}}
    {%- endif -%}
{%- endmacro -%}

{%- macro setter_maybe_opt(field_name) -%}
    {%- if '!' in field_name %}new Optional_<>({{ caller() }}){% else %}{{ caller ()}}{% endif %}
{%- endmacro -%}

{%- macro docstring(doc) -%}
    {%- if '///' in data %}
/**
        {%- if doc is iterable and doc is not string -%}
            {%- for line in doc %}
 *{{ line }}
            {%- endfor %}
        {%- else %}
 *{{ doc }}
        {%- endif %}
 */
    {%- endif %}
{%- endmacro -%}

{%- macro sanitize_field_name(field_name) -%}
    {%- set sanitized_name =  field_name | replace('!', '') -%}
    {%- set java_keywords = ["build", "while", "volatile", "strictfp", "void", "try", "transient", "throws", "throw", "this", "synchronized", "switch", "super", "static", "short", "return", "public", "protected", "private", "package", "new", "native", "long", "interface", "int", "instanceof", "import", "implements", "if", "goto", "final", "finally", "float", "extends", "enum", "else", "double", "do", "default", "continue", "const", "class", "char", "catch", "case", "byte", "break", "boolean", "assert", "abstract"] %}
    {%- if sanitized_name in java_keywords -%}
        {{- sanitized_name + '_' -}}
    {%- else -%}
        {{- sanitized_name -}}
    {%- endif -%}
{%- endmacro -%}

{%- macro struct(display_name, doc, fields, implements, union_tag, modifier) %}
    {{ docstring(doc) }}
public {% if modifier %}{{ modifier }} {% endif %}class {{ display_name }}{% if implements %} implements {{ implements }}{% endif %} {
    {%- for field_name, field_type in fields.items() %}
    public final {{ to_maybe_opt_java_type(field_type, field_name) }} {{ sanitize_field_name(field_name) }};
    {%- endfor %}

    public final Map<String, Object> pseudoJson;

    public {{ display_name }}(Map<String, Object> pseudoJson) {
        this.pseudoJson = pseudoJson;
    }

    public static {{ display_name }} fromTyped(Builder b) {
        var map = new HashMap<String, Object>();
        {%- for field_name, field_type in fields.items() %}
        {%- if '!' in field_name %}
        b.{{ sanitize_field_name(field_name) }}.ifPresent(f -> {
            map.put("{{ field_name }}", {% call unmarshall_java_type(field_type, 0) %}f{% endcall %});
        });
        {%- else %}
        map.put("{{ field_name }}", {% call unmarshall_java_type(field_type, 0) %}b.{{ sanitize_field_name(field_name) }}{% endcall %});
        {%- endif %}
        {%- endfor %}
        return new {{ display_name }}(map);
    }

    {%- for field_name, field_type in fields.items() %}
    public {{ to_maybe_opt_java_type(field_type, field_name) }} {{ sanitize_field_name(field_name) }}() {
        return
            {%- if '!' in field_name %} this.pseudoJson.containsKey("{{ field_name }}") ? new Optional_<{{ to_java_type(field_type) }}>({% call marshall_java_type(field_type, 0) %}this.pseudoJson.get("{{ field_name }}"){% endcall %}) : new Optional_<>()
            {%- else %} {% call marshall_java_type(field_type, 0) %}this.pseudoJson.get("{{ field_name }}"){% endcall %}{% endif %};
        
    };
    {%- endfor %}

    public static class Builder {
        {%- for field_name, field_type in fields.items() %}
        private {{ to_maybe_opt_java_type(field_type, field_name) }} {{ sanitize_field_name(field_name) }}{% if '!' in field_name %} = new Optional_<>(){% endif %};
        {%- endfor %}

        public Builder() {
        }

        {%- for field_name, field_type in fields.items() %}
        public Builder {{ sanitize_field_name(field_name) }}({{ to_java_type(field_type) }} {{ sanitize_field_name(field_name) }}) {
            this.{{ sanitize_field_name(field_name) }} = {% call setter_maybe_opt(field_name) %}{{ sanitize_field_name(field_name) }}{% endcall %};
            return this;
        }
        {%- endfor %}
    }
}
{%- endmacro %}

{%- macro union(display_name, doc, tags) %}
    {{ docstring(doc) }}
public class {{ display_name }} {

    public final Map<String, Object> pseudoJson;

    {%- for tag_entry in tags %}
        {% set tag_key = tag_entry | find_tag_key %}
        {{ struct(tag_key, tag_entry['///'], tag_entry[tag_key], display_name + '.TaggedValue', tag_key, 'static final') | indent }}
    {%- endfor %}

    public {{ display_name }}(Map<String, Object> pseudoJson) {
        this.pseudoJson = pseudoJson;
    }

    public static final class NoMatch_ implements {{ display_name }}.TaggedValue {
        public final String tag;
        public final Map<String, Object> payload;

        public NoMatch_(String tag, Map<String, Object> payload) {
            this.tag = tag;
            this.payload = payload;
        }
    }

    public TaggedValue getTaggedValue() {
        var tag = this.pseudoJson.keySet().iterator().next();
        {%- for tag_entry in tags %}
            {%- set tag_key = tag_entry | find_tag_key %}
        if (tag.equals("{{ tag_key }}")) {
            return new {{ tag_key }}((Map<String, Object>) this.pseudoJson.get(tag));
        }
        {%- endfor %}
        return new NoMatch_(tag, (Map<String, Object>) this.pseudoJson.get(tag));
    }

    sealed interface TaggedValue {}
}
{%- endmacro %}

{%- macro function(display_name, data, schema_key) %}
public final class {{ display_name }} {

    {{ struct('Input', data['///'], data[schema_key], None, schema_key, 'static') | indent }}

    {{ union ('Output', data['///'], data['->']) | indent }}
}
{%- endmacro %}


{%- set schema_key = data | find_schema_key %}
{%- set java_name = schema_key | regex_replace('^.*\\.', '') %}

{%- if schema_key.startswith('struct') %}
    {{ struct(java_name, data['///'], data[schema_key], None, None, None) }}
{%- elif schema_key.startswith('union') %}
    {{ union(java_name, data['///'], data[schema_key]) }}
{%- elif schema_key.startswith('fn') %}
    {{ function(java_name, data, schema_key) }}
{%- endif %}

