package {{ package }};

import java.util.List;
import java.util.Map;

{%- macro to_java_type(t) %}
    {%- set typ = t | replace('?', '') %}
    {%- if typ == 'array' %}
        {{- 'List' -}}
    {%- elif typ == 'object' %}
        {{- 'Map' -}}
    {%- elif typ == 'boolean' %}
        {{- 'Boolean' -}}
    {%- elif typ == 'integer' %}
        {{- 'Integer' -}}
    {%- elif typ == 'number' %}
        {{- 'Number' -}}
    {%- elif typ == 'string' %}
        {{- 'String' -}}
    {%- else %}
        {{- t | regex_replace('^.*\\.', '') -}}
    {%- endif %}
{%- endmacro -%}

{%- macro translate(type) -%}
    {{- to_java_type(type[0]) -}}
    {%- if type | length > 1 -%}
        {{- '<' -}}
        {%- for t in type[1:] -%}
            {{- translate(t) -}}{{ ", " if not loop.last -}}
        {%- endfor -%}
        {{- '>' -}}
    {%- endif -%}
{%- endmacro %}


{%- macro struct(data, schema_key) %}
    {% set fields = data[schema_key] %}
    {%- set java_name = schema_key | regex_replace('^.*\\.', '') %}
    {%- if '///' in data %}
        /**
        {%- for line in data['///'] %}
         * {{ line }}
        {%- endfor %}
         */
    {% endif %}
public class {{ java_name }}{% if '<1>' in schema_key %}{{ '<T0>' }}{% elif '2' in schema_key %}{{ '<T0, T1>'}}{% elif '<2>' in schema_key %}{{ '<T0, T1, T2>' }}{% endif %} {
    {%- for field_name, field_type in fields.items() %}
    private {{ translate(field_type) }} {{ field_name }};
    {%- endfor %}

    public {{ java_name }}({% for field_name, field_type in fields.items() %}{{ translate(field_type) }} {{ field_name }}{% if not loop.last %}, {% endif %}{% endfor %}) {
        {%- for field_name, field_type in fields.items() %}
        this.{{ field_name }} = {{ field_name }};
        {%- endfor %}
    }
}
{%- endmacro %}

{% set schema_key = data | find_schema_key %}

{% if schema_key.startswith('struct') %}
    {{ struct(data, schema_key) }}
{% endif %}

