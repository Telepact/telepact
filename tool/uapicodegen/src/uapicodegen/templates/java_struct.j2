package {{ package }};
{% set import_types = [] -%}
{% set java_name = name | regex_replace('^.*\\.', '') %}

{%- macro get_imports_rec(field_types) -%}
    {%- set field_type = field_types[0] | replace('?', '') -%}
    {%- if field_type == 'array' -%}
        {%- do import_types.append('java.util.List') -%}
    {%- elif field_type == 'object' -%}
        {%- do import_types.append('java.util.Map') -%}
        {%- do field_types.insert(1, ['string']) -%}
    {%- endif -%}
    {%- for t in field_types[1:] -%}
        {{ get_imports_rec(t) }}
    {%- endfor -%}
{%- endmacro -%}

{%- macro get_imports(fields) -%}
    {%- for field in fields -%}
        {{- get_imports_rec(field.type) }}
    {%- endfor -%}
{%- endmacro -%}

{{- get_imports(fields) -}}

{% set seen = [] -%}
{%- for import_type in import_types -%}
    {%- if import_type not in seen %}
import {{ import_type }};
        {%- do seen.append(import_type) -%}
    {%- endif -%}
{%- endfor -%}

{%- macro to_java_type(t) %}
    {%- set typ = t | replace('?', '') %}
    {%- if typ == 'array' %}
        {{- 'List' -}}
    {%- elif typ == 'object' %}
        {{- 'Map' -}}
    {%- elif typ == 'boolean' %}
        {{- 'Boolean' -}}
    {%- elif typ == 'integer' %}
        {{- 'Integer' -}}
    {%- elif typ == 'number' %}
        {{- 'Number' -}}
    {%- elif typ == 'string' %}
        {{- 'String' -}}
    {%- else %}
        {{- t | regex_replace('^.*\\.', '') -}}
    {%- endif %}
{%- endmacro -%}

{%- macro translate(type) -%}
    {{- to_java_type(type[0]) -}}
    {%- if type | length > 1 -%}
        {{- '<' -}}
        {%- for t in type[1:] -%}
            {{- translate(t) -}}{{ ", " if not loop.last -}}
        {%- endfor -%}
        {{- '>' -}}
    {%- endif -%}
{%- endmacro %}


public class {{ java_name }} {% if '<1>' in name %}{{ '<T0>' }}{% elif '2' in name %}{{ '<T0, T1>'}}{% elif '<2>' in name %}{{ '<T0, T1, T2>' }}{% endif %} {
    {%- for field in fields %}
    private {{ translate(field.type) }} {{ field.name }};
    {%- endfor %}

    public {{ java_name }}({% for field in fields %}{{ translate(field.type) }} {{ field.name }}{% if not loop.last %}, {% endif %}{% endfor %}) {
        {%- for field in fields %}
        this.{{ field.name }} = {{ field.name }};
        {%- endfor %}
    }
}
