[
    {
        "info.SchemaExample": {}
    },
    {
        "///": " A type. ",
        "union.Type": [{
            "Null": {}
        }, {
            "Boolean": {}
        }, {
            "Integer": {}
        }, {
            "Number": {}
        }, {
            "String": {}
        }, {
            "Array": {}
        }, {
            "Object": {}
        }, {
            "Any": {}
        }, {
            "Unknown": {}
        }]
    },
    {
        "union.ValidationFailureReason": [{
            "TypeUnexpected": {
                "expected": ["union.Type"],
                "actual": ["union.Type"]
            }
        }, {
            "ErrorDefinitionCannotTargetInternalFunctions": {}
        }, {
            "EmptyArrayDisallowed": {}
        }, {
            "EmptyObjectDisallowed": {}
        }, {
            "StringRegexMatchFailed": {
                "regex": ["string"]
            }
        }, {
            "KeyRegexMatchFailed": {
                "regex": ["string"]
            }
        }, {
            "ObjectKeyRegexMatchCountUnexpected": {
                "regex": ["string"],
                "expected": ["integer"],
                "actual": ["integer"],
                "keys": ["array", ["string"]]
            }
        }, {
            "ArrayLengthUnexpected": {
                "actual": ["integer"],
                "expected": ["integer"]
            }
        }, {
            "TypeUnknown": {
                "name": ["string"]
            }
        }, {
            "TypeExtensionImplementationMissing": {
                "name": ["string"]
            }
        }, {
            "RequiredObjectKeyMissing": {}
        }, {
            "JsonInvalid": {}
        }, {
            "PathCollision": {
                "document": ["string"],
                "path": ["array", ["any"]]
            }
        }, {
            "ObjectKeyDisallowed": {}
        }]
    },
    {
        "struct.ValidationFailure": {
            "document": ["string"],
            "path": ["array", ["any"]],
            "reason": ["union.ValidationFailureReason"]
        }
    },
    {
        "fn.validateSchema": {
            "schema": ["any?"],
            "extend!": ["any"],
            "extendJson!": ["any?"]
        },
        "->": [{
            "Ok_": {}
        }, {
            "ErrorValidationFailure": {
                "cases": ["array", ["struct.ValidationFailure"]]
            }
        }]
    }
]