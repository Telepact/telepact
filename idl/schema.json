{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "type": "object",
  "additionalProperties": false,
  "patternProperties": {
    "^/[/|0-9][/|0-9]$": {
      "type": "string"
    },
    "^struct\\.[a-zA-Z_]\\w*": {
      "type": "object",
      "description": "A struct with 0 or more fields.",
      "additionalProperties": false,
      "patternProperties": {
        "^/[/|0-9][/|0-9]$": {
          "type": "string"
        },
        "^[a-zA-Z_]\\w*!?$": {
          "$ref": "#/$defs/typeDeclaration"
        }
      },
      "defaultSnippets": [
        {
          "label": "Struct template",
          "body": {
            "///": " A struct template.",
            "field1$0": "boolean",
            "field2": "struct.Example1"
          }
        }
      ]
    },
    "enum\\.[a-zA-Z_]\\w*$": {
      "type": "object",
      "description": "An enum with 1 or more fields.",
      "additionalProperties": false,
      "patternProperties": {
        "^/[/|0-9][/|0-9]$": {
          "type": "string"
        },
        "^[a-zA-Z_]\\w*?$": {
          "type": "object",
          "additionalProperties": false,
          "patternProperties": {
            "^/[/|0-9][/|0-9]$": {
              "type": "string"
            },
            "^[a-zA-Z_]\\w*!?$": {
              "$ref": "#/$defs/typeDeclaration"
            }
          }
        }
      },
      "defaultSnippets": [
        {
          "label": "enum template",
          "body": {
            "///": "An enum template.",
            "value1$0": {
              "field1": "boolean"
            },
            "value2": {}
          }
        }
      ]
    },
    "^fn\\.[a-zA-Z_]\\w*": {
      "description": "A function that accepts an argument argument and returns a result enum that is either an ok struct or an error enum.",
      "type": "object",
      "required": ["arg", "result"],
      "additionalProperties": false,
      "patternProperties": {
        "^/[/|0-9][/|0-9]$": {
          "type": "string"
        }
      },
      "properties": {
        "arg": {
          "type": "object",
          "additionalProperties": false,
          "patternProperties": {
            "^/[/|0-9][/|0-9]$": {
              "type": "string"
            },
            "^[a-zA-Z_]\\w*!?$": {
              "$ref": "#/$defs/typeDeclaration"
            }
          }
        },
        "result": {
          "type": "object",
          "required": ["ok"],
          "patternProperties": {
            "^/[/|0-9][/|0-9]$": {
              "type": "string"
            },
            "^[a-zA-Z_]\\w*?$": {
              "type": "object",
              "additionalProperties": false,
              "patternProperties": {
                "^/[/|0-9][/|0-9]$": {
                  "type": "string"
                },
                "^[a-zA-Z_]\\w*!?$": {
                  "$ref": "#/$defs/typeDeclaration"
                }
              }
            }
          }
        }
      },
      "defaultSnippets": [
        {
          "label": "Function template",
          "body": {
            "///": "A function template.",
            "arg": {
              "argumentField1": "boolean",
              "argumentField2": "struct.Example1"
            },
            "result": {
              "ok": {
                "field1": "string",
                "field2": "struct.Example2"
              },
              "errorCustom": {
                "field1": "integer"
              }
            }
          }
        }
      ]
    },
    "^trait\\.[a-zA-Z_]\\w*": {
      "type": "object",
      "description": "A trait of common argument struct fields and result enum values that applies to all functions.",
      "additionalProperties": false,
      "patternProperties": {
        "^/[/|0-9][/|0-9]$": {
          "type": "string"
        }
      },
      "properties": {
        "excludes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "arg": {
          "type": "object",
          "patternProperties": {
            "^/[/|0-9][/|0-9]$": {
              "type": "string"
            },
            "^[a-zA-Z_]\\w*!?$": {
              "$ref": "#/$defs/typeDeclaration"
            }
          }
        },
        "result": {
          "type": "object",
          "patternProperties": {
            "^/[/|0-9][/|0-9]$": {
              "type": "string"
            },
            "^[a-zA-Z_]\\w*?$": {
              "type": "object",
              "additionalProperties": false,
              "patternProperties": {
                "^/[/|0-9][/|0-9]$": {
                  "type": "string"
                },
                "^[a-zA-Z_]\\w*!?$": {
                  "$ref": "#/$defs/typeDeclaration"
                }
              }
            }
          }
        }
      },
      "defaultSnippets": [
        {
          "label": "Function template",
          "body": {
            "arg": {
              "argumentField1": "boolean",
              "argumentField2": "struct.Example1"
            },
            "result": {
              "ok": {
                "field1": "string",
                "field2": "struct.Example2"
              },
              "errorCustom": {
                "field1": "integer"
              }
            }
          }
        }
      ]
    }
  },
  "$defs": {
    "typeDeclaration": {
      "type": "string",
      "pattern": "^((boolean|integer|number|string|any)|((enum|struct)\\.([a-zA-Z_]\\w*))|(fn(\\.(([a-zA-Z_]\\w*)|\\*)(\\.arg)?)?)|((array|object)<(((boolean|integer|number|string|any)|((enum|struct)\\.([a-zA-Z_]\\w*))|(fn(\\.(([a-zA-Z_]\\w*)|\\*)(\\.arg)?)?)|((array|object)<(((boolean|integer|number|string|any)|((enum|struct)\\.([a-zA-Z_]\\w*))|(fn(\\.(([a-zA-Z_]\\w*)|\\*)(\\.arg)?)?)|((array|object)<(((boolean|integer|number|string|any)|((enum|struct)\\.([a-zA-Z_]\\w*))|(fn(\\.(([a-zA-Z_]\\w*)|\\*)(\\.arg)?)?)|((array|object)<(((boolean|integer|number|string|any)|((enum|struct)\\.([a-zA-Z_]\\w*))|(fn(\\.(([a-zA-Z_]\\w*)|\\*)(\\.arg)?)?)|((array|object)<(((boolean|integer|number|string|any)|((enum|struct)\\.([a-zA-Z_]\\w*))|(fn(\\.(([a-zA-Z_]\\w*)|\\*)(\\.arg)?)?)|((array|object)<any>))(\\?)?)>))(\\?)?)>))(\\?)?)>))(\\?)?)>))(\\?)?)>))(\\?)?$",
      "description": "A field declaration.\nThe field name must be a legal JavaScript identifier, which can be appended by `!` to indicate optionality.\nThe value must be a jAPI type string that is (1) a standard type (e.g. boolean, string), (2) a custom type (e.g. struct.Example1, enum.Example2) defined within the scope of this jAPI description, or (3) a collection type of a recursive instance of another jAPI type string (e.g. array&lt;integer&gt;, object<array<struct.Example>>), which can be appended by `?` to indicate nullability.",
      "defaultSnippets": [
        {
          "label": "jAPI type declaration",
          "body": "${1|boolean,integer,number,string,any,array<any>,object<any>,struct.Example,enum.Example|}"
        }
      ]
    }
  }
}
