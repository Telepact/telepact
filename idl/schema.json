{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "type": "object",
  "additionalProperties": false,
  "properties": {
    "test": {
      "type": "string",
      "description": "The value."
    }
  },
  "patternProperties": {
    "^info\\.[a-zA-Z_]\\w*$": {
      "type": "array",
      "prefixItems": [
        {
          "type": "object"
        },
        {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      ],
      "items": false,
      "minItems": 1,
      "maxItems": 2,
      "defaultSnippets": [
        {
          "label": "Info template",
          "body": [
            [
              "                   ",
              " An info template. ",
              "                   "
            ],
            {
              "metadata1$0": "Some info",
              "metadata2": "Some other info"
            }
          ]
        }
      ]
    },
    "^struct\\.[a-zA-Z_]\\w*": {
      "type": "array",
      "description": "A struct with 0 or more fields.",
      "prefixItems": [
        {
          "type": "object",
          "additionalProperties": false,
          "patternProperties": {
            "^[a-zA-Z_]\\w*!?$": {
              "$ref": "#/$defs/typeDeclaration"
            }
          }
        },
        {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      ],
      "items": false,
      "minItems": 1,
      "maxItems": 2,
      "defaultSnippets": [
        {
          "label": "Struct template",
          "body": [
            [
              "                    ",
              " A struct template. ",
              "                    "
            ],
            {
              "field1$0": "boolean",
              "field2": "struct.Example1"
            }
          ]
        }
      ]
    },
    "enum\\.[a-zA-Z_]\\w*$": {
      "type": "array",
      "description": "An enum with 1 or more fields.",
      "prefixItems": [
        {
          "type": "object",
          "minProperties": 1,
          "additionalProperties": false,
          "patternProperties": {
            "^[a-zA-Z_]\\w*?$": {
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "patternProperties": {
                    "^[a-zA-Z_]\\w*!?$": {
                      "$ref": "#/$defs/typeDeclaration"
                    }
                  }
                },
                {
                  "type": "object",
                  "minProperties": 1,
                  "additionalProperties": false,
                  "patternProperties": {
                    "^[a-zA-Z_]\\w*?$": {
                      "oneOf": [
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "patternProperties": {
                            "^[a-zA-Z_]\\w*!?$": {
                              "$ref": "#/$defs/typeDeclaration"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "minProperties": 1,
                          "additionalProperties": false,
                          "patternProperties": {
                            "^[a-zA-Z_]\\w*?$": {
                              "oneOf": [
                                {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "patternProperties": {
                                    "^[a-zA-Z_]\\w*!?$": {
                                      "$ref": "#/$defs/typeDeclaration"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "minProperties": 1,
                                  "additionalProperties": false,
                                  "patternProperties": {
                                    "^[a-zA-Z_]\\w*?$": {
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "additionalProperties": false,
                                          "patternProperties": {
                                            "^[a-zA-Z_]\\w*!?$": {
                                              "$ref": "#/$defs/typeDeclaration"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "minProperties": 1,
                                          "additionalProperties": false,
                                          "patternProperties": {
                                            "^[a-zA-Z_]\\w*?$": {
                                              "type": "object",
                                              "additionalProperties": false,
                                              "patternProperties": {
                                                "^[a-zA-Z_]\\w*!?$": {
                                                  "$ref": "#/$defs/typeDeclaration"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          }
        },
        {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      ],
      "items": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "minItems": 1,
      "maxItems": 2,
      "defaultSnippets": [
        {
          "label": "enum template",
          "body": [
            [
              "                   ",
              " An enum template. ",
              "                   "
            ],
            {
              "value1$0": {
                "field1": "boolean"
              },
              "value2": {}
            }
          ]
        }
      ]
    },
    "^fn\\.[a-zA-Z_]\\w*": {
      "type": "array",
      "description": "A function that accepts an argument argument and returns a result enum that is either an ok struct or an error enum.",
      "prefixItems": [
        {
          "type": "object",
          "additionalProperties": false,
          "patternProperties": {
            "^[a-zA-Z_]\\w*!?$": {
              "$ref": "#/$defs/typeDeclaration"
            }
          }
        },
        {
          "const": "->"
        },
        {
          "type": "object",
          "required": ["ok"],
          "properties": {
            "ok": {
              "type": "object",
              "additionalProperties": false,
              "patternProperties": {
                "^[a-zA-Z_]\\w*!?$": {
                  "$ref": "#/$defs/typeDeclaration"
                }
              }
            }
          },
          "patternProperties": {
            "^[a-zA-Z_]\\w*?$": {
              "type": "object",
              "additionalProperties": false,
              "patternProperties": {
                "^[a-zA-Z_]\\w*!?$": {
                  "$ref": "#/$defs/typeDeclaration"
                }
              }
            }
          }
        },
        {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      ],
      "items": false,
      "minItems": 3,
      "maxItems": 4,
      "defaultSnippets": [
        {
          "label": "Function template",
          "body": [
            {
              "argumentField1": "boolean",
              "argumentField2": "struct.Example1"
            },
            "->",
            {
              "ok": {
                "field1": "string",
                "field2": "struct.Example2"
              },
              "err": {
                "_unknown": {},
                "custom": {
                  "field1": "integer"
                }
              }
            },
            [
              "                      ",
              " A function template. ",
              "                      "
            ]
          ]
        }
      ]
    }
  },
  "$defs": {
    "typeDeclaration": {
      "type": "string",
      "pattern": "^((boolean|integer|number|string|any)|((enum|struct|fn)\\.([a-zA-Z_]\\w*))|((array|object)<(((boolean|integer|number|string|any)|((enum|struct|fn)\\.([a-zA-Z_]\\w*))|((array|object)<(((boolean|integer|number|string|any)|((enum|struct|fn)\\.([a-zA-Z_]\\w*))|((array|object)<(((boolean|integer|number|string|any)|((enum|struct|fn)\\.([a-zA-Z_]\\w*))|((array|object)<(((boolean|integer|number|string|any)|((enum|struct|fn)\\.([a-zA-Z_]\\w*))|((array|object)<(((boolean|integer|number|string|any)|((enum|struct|fn)\\.([a-zA-Z_]\\w*))|((array|object)<(any)>))(\\?)?)>))(\\?)?)>))(\\?)?)>))(\\?)?)>))(\\?)?)>))(\\?)?$",
      "description": "A field declaration.\nThe field name must be a legal JavaScript identifier, which can be appended by `!` to indicate optionality.\nThe value must be a jAPI type string that is (1) a standard type (e.g. boolean, string), (2) a custom type (e.g. struct.Example1, enum.Example2) defined within the scope of this jAPI description, or (3) a collection type of a recursive instance of another jAPI type string (e.g. array&lt;integer&gt;, object<array<struct.Example>>), which can be appended by `?` to indicate nullability.",
      "defaultSnippets": [
        {
          "label": "jAPI type declaration",
          "body": "${1|boolean,integer,number,string,any,array<any>,object<any>,struct.Example,enum.Example|}"
        }
      ]
    }
  }
}
